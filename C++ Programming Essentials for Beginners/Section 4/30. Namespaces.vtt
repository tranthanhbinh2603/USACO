WEBVTT

00:02.470 --> 00:03.100
Hi, everyone.

00:03.460 --> 00:10.000
In this lecture, we're going to talk about namespaces, OK, so the concept of namespaces is has been

00:10.000 --> 00:16.570
created to avoid naming conflicts when you can use multiple third party libraries in the same program.

00:17.380 --> 00:21.640
Whenever you're writing code, you are importing some code, like from India while you're importing

00:21.640 --> 00:22.190
few things.

00:22.810 --> 00:24.730
And if you use multiple libraries.

00:24.760 --> 00:33.040
OK, so it may happen that two people develop two different libraries and they created a common function

00:33.280 --> 00:33.860
for the same.

00:33.880 --> 00:34.180
OK.

00:34.870 --> 00:40.210
One example there is a popular choice that is a popular library, which is known as open TV.

00:40.870 --> 00:41.100
OK.

00:41.450 --> 00:47.770
And it is for basically used for tasks related with image processing.

00:48.070 --> 00:48.280
OK.

00:49.390 --> 00:57.280
And what may happen is not two different beams later, these libraries, and that was the team that

00:57.280 --> 00:58.390
created C++.

00:58.510 --> 01:01.330
Let us assume they created a function called print.

01:02.080 --> 01:02.380
OK.

01:02.920 --> 01:04.600
And that except in digit.

01:05.080 --> 01:07.600
And they print that integer on the screen.

01:09.070 --> 01:16.540
But let us say there is these people are open to, let's say they also created a library and they created

01:16.540 --> 01:17.620
a function called print.

01:18.510 --> 01:23.740
And maybe this except the image, and it draws that image on the screen.

01:24.010 --> 01:24.220
It.

01:25.950 --> 01:31.710
Now, the functionality of this brain function would be very different from the functionality of this

01:31.710 --> 01:33.900
brain function, but they have the same name.

01:34.860 --> 01:40.380
Now how do we get to know that OK, if are using both the libraries in the world, for example, if

01:40.380 --> 01:45.090
you write some good news, OK, I want to include iOS stream.

01:46.580 --> 01:53.300
Because I also want to print Indigenous and I also want to use opens even my library because maybe I

01:53.300 --> 01:54.990
want to look with images as well.

01:55.640 --> 01:57.170
I mean, we should include open TV.

01:57.920 --> 02:00.110
I include both of these libraries in my code.

02:00.860 --> 02:07.280
Now in your mean or in your other function, you're saying, OK, I want to use the brain function.

02:08.390 --> 02:12.500
Now, how do you identify which brain function is this one?

02:12.530 --> 02:19.670
Is it the brain function coming from the C++ library or is it the brain function coming from the open

02:19.670 --> 02:20.960
TV C++ library?

02:21.320 --> 02:24.560
This is this is actually creating a kind of a confusion.

02:25.260 --> 02:26.870
So how do we resolve this conflict?

02:27.050 --> 02:31.640
So we resolve this conflict by defining the namespace before the function?

02:31.760 --> 02:40.980
So these OK, if it is coming from the C++ library, those C++ library defines all its functions and

02:42.130 --> 02:48.490
in entire classes inside a namespace which is known as SD.

02:48.750 --> 02:57.060
OK, that means the standard name of the C++ namespace and openly will be able to find everything inside

02:57.060 --> 02:58.290
the namespace called TV.

02:58.990 --> 03:05.540
If I want to use the function from this open TV space or namespace, I will say, OK, it is equal and

03:05.540 --> 03:06.380
go and OK.

03:07.390 --> 03:11.710
That means the brain function from the open living space.

03:12.040 --> 03:14.800
Or if they want to use this function, I can look at study.

03:16.430 --> 03:22.640
Brent, maybe use this particular function to namespaces odd used to.

03:24.810 --> 03:29.670
Avoid conflicts because and when you're using multiple libraries.

03:30.330 --> 03:35.490
Few of the things, they can have common names, but I hope you understood what what is the concept

03:35.490 --> 03:40.870
at the high level to avoid data structure and function name conflicts?

03:40.890 --> 03:46.830
OK, so even and there can be two different researchers which behave in a different manner, but they

03:46.830 --> 03:51.960
might get the same name because it was created independently by two different teams.

03:53.290 --> 03:56.360
But each team will define its own namespace.

03:56.420 --> 04:00.820
OK, so open TV has its own namespace, which is known as S.V.

04:01.390 --> 04:05.110
And if you does, OK, I will not define.

04:08.600 --> 04:15.680
Wee, every bit I will just show you, the good to study is the namespace for the standard it as a name

04:15.680 --> 04:25.100
for the standard C++ namespace and writing studio code, for example, you want to use the object code

04:25.520 --> 04:28.430
and this object belongs to the standard namespace.

04:28.970 --> 04:35.750
It will tell the compiler to use code from the standard namespace by default when we are writing code.

04:35.990 --> 04:38.210
I will just give you a quick demo as well.

04:39.080 --> 04:39.650
So.

04:41.350 --> 04:45.880
OK, so this is one of the code that we have written, so we are saying it using names.

04:46.630 --> 04:53.110
So that means all the data, such names, all the function names that we are using in this code they

04:53.110 --> 04:54.870
belong to, the standard is OK.

04:55.210 --> 05:02.230
So we are just kind of saying, OK, you don't ask me which namespace see belongs to or which namespace

05:02.240 --> 05:03.160
code belongs to.

05:03.490 --> 05:05.890
Everything belongs to the standard namespace, OK?

05:06.250 --> 05:11.380
That is why we have included this line in the beginning so that we don't have to tell compile it again

05:11.380 --> 05:11.800
and again.

05:12.130 --> 05:17.320
But suppose you don't include this line in your code, and let's say we're building this code.

05:18.580 --> 05:21.560
And this time I'm not writing using names, but as Julie.

05:21.970 --> 05:26.320
So let me see if this file and maybe say a namespace demo or TPP.

05:27.370 --> 05:29.200
If it's intimate.

05:29.380 --> 05:32.560
And I feel out, it's a hello world.

05:33.400 --> 05:39.640
Let us see what happens if you use something from a standard name spit and without telling the compiler.

05:39.720 --> 05:43.210
This is this code belongs to the standard namespace.

05:44.080 --> 05:45.700
Let's see what happened in this case.

05:49.650 --> 05:49.940
OK.

05:50.420 --> 05:53.430
The file name is names beside them.

05:53.520 --> 05:54.780
We are going to compile this.

05:55.140 --> 06:00.240
We can say the C++ namespace got damaged or ZBB.

06:00.840 --> 06:02.280
And now you can see that.

06:03.210 --> 06:05.310
It is saying error.

06:05.400 --> 06:11.090
Use of undeclared identify it the out it says, did you mean s2.0?

06:11.810 --> 06:16.740
It is giving you a recommendation that this identified is not declared.

06:17.190 --> 06:17.550
OK.

06:17.910 --> 06:22.950
So although this object exists in the library, I was dream.

06:23.770 --> 06:25.410
But but.

06:26.990 --> 06:33.680
Every object should come from a namespace, the name is a region where all these names are declared

06:33.770 --> 06:35.240
OK, so they are not defined.

06:35.780 --> 06:36.320
Declared.

06:36.940 --> 06:41.990
So in order to use anything, the declaration is also important or equally as their definition.

06:42.620 --> 06:47.210
One thing is how to create that object that is given a new stream.

06:47.240 --> 06:47.570
OK.

06:48.200 --> 06:55.430
And another thing is registering the name of the object with this compiler, that thing that registering

06:55.430 --> 06:57.860
the name is known as declaration.

06:57.860 --> 07:03.600
We are telling the compiler, OK, and there is something known as C out how code works.

07:03.620 --> 07:07.820
It is in our stream, but we have to register this name.

07:07.910 --> 07:14.060
That is that it is stored in the namespace of C++, which is goes by the name as Judy.

07:14.120 --> 07:18.500
So a study is the name of the standard C++ names.

07:19.340 --> 07:26.240
In this course, we are only going to follow one namespace that is a standard C++ namespace and everything

07:26.240 --> 07:26.930
is declared.

07:26.930 --> 07:29.130
And this namespace was the OTAs declared here.

07:29.630 --> 07:30.770
The declared here.

07:30.830 --> 07:31.160
OK.

07:32.000 --> 07:34.580
Either you include the entire namespace.

07:35.100 --> 07:41.870
OK, that will mean all the things are coming from the standard namespace.

07:42.470 --> 07:48.020
But if you just want to use this code, not everything else from the start namespace, you're going

07:48.020 --> 07:50.510
to study well, then go out.

07:50.840 --> 07:55.250
OK, I'm saying the code that has been declared inside the standard namespace.

07:55.250 --> 07:57.350
Use that and print Hello world.

07:57.770 --> 08:00.560
OK, so now if I build my code again?

08:01.770 --> 08:06.900
And now you can see it works perfectly fine and I can run it using it out.

08:08.820 --> 08:15.390
So it says hello, so this is working well, firstly, fine either you do this, but if you do this,

08:15.390 --> 08:22.050
you have to use it with every statement like you have actually seen and do some work.

08:23.700 --> 08:29.940
And or whatever is the number that you want to take in, so you're going to end then and begin to then

08:29.940 --> 08:31.140
write something like this?

08:32.340 --> 08:38.460
So let's build the gold again, and let's say I want to run it again, so I will dig and put another

08:38.460 --> 08:38.850
five.

08:40.770 --> 08:47.910
So one runways, you use a study with all the researchers, all the objects are all the functions that

08:47.910 --> 08:50.340
you want to use from the standard namespace.

08:50.680 --> 08:54.600
The database you OK, I will only follow the standard namespace.

08:55.790 --> 08:59.060
And dressed everything, I will figure it out on my own right.

08:59.900 --> 09:06.350
Maybe what you're going to do if you're using working with the image processing library and you also

09:06.350 --> 09:06.860
want to.

09:08.670 --> 09:10.050
Maybe include open TV.

09:10.500 --> 09:12.340
This needs to be installed separately.

09:13.080 --> 09:15.810
You can also include two namespaces.

09:18.300 --> 09:26.760
Insider gold and now a conflict will arise if you have a method to print and it exists in both the namespaces.

09:26.790 --> 09:33.570
Let's say it exists in a steady namespace also, and it exists in the sea names.

09:33.570 --> 09:39.300
But also then you have to specify, OK, I'm talking about the print method that is there in the CV

09:39.300 --> 09:40.950
namespace, something like this.

09:42.240 --> 09:49.670
So this will help you to avoid any naming conflict that may arise that that is all about named basis.

09:49.680 --> 09:51.690
I wanted to talk to you.

09:52.230 --> 09:53.940
And that's all for this video.

09:54.120 --> 09:56.280
I hope you find it a little helpful.

09:57.210 --> 09:57.990
Thanks a lot.
