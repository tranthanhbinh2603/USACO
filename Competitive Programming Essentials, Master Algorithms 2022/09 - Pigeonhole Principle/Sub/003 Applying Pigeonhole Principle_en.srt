1
00:00:01,780 --> 00:00:07,030
So let us continue our discussion on the problem divSubs and let's try to prove that this problem

2
00:00:07,030 --> 00:00:13,880
can be solved using pigeonhole principle and that to in almost linear time.

3
00:00:13,910 --> 00:00:17,410
OK. so we are going to look at how we can solve this problem

4
00:00:17,950 --> 00:00:20,410
So this test case we have already seen.

5
00:00:20,650 --> 00:00:22,180
And let's take an example.

6
00:00:22,330 --> 00:00:23,970
Let's take a array.

7
00:00:24,260 --> 00:00:28,030
One two three five and let's say seven.

8
00:00:28,540 --> 00:00:38,140
Let's say we have five elements in this array and we need to find a subset or not a subset. Subset

9
00:00:38,350 --> 00:00:40,150
there can be a lot of subset.

10
00:00:40,660 --> 00:00:48,400
So we said we will first try to find a subarray and we will prove the claim was that such a subarray

11
00:00:48,400 --> 00:00:49,570
will always exist.

12
00:00:49,940 --> 00:00:55,270
So we are claiming a subarray will always exist.

13
00:00:57,310 --> 00:01:03,550
OK. will always exist and we are not going to prove our claim.

14
00:01:04,180 --> 00:01:05,740
So what we are going to do?

15
00:01:06,040 --> 00:01:13,210
So if you need to find the sum of elements of a subarray  than what we generally do is, we make array

16
00:01:13,210 --> 00:01:14,620
of accumulative sum.

17
00:01:14,830 --> 00:01:16,750
OK, let's make another array.

18
00:01:17,620 --> 00:01:18,070
And

19
00:01:20,140 --> 00:01:21,550
what we will do? we will say ok.

20
00:01:21,970 --> 00:01:24,390
Let's find out the sum till this particular point.

21
00:01:24,490 --> 00:01:33,300
So this is one. what is the sum up to the index zero one two three four. The sum till this point is three

22
00:01:33,310 --> 00:01:34,750
this is three plus three six.

23
00:01:34,840 --> 00:01:36,610
This is what? this is

24
00:01:36,610 --> 00:01:37,120
11.

25
00:01:37,750 --> 00:01:41,100
And this is what? this is 11 plus 7, 18.

26
00:01:41,440 --> 00:01:41,700
OK.

27
00:01:43,250 --> 00:01:45,350
Sorry this should be

28
00:01:52,200 --> 00:01:55,170
Yeah, so this this sum should be what? this sum should be

29
00:01:55,810 --> 00:01:56,160
18.

30
00:01:56,400 --> 00:02:02,040
OK, so now what we can do is, we can say

31
00:02:03,370 --> 00:02:09,550
Suppose what we are saying is, we are saying. OK. we will find a subarray, maybe let's say this is

32
00:02:09,660 --> 00:02:13,500
subarray who's sum is divisible by N, let's say the value of N is five.

33
00:02:15,030 --> 00:02:24,330
So we are saying we know the sum till this particular point is let's say this sum B. the sum total before index

34
00:02:24,330 --> 00:02:26,340
one is still up to this particular point

35
00:02:26,340 --> 00:02:30,450
that is A. the sum of a subarray, the subarray sum

36
00:02:30,450 --> 00:02:32,670
can be computed in order one time.

37
00:02:32,670 --> 00:02:35,760
that is nothing but b minus a.

38
00:02:36,660 --> 00:02:45,720
OK, so we are saying b minus a taking mode with N that of subarray sum and this should be equal

39
00:02:45,720 --> 00:02:46,200
to zero.

40
00:02:46,650 --> 00:02:53,100
That means B mode N should be equal to A mode N.

41
00:02:53,130 --> 00:02:53,430
OK.

42
00:02:54,030 --> 00:02:57,780
So effectively what are B and A. So B and A denotes the cumulative sum.

43
00:02:57,810 --> 00:03:04,770
So what we do in this particular array is, we can reduce everything by mode N. OK.

44
00:03:04,770 --> 00:03:13,470
So if you do A mod N here here, what you're going to get? you're going to get these numbers. OK. so

45
00:03:13,470 --> 00:03:15,390
you're going to get one mode five.

46
00:03:15,540 --> 00:03:16,260
That is one.

47
00:03:17,530 --> 00:03:20,830
3 mode 5, 3. 6 mode 5.

48
00:03:22,090 --> 00:03:28,420
Again one. 11 mode 5 again one. 18, mode 5 that is three.

49
00:03:29,290 --> 00:03:29,890
All right.

50
00:03:30,370 --> 00:03:32,140
So we are getting so many numbers.

51
00:03:33,310 --> 00:03:41,730
So now we also know that something mode five, something mode five will always lie in five buckets.

52
00:03:41,740 --> 00:03:42,040
OK?

53
00:03:42,580 --> 00:03:47,320
So something mode five or something mode N will always lie in the buckets

54
00:03:47,740 --> 00:03:53,770
zero, one, two, three and four.

55
00:03:54,010 --> 00:03:54,340
OK.

56
00:03:56,080 --> 00:04:02,380
Right now, what we are getting is, we are getting three numbers which are getting mapped with the bucket

57
00:04:02,380 --> 00:04:02,620
one.

58
00:04:02,800 --> 00:04:08,140
OK. we are getting two numbers which are getting mapped with the bucket three

59
00:04:09,040 --> 00:04:12,780
and we're getting zero number mapped with the bucket two and zero numbers

60
00:04:13,320 --> 00:04:17,380
mapped with getting bucket four and zero numbers mapped with getting

61
00:04:18,700 --> 00:04:23,140
mapped with bucket zero. So right now, this is how their distribution is

62
00:04:23,320 --> 00:04:27,380
but now let me just tell you that there can be two possibilities. OK?

63
00:04:27,730 --> 00:04:31,240
So in the worst case, you might get something mode N as

64
00:04:32,500 --> 00:04:36,970
zero, one, two, three and four.

65
00:04:37,210 --> 00:04:47,110
OK. so we have five numbers and let us assume that these five numbers give these three different modes.

66
00:04:48,350 --> 00:04:49,780
OK, so now what

67
00:04:49,780 --> 00:04:50,500
may happen is.

68
00:04:51,310 --> 00:04:52,630
Let's say if something mode

69
00:04:52,690 --> 00:04:58,840
If I say OK. the cumulative sum till this particular point is let's zero.

70
00:04:59,410 --> 00:05:00,400
Then what it means

71
00:05:01,570 --> 00:05:05,200
you you already got the subarray. you already got the subarray.

72
00:05:05,410 --> 00:05:14,800
OK, if you have something like, if, if, if you get this some B as zero that means instead of five

73
00:05:14,800 --> 00:05:16,180
this number would have been four.

74
00:05:16,390 --> 00:05:19,450
OK. let's take the example of this array. Let

75
00:05:19,750 --> 00:05:22,300
one, two, three, four and seven.

76
00:05:22,870 --> 00:05:29,350
Then you have got sum one, three, six, 10 and 17.

77
00:05:29,920 --> 00:05:36,070
Then if you do mode with N, you would get one three one zero.

78
00:05:36,520 --> 00:05:39,010
and again, this is nothing but two.

79
00:05:40,090 --> 00:05:47,170
So if this sum is zero that means the sum till this particular point, the sum till this particular

80
00:05:47,170 --> 00:05:47,590
point.

81
00:05:48,430 --> 00:05:53,710
This sum is what? this is a subarray who's sum is divisible by N.

82
00:05:54,130 --> 00:05:59,350
So if you get the number zero then it means you are already done.

83
00:05:59,380 --> 00:06:05,800
But suppose instead of instead of getting zero, you get something else. OK. instead of getting zero,

84
00:06:05,800 --> 00:06:07,900
if you get something else as your sum

85
00:06:08,320 --> 00:06:09,490
that number could be one.

86
00:06:09,490 --> 00:06:12,670
That number could be two. that number would be three or that number could be four.

87
00:06:13,240 --> 00:06:18,130
That means it would always lie in the range one to four.

88
00:06:18,520 --> 00:06:18,810
OK.

89
00:06:19,390 --> 00:06:21,370
That means it would always lie in the range

90
00:06:21,940 --> 00:06:22,510
one to four.

91
00:06:22,540 --> 00:06:24,430
Let us say this number is nothing but two.

92
00:06:25,180 --> 00:06:32,260
So maybe what you get is, you get one two two and three four. let's say, two numbers

93
00:06:32,560 --> 00:06:33,790
they lie in the same bucket.

94
00:06:34,660 --> 00:06:40,450
So effectively, what I'm saying is if you get zero, you already find find out.

95
00:06:40,600 --> 00:06:42,250
You already found out one subarray  

96
00:06:42,250 --> 00:06:46,910
But if you don't get zero, then what happens? For these numbers

97
00:06:46,930 --> 00:06:51,820
You have five numbers. OK. and you have only four options.

98
00:06:52,480 --> 00:06:54,940
You have only four, four options.

99
00:06:55,030 --> 00:06:56,260
That means four buckets.

100
00:06:56,950 --> 00:07:03,860
That means there would be at least one bucket which is storing two numbers which are same. OK.

101
00:07:03,940 --> 00:07:06,120
In this case, there are multiple such buckets.

102
00:07:06,130 --> 00:07:07,540
There is a bucket of one.

103
00:07:07,540 --> 00:07:08,710
There is a bucket of three.

104
00:07:09,760 --> 00:07:11,900
There are only four options for five numbers.

105
00:07:11,900 --> 00:07:16,030
So according to the pigeonhole principle we can say, we can say.

106
00:07:17,220 --> 00:07:17,970
At least

107
00:07:19,510 --> 00:07:26,680
one bucket or at least one bucket or at least two sums

108
00:07:28,570 --> 00:07:35,140
will always lie in the same bucket. will always lie in the same bucket.

109
00:07:36,620 --> 00:07:45,680
Ok. that means we found out the values of B and A. that means such B and A will always exist because of

110
00:07:45,680 --> 00:07:46,880
the pigeonhole principle.

111
00:07:46,970 --> 00:07:49,260
Why? let us look at this example now.

112
00:07:49,700 --> 00:07:55,730
So we are saying. ok. this one and this one are same. so effectively if you pick the entire subarray

113
00:07:55,730 --> 00:07:56,580
in this range.

114
00:07:56,630 --> 00:08:04,150
That means if you pick these three elements that the elements to three five. they follow this property.

115
00:08:04,160 --> 00:08:04,490
OK?

116
00:08:04,880 --> 00:08:07,430
Or if you pick anything in the range.

117
00:08:08,450 --> 00:08:10,700
So this one and this one also same. OK.

118
00:08:11,330 --> 00:08:18,110
That means if you subtract the sum till this particular point is one. the sum to this particular point

119
00:08:18,110 --> 00:08:18,830
is also one.

120
00:08:19,610 --> 00:08:28,290
That means if you subtract this B minus this A, you again you can again get something like this.

121
00:08:28,310 --> 00:08:30,020
So you can get two, three.

122
00:08:30,020 --> 00:08:30,980
So two plus three.

123
00:08:31,670 --> 00:08:35,210
This is also subarray that satisfies the given property.

124
00:08:35,900 --> 00:08:38,720
So here we are saying the sum till this particular point is three.

125
00:08:38,720 --> 00:08:40,530
The sum till this particular point is three.

126
00:08:40,549 --> 00:08:43,130
So if you subtract three minus three, it is also zero.

127
00:08:43,700 --> 00:08:46,190
That means these three elements

128
00:08:47,860 --> 00:08:51,130
they will also satisfied the property three plus five plus seven

129
00:08:51,610 --> 00:08:54,420
So you can to this is nothing but 15, this is nothing but five.

130
00:08:54,430 --> 00:08:55,570
This is nothing but ten.

131
00:08:56,080 --> 00:08:59,590
So all of them are divisible by zero.

132
00:08:59,830 --> 00:09:02,320
All of them are divisible by zero.

133
00:09:02,760 --> 00:09:05,470
So effectively in the cumulative sum array.

134
00:09:07,320 --> 00:09:13,950
What should happen is, either one of the values would be at least zero or if it is not, if none of

135
00:09:13,950 --> 00:09:21,360
the numbers is zero then we are saying at least two numbers will have the same value and the area

136
00:09:21,360 --> 00:09:29,970
of the array in between these two indices will form your subarray who's sum would be.... who's sum mode N would

137
00:09:29,970 --> 00:09:31,750
be zero. OK. that's..

138
00:09:31,810 --> 00:09:32,880
That's the whole idea.

139
00:09:33,180 --> 00:09:39,880
So I hope you understood how we have applied by pigeonhole principle in this question.

140
00:09:39,910 --> 00:09:46,320
OK. so if it is still not clear, so we are saying pick any  two numbers which are same

141
00:09:46,320 --> 00:09:50,030
So we are saying. OK. we will pick the numbers till this particular point.

142
00:09:50,040 --> 00:09:51,870
Let's say this one

143
00:09:52,410 --> 00:09:53,640
and maybe this one.

144
00:09:54,120 --> 00:09:54,420
OK.

145
00:09:54,870 --> 00:09:59,310
If I subtract these two. OK. if I subtract these two.

146
00:10:00,090 --> 00:10:05,460
So that effectively means I'm taking all the elements of the array till this particular points

147
00:10:05,460 --> 00:10:10,860
summing them up. and i am subtracting all the element till this particular point, I'm subtracting

148
00:10:10,860 --> 00:10:11,580
them up.

149
00:10:11,850 --> 00:10:14,370
So what I'm left with? I'm left with this number five.

150
00:10:15,000 --> 00:10:16,770
This is nothing but five mod five.

151
00:10:16,890 --> 00:10:18,480
This is also zero.

152
00:10:19,470 --> 00:10:19,770
OK.

153
00:10:20,190 --> 00:10:24,480
This is also a subarray. in the question that we have just seen on codechef.

154
00:10:24,510 --> 00:10:30,330
What  you need to do is, you do not need to find the in exponential time

155
00:10:30,780 --> 00:10:37,410
we have already proved such subarray will always exist because of pigeonhole principle because there

156
00:10:37,410 --> 00:10:38,460
can be two cases.

157
00:10:39,120 --> 00:10:45,510
If one of the numbers, if one of the sums turns out to be zero that means starting from the 0th index

158
00:10:45,660 --> 00:10:48,240
till that particular index, you got the subarray.

159
00:10:48,600 --> 00:10:55,200
But if one of the number is not zero then you have five numbers here and you have only four buckets

160
00:10:55,200 --> 00:10:55,560
left.

161
00:10:55,890 --> 00:10:57,840
That number would always lie in the range

162
00:10:57,840 --> 00:10:58,470
one two four.

163
00:10:58,500 --> 00:10:58,800
OK.

164
00:10:59,120 --> 00:11:05,580
I think if you have N numbers here then you will have n minus one buckets here. So at least one number

165
00:11:05,580 --> 00:11:14,550
would repeat and the indices responding to those two repetitions would give you the sub array.

166
00:11:14,700 --> 00:11:15,030
OK.

167
00:11:15,420 --> 00:11:24,930
So that's how we have used the pigeonhole principle to prove this claim and solve this problem.

168
00:11:24,960 --> 00:11:30,960
Now this cumulative sum can be done in linear time and you can maintain a kind of a frequency array

169
00:11:32,400 --> 00:11:34,350
and you can check the place

170
00:11:34,350 --> 00:11:38,130
we are the frequency is at least two that will solve that problem.

171
00:11:38,280 --> 00:11:38,550
OK.

172
00:11:38,940 --> 00:11:40,530
So that's all for this video.

173
00:11:40,560 --> 00:11:41,070
Thank you.

