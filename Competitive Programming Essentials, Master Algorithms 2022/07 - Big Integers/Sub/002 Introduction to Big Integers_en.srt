1
00:00:00,460 --> 00:00:00,760
Hi

2
00:00:00,880 --> 00:00:07,390
So in this lecture, we're going to talk about big integers and how you can solve problems involving

3
00:00:07,390 --> 00:00:08,170
big integers.

4
00:00:08,770 --> 00:00:14,560
Firstly, we will see what is the meaning of big integer and then later on we will see what are the different

5
00:00:14,560 --> 00:00:21,460
solutions provided by programming languages like C++, Java and Python.

6
00:00:21,460 --> 00:00:21,730
OK?

7
00:00:21,970 --> 00:00:22,920
So, In all of them.

8
00:00:22,930 --> 00:00:26,680
There is a slightly different way of working with big integers.

9
00:00:27,040 --> 00:00:30,640
The Java provides a big integer class, in C++

10
00:00:30,640 --> 00:00:37,570
you have to use arrays to simulate operations on big integers and in Python they are handle like default

11
00:00:37,570 --> 00:00:37,990
integers.

12
00:00:38,170 --> 00:00:39,910
So we will dive deep into it.

13
00:00:40,360 --> 00:00:45,580
But first of all, let us try to understand what is the meaning of big integer.

14
00:00:45,580 --> 00:00:45,850
OK?

15
00:00:45,880 --> 00:00:52,600
What is a big integer. So right now that we have learned is in order to store integers we have in C++ or int C

16
00:00:52,780 --> 00:01:01,000
we have the data types like int or we have long long int. ok. these data types have

17
00:01:01,600 --> 00:01:08,980
So when you create a variable using this datatype, it creates a box inside the memory of fixed size.

18
00:01:09,550 --> 00:01:12,580
Let's say with int it is, let's say four bytes.

19
00:01:13,240 --> 00:01:15,190
Or you can say it is 32 bits.

20
00:01:15,610 --> 00:01:18,090
OK, let's say it is 64 bit box.

21
00:01:18,610 --> 00:01:25,390
That means the maximum number of bits that can be stored inside this long long is limited.

22
00:01:25,630 --> 00:01:31,270
And if you talk about unsigned long long, the largest number that you can form is of the order

23
00:01:31,690 --> 00:01:33,790
two raise to the power 64 minus one.

24
00:01:34,240 --> 00:01:39,250
And in this case, it is of the order two raise to the power 32 minus one. ok. so if you set all the bits

25
00:01:39,250 --> 00:01:43,900
as one and if it is a unsigned int then this is the largest number that you can form.

26
00:01:44,890 --> 00:01:46,420
Now, in terms of

27
00:01:47,720 --> 00:01:53,240
decimal, it is of the order 10 power nine and it is of the order 10 power 18. OK. approximately.

28
00:01:53,990 --> 00:02:01,490
That means if a number has more than 18 digits, it cannot be stored inside long long int.

29
00:02:01,700 --> 00:02:09,500
That means that number is a big integer. it cannot fit in the primitive or the predefined data types.

30
00:02:10,630 --> 00:02:16,860
Then how do we store such number. okay. so that means maximum an integer can have up to 18 digits.

31
00:02:17,320 --> 00:02:23,710
It cannot have a number which is greater than 18 digit and that can be stored inside these data type.

32
00:02:24,340 --> 00:02:27,730
for those problems in which you can get very large numbers.

33
00:02:28,690 --> 00:02:35,500
We have to do certain operations like additions, subtraction multiplication division. so your regular

34
00:02:35,500 --> 00:02:37,210
data types will not work.

35
00:02:37,900 --> 00:02:40,960
Then we call those numbers as big integers.

36
00:02:40,970 --> 00:02:43,090
And how do we store those numbers. OK?

37
00:02:43,490 --> 00:02:49,900
So ultimately, we don't have a box which is greater than 8 byte and the memory required

38
00:02:50,440 --> 00:02:55,840
The space required to store that particular number. let's say hundreds of digits, ok hundreds of

39
00:02:55,840 --> 00:02:56,350
digits.

40
00:02:58,160 --> 00:03:02,980
We can answer that number directly. ok. So one option to store that number is a array.

41
00:03:03,140 --> 00:03:07,340
OK, for example if you want to store a very large number, what you can do?

42
00:03:07,670 --> 00:03:13,910
You can say, OK. I'll create a array and I will store this numbered digit by digit. OK?

43
00:03:14,900 --> 00:03:19,880
So  maybe five, three, eight, seven, six, two and so on.

44
00:03:19,910 --> 00:03:26,390
OK. maybe you can create a very large array and each box of the array represents a digit of that particular

45
00:03:26,390 --> 00:03:26,810
number.

46
00:03:27,110 --> 00:03:27,410
OK.

47
00:03:27,620 --> 00:03:30,830
Another option could be string. strings also a character array.

48
00:03:31,130 --> 00:03:31,430
OK.

49
00:03:32,570 --> 00:03:38,900
You can also use a character array to or String datatype to store that particular number. maybe five

50
00:03:38,900 --> 00:03:44,540
three six two four eight nine seven one zero five two. whatever it is.

51
00:03:45,170 --> 00:03:51,830
So these are the two options that we can clearly use to store those particular numbers, which are very

52
00:03:51,830 --> 00:03:52,250
large.

53
00:03:52,820 --> 00:04:00,530
But now the question is how do we perform various operations. such as addition on this particular string

54
00:04:00,580 --> 00:04:02,270
or on this particular character array?

55
00:04:02,570 --> 00:04:06,200
That means we need to come up with an algorithm.

56
00:04:06,470 --> 00:04:06,770
OK.

57
00:04:07,350 --> 00:04:11,770
like we do it on a notebook, a similar kind of technique.

58
00:04:11,780 --> 00:04:17,930
We need to come up and implement that addition operation on this array or on a string.

59
00:04:18,430 --> 00:04:21,019
so this is going to be a our first problem.

60
00:04:21,170 --> 00:04:23,840
We are going to give two big integers.

61
00:04:24,170 --> 00:04:27,080
We are going to take input and we are going to add them.

62
00:04:27,590 --> 00:04:31,010
So let's see how we can solve this problem in the next lecture.

63
00:04:31,070 --> 00:04:31,370
OK.

64
00:04:33,200 --> 00:04:38,870
So that's all for this video and in this section will be solving more questions like big multiplication

65
00:04:39,230 --> 00:04:43,190
and the Java big integer class and working with bigger integer in python.

66
00:04:43,590 --> 00:04:44,840
So stay tuned.

