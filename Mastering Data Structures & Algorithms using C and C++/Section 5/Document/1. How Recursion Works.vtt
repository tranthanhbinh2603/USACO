WEBVTT

00:00.360 --> 00:06.210
Our next topic is discussion, this is a very important topic because a lot of functions or the procedures

00:06.210 --> 00:11.860
can be written using recursion, that is, they can be written as recursive functions.

00:12.540 --> 00:14.340
So let us learn about them.

00:14.370 --> 00:17.170
So what are the topics that I'm going to cover in this video?

00:18.360 --> 00:19.290
What is the recursion?

00:20.650 --> 00:27.820
Example I take can explain by tracing of that recursion how to trace it, how to know the output of

00:27.830 --> 00:31.870
recursion, then recursion uses track.

00:31.900 --> 00:32.880
So what does it mean?

00:32.890 --> 00:36.370
How do you do this track that I'm going to explain you then?

00:36.370 --> 00:41.300
Also, I'll show you how to find the time and complexity of any recursive function.

00:42.250 --> 00:46.980
So let us start with what is recursion now before showing you recursion?

00:47.170 --> 00:50.590
First of all, let me remind you one thing here.

00:50.590 --> 00:56.380
I have one example program that is the main function and one function called function funding.

00:57.640 --> 01:00.010
And this main function is calling this function.

01:01.050 --> 01:04.110
So how dysfunction call is made, how it works.

01:04.380 --> 01:09.630
Let me remind you this already you have explained you in my previous video, let us look at it again.

01:10.530 --> 01:15.960
See, once I start executing my program, it will start executing Fomin function faster to execute the

01:15.960 --> 01:20.310
first statement and second statement than the third statement is function call.

01:20.670 --> 01:26.490
It goes to this function and those inside execute first statement, second and third statement.

01:26.730 --> 01:34.560
Once it has finish, the function ends and the control come back to the same line.

01:35.100 --> 01:36.330
That is third line.

01:36.660 --> 01:40.970
If any more operations present in this line, they will execute.

01:41.370 --> 01:45.180
Otherwise it will execute fourth line and fifth tonight.

01:46.230 --> 01:48.600
What does it mean by any other operations?

01:48.600 --> 01:56.670
For example, this function is returning something and here I have written multiplied by two something.

01:57.030 --> 01:59.710
So the value of that function has to be multiplied by two.

01:59.730 --> 02:05.400
So this multiplication will be done once the function has a return here with some value.

02:05.790 --> 02:08.510
Assume that that function has a return of ten.

02:08.940 --> 02:13.500
So ten in two can be done only if this function has already done the research.

02:14.220 --> 02:17.610
So once again, quickly, program starts.

02:17.610 --> 02:19.170
First line, second line, third line.

02:19.170 --> 02:22.800
Control goes here first, second, third function and control returns.

02:23.070 --> 02:26.480
Anything pending that will be done and then the remaining statements.

02:27.690 --> 02:32.680
This is the important point that we should remember for understanding recursion.

02:33.570 --> 02:35.670
So let me explain the next level recursion.

02:36.270 --> 02:38.750
Let us look at a general form of recursion.

02:38.760 --> 02:42.350
So here I have an example, a recursive function.

02:42.480 --> 02:44.300
So what does it mean by recursive function?

02:44.880 --> 02:49.210
Our function is calling itself.

02:49.740 --> 02:55.290
So if a function is calling itself, then it is called recursive function.

02:55.800 --> 03:00.090
So function inside that if you see it is calling itself again.

03:00.110 --> 03:02.640
So this is a recursive function.

03:04.210 --> 03:10.840
Then one important thing inside recursions here, you can see that this is a base condition, conditions

03:10.840 --> 03:17.900
that so there must be some base condition that will terminate recursion.

03:18.700 --> 03:21.700
There must be some method to terminate this one.

03:21.700 --> 03:24.370
Otherwise it will go away and go in finite calling.

03:24.370 --> 03:27.640
It is just like this, what we call the function first time.

03:28.170 --> 03:29.950
Then it will call itself again.

03:29.950 --> 03:31.210
Call itself again.

03:31.220 --> 03:32.920
It calls itself repeatedly.

03:32.920 --> 03:34.510
It will be calling again and again.

03:34.810 --> 03:37.900
So there must be some condition at which it must stop.

03:38.620 --> 03:46.090
So in this example, this will call itself if the condition is true or it can stop if the conditions

03:46.180 --> 03:48.580
or whatever it is, at some point, it must stop.

03:48.970 --> 03:50.960
So here is the condition become false.

03:50.980 --> 03:53.060
It will not call further and it stops.

03:53.290 --> 03:59.380
So finally, let us look at again a function calling itself is called recursion.

03:59.380 --> 04:06.910
And inside recursive function, there must be some condition which will make the recursion stop terminate.

04:07.240 --> 04:10.450
So in my example, if the condition become false, it will stop.

04:11.330 --> 04:11.840
That's it.

04:12.260 --> 04:17.070
So let us take some example of recursive function and study how it works.

04:17.690 --> 04:19.040
Let us look at an example.

04:19.310 --> 04:20.660
Let me explain the example.

04:20.660 --> 04:27.260
I have a main function which is having some value and calling function function by passing that X and

04:27.260 --> 04:29.540
function function, taking parameter NP.

04:30.230 --> 04:35.140
And if the condition is true, it is printing and then calling itself.

04:35.450 --> 04:37.130
I have you also see language code here.

04:37.490 --> 04:44.080
So it's printing and again calling itself for a reduced value of and if whatever and it's supposed and

04:44.090 --> 04:46.340
there's a file then it will call itself for four.

04:47.330 --> 04:53.250
So if I am passing through from here, what will be the result, how it works.

04:53.900 --> 04:57.140
Let us trace this recursive function and check.

04:58.110 --> 05:05.400
Now, tracing how to trace recursive function, recursive functions are traced in the form of a tree,

05:05.970 --> 05:09.510
so Lichtman started tracing this one see inside the function.

05:09.540 --> 05:12.030
There are two steps that it has to perform.

05:12.030 --> 05:18.330
If this condition is to force the students to Prince again step, it has to call itself bypassing and

05:18.330 --> 05:19.040
minus one.

05:19.260 --> 05:22.350
And this it has to do on leave and there's a greater than zero.

05:24.110 --> 05:25.850
Let us start from here.

05:25.880 --> 05:29.620
I'm calling function fun one by passing exit that is mandatory.

05:30.380 --> 05:35.320
So here, fun one by passing three.

05:35.810 --> 05:37.530
So first time it has got three.

05:38.180 --> 05:39.800
Three is greater than zero.

05:39.830 --> 05:40.360
Yes.

05:40.820 --> 05:42.360
First step, Brent.

05:42.530 --> 05:46.100
And so first strippers print three.

05:47.750 --> 05:50.450
Then what is the second step goal itself.

05:50.450 --> 05:52.820
Again, fun one, four, three minus one.

05:52.820 --> 05:53.450
That is two.

05:53.780 --> 06:00.890
So it will call itself again by passing fun of to see inside the function.

06:00.890 --> 06:02.000
There are two steps.

06:02.000 --> 06:03.610
Both steps have completed.

06:03.630 --> 06:07.670
First step was sprinting and the second step is called sprinting.

06:07.670 --> 06:08.990
It's nothing but output.

06:08.990 --> 06:11.270
So what is the output they got so far?

06:11.480 --> 06:12.440
Output is three.

06:13.980 --> 06:15.630
Then what about this?

06:15.660 --> 06:16.980
It's a call again.

06:18.570 --> 06:25.410
Whether this call has finished nor it has completed Faslane second line, it has not yet came out of

06:25.410 --> 06:26.140
the function.

06:26.760 --> 06:28.530
It has not yet came out of the function.

06:28.530 --> 06:31.180
It has to come out, but it is calling this one.

06:31.710 --> 06:37.760
So let us execute this phone off to again, start to do is greater than zero.

06:37.770 --> 06:39.020
Yes, two steps.

06:39.390 --> 06:45.420
So the first step is trying to do so, the output to then go on it.

06:45.420 --> 06:48.060
So for and minus one so full of.

06:50.320 --> 06:50.800
One.

06:54.000 --> 06:58.990
Now, still, the school has not finished, it has printed and it has to call this one.

06:59.310 --> 07:05.680
So again, a new fresh call, again, a fresh call so that fresh colors fun one with one.

07:05.680 --> 07:08.030
So fun, what with one one is great.

07:08.070 --> 07:12.330
Then later, we also perform two things for sister friend one.

07:12.330 --> 07:14.030
So in output we get one.

07:14.520 --> 07:18.090
Then the second thing is called for one minus one.

07:18.090 --> 07:28.730
So fun, one of one minus one is zero one zero one one zero and that is zero greater than zero.

07:28.740 --> 07:30.420
No, it is not greater than zero.

07:30.750 --> 07:32.550
It will not enter inside.

07:32.550 --> 07:36.000
So it will not perform these two steps and it does nothing.

07:36.360 --> 07:41.530
So no printing and no calling and it will not enter inside and it will come out of the function.

07:42.870 --> 07:45.100
So this call doesn't do anything.

07:45.540 --> 07:49.500
So there is no further calling then what it has to do.

07:50.910 --> 07:55.450
It will go back to the previous function and come out of the function.

07:55.470 --> 08:02.170
So this function finishes it, go back to the previous function that is in this line and come out afterwards.

08:02.220 --> 08:03.240
There is nothing remaining.

08:03.240 --> 08:07.400
So it will simply come out and go back to this function and come out of this one.

08:07.680 --> 08:10.020
Then it will come back to mean and terminates.

08:10.560 --> 08:16.020
So from this call, it goes back to the previous caller and then previous call, just like the we just

08:16.020 --> 08:22.380
now have shown you how a function terminates and it goes back to the place from where it was called.

08:23.580 --> 08:31.490
So this is a tree and this is called Preysing Tree of Recursive Function, and this is the output.

08:31.890 --> 08:34.110
Now, I will take one more example and show you.

08:34.360 --> 08:39.120
So this example, I'll just move it aside and then I'll use this portion for you.

08:39.450 --> 08:40.390
Next example.

08:40.920 --> 08:44.050
No, I have one more example of a recursive function.

08:44.490 --> 08:46.410
This is more similar to the first one.

08:47.880 --> 08:53.730
Let me compare them and show you if you check the main function, having variable X and calling function

08:53.730 --> 09:00.750
function here also mean having variable X and calling function frontal insight fun.

09:00.750 --> 09:04.230
One, it is taking parameter and and greater than zero.

09:04.500 --> 09:06.130
Two things are done here.

09:06.130 --> 09:09.140
Also taking parameter and greater than zero things are done.

09:09.870 --> 09:15.080
But the differences here are sprinting and then calling itself.

09:15.570 --> 09:19.380
But here first it is calling itself then printing.

09:20.310 --> 09:21.880
Then what will be the output.

09:22.590 --> 09:24.100
So let us trace this one.

09:24.240 --> 09:26.750
So this is a minor difference between these two functions.

09:27.210 --> 09:28.060
Let us stress.

09:28.830 --> 09:34.110
So from here I start first main function is calling this function Fundo.

09:34.530 --> 09:41.370
So by passing value three, so frustrating function will be this is three three and this three.

09:41.370 --> 09:43.100
So three is greater than zero.

09:43.110 --> 09:43.630
Yes.

09:43.650 --> 09:50.200
So first statement as work, call it some form minus one second statement is print.

09:50.550 --> 09:51.750
So first the statement.

09:51.750 --> 09:58.740
It will call itself for Fundo of two and three or three minus one, two.

09:59.070 --> 10:04.000
Then what about the next statement printing it will not be done first.

10:04.290 --> 10:08.080
This call has to finish, then only it will print.

10:08.850 --> 10:10.160
So let us take this call.

10:10.170 --> 10:11.210
Let us finish this one.

10:11.670 --> 10:17.020
So it will call itself again that any call to two two is greater than zero.

10:17.400 --> 10:18.740
Again, two steps.

10:18.750 --> 10:21.030
So first step is Colvert and minus one.

10:21.070 --> 10:21.930
So and this is two.

10:22.200 --> 10:24.870
So it will call itself for fun.

10:24.870 --> 10:28.590
Two of one and second statement.

10:28.890 --> 10:32.280
It will be done after this first statement has finished.

10:33.540 --> 10:34.650
What is the first statement?

10:35.010 --> 10:37.440
Fungo one one is greater than zero.

10:37.470 --> 10:39.360
So call it for a minus one.

10:39.570 --> 10:48.620
So again, next call, fun two of one minus one is zero and pretending that they were done afterwards

10:48.720 --> 10:49.140
first.

10:49.160 --> 10:50.160
This has to finish.

10:51.150 --> 10:56.140
Not one of zero, that is one two zero zero zero zero zero.

10:56.310 --> 11:02.900
No, sir, it will not enter inside this F block and it will come out so it does nothing.

11:04.260 --> 11:12.510
So this call, the department zero has terminated now once this call has been terminated, the control

11:12.520 --> 11:15.150
should go back to the previous call.

11:15.450 --> 11:17.610
So previous call was this one.

11:17.610 --> 11:18.860
It was called from here.

11:18.870 --> 11:22.710
So it will go back to this function call and this line in this line.

11:22.950 --> 11:24.200
This line was this one.

11:24.450 --> 11:26.120
So this has finished.

11:26.430 --> 11:28.110
Now the next line is Sprent.

11:28.110 --> 11:31.770
And so what is and value one single point one.

11:32.040 --> 11:35.790
So the output as first output is one.

11:37.970 --> 11:43.850
Then it will go back to the previous call and second thing that is remaining here, that is printing,

11:44.090 --> 11:45.560
printing, it has to do so.

11:45.560 --> 11:49.890
The value to print that, then this will come out of this and finish.

11:49.940 --> 11:53.300
So this call finishes it goes back to the previous call.

11:53.570 --> 11:56.300
In that call, it has completed this one of two.

11:56.300 --> 12:00.350
You can see that this complete full of two is in deep, it is complete.

12:00.620 --> 12:02.320
And then the second statement print.

12:02.330 --> 12:04.520
And so the value of this three.

12:04.880 --> 12:06.900
So this is three.

12:07.850 --> 12:09.650
So this is the output of this function.

12:09.650 --> 12:13.240
So you can see that the function values are one, two, three.

12:13.460 --> 12:16.370
And here the output was three to one.

12:17.540 --> 12:23.360
Now let us compare them and this function first the printing was done and the recursive call was made

12:23.630 --> 12:27.420
print and then call print and then call print and then call.

12:27.770 --> 12:29.850
But here first call is made.

12:29.850 --> 12:30.870
Then printing is done.

12:30.890 --> 12:31.970
So first call.

12:32.270 --> 12:32.990
Then call.

12:33.210 --> 12:33.950
Then call.

12:34.180 --> 12:34.790
Then call.

12:35.060 --> 12:37.250
So again now Redenbach print.

12:37.340 --> 12:38.300
Written print.

12:38.300 --> 12:39.110
Written print.

12:39.710 --> 12:45.350
So here printing was done at counting time before the function is called printing was done.

12:45.620 --> 12:48.860
But here printing is a done at a time.

12:50.310 --> 12:54.990
When the function is returning to the previous caller, the previous call, so at the reading time,

12:54.990 --> 12:55.780
printing is done.

12:56.010 --> 12:59.600
And the difference here is printing is done after the function call.

12:59.880 --> 13:02.470
So that portion will be done that are done in time.

13:02.910 --> 13:05.250
So I have shown you the differences between them.

13:05.760 --> 13:08.930
Now, let me take one example and show you the differences among them.

13:09.510 --> 13:12.000
See, suppose there is a room.

13:13.760 --> 13:15.620
And there is a boat in the room.

13:16.700 --> 13:22.410
Under the law and from that room, you can enter into one more room.

13:22.430 --> 13:25.550
This is the door for it and there is a fixed in this one.

13:26.880 --> 13:30.210
And one more door, there is a bulb fixed and this one.

13:31.730 --> 13:38.900
This is a room one and room two and room three, three rooms, and each room is having a ball.

13:40.430 --> 13:54.190
Now, if I give you the instruction saying that switch on bulb, second step is go to the next room.

13:56.390 --> 14:02.070
So these are the two steps if I asked you to perform recursively, so there are rooms like this, right?

14:02.450 --> 14:04.520
So nested room, room, inside room.

14:05.480 --> 14:13.490
Now, if I make you stand here and ask you to perform this recursively, then what you will do better.

14:13.550 --> 14:15.590
Check your decision.

14:15.590 --> 14:16.580
One first step.

14:17.150 --> 14:18.100
Second step.

14:18.110 --> 14:19.190
You'll go to the next room.

14:19.580 --> 14:26.600
So the first ball that you have switched on, this one, let us call it output, then you will enter

14:26.600 --> 14:30.200
in the next room, then hear what you'll do again recursively.

14:30.200 --> 14:31.730
So switch on bulb.

14:31.730 --> 14:35.150
So you'll switch on second bulb and then go to the next room.

14:35.150 --> 14:36.530
You'll end to this next room.

14:38.000 --> 14:40.850
Then in this room again, first step is switch on bulb.

14:40.850 --> 14:43.700
So you'll switch on third Terbil and go to the next room.

14:43.940 --> 14:45.320
There is no next room for.

14:46.460 --> 14:51.810
So it was more like a recursive call, a function calling itself again and function calling itself again.

14:52.160 --> 14:53.450
Now this is termination.

14:53.450 --> 14:54.940
There is no next room.

14:55.520 --> 15:01.140
What you will do now, you will definitely come out of those rooms you vodcast finished.

15:01.490 --> 15:04.700
So from third room you will come back to the second room.

15:05.090 --> 15:06.400
What will you do anything now?

15:06.400 --> 15:11.230
No, you will simply come out, you'll come out in the first room, then you will come out of the first

15:11.230 --> 15:11.750
four months.

15:12.740 --> 15:14.390
So third, the second, second, first.

15:14.400 --> 15:16.820
Then you'll come out and you simply come out.

15:16.970 --> 15:17.800
Nothing will do.

15:18.230 --> 15:21.590
So it means first stage was you were entering in.

15:22.010 --> 15:23.450
So it was just like calling.

15:24.080 --> 15:28.620
And after you have finished this one, you cannot go further, so you'll return back.

15:28.910 --> 15:30.010
So this is returning.

15:30.500 --> 15:33.080
So you have gone through two phases.

15:33.530 --> 15:41.420
One is the calling phase, either one is returning phase, or I can say that this was ascending and

15:41.420 --> 15:42.590
then descending.

15:42.950 --> 15:45.710
So you are going to next, next, next, next ascending.

15:45.950 --> 15:48.050
Then you came back and back and back.

15:48.320 --> 15:49.250
So descending.

15:49.430 --> 15:52.760
So you have done ascending and descending and descending time.

15:52.760 --> 15:53.830
You have not done anything.

15:54.860 --> 15:56.660
Now, I'll give you one more example.

15:57.020 --> 15:58.000
One more example.

15:58.370 --> 16:10.720
First step is go to the next room, go to the next room and second step is switch on bulb.

16:12.350 --> 16:15.310
These are the two steps I have changed the order you can see.

16:15.920 --> 16:18.880
Go to the next room, then switch on bulb.

16:19.520 --> 16:21.840
Now, let's see if these are performed.

16:21.840 --> 16:23.930
Then what will that result?

16:24.200 --> 16:28.490
If you are here, then I have given you two instruction.

16:28.490 --> 16:31.880
Go to next fall, then second step, a switch on bulb.

16:32.390 --> 16:33.500
So first what you'll do.

16:33.710 --> 16:36.410
You'll not switch on bulb, you'll go to the next room.

16:37.520 --> 16:40.070
Then there again, the first step is go to the next room.

16:40.550 --> 16:41.690
Silvo the next room.

16:43.380 --> 16:49.260
There again, the first step is go to the next room so there is no next room, there are no rooms further

16:49.860 --> 16:51.510
than you'll perform.

16:51.510 --> 16:53.490
Second step, second.

16:53.820 --> 17:01.920
So the first bulb to be switched on as tugboat then definitely will come back to the previous room.

17:02.280 --> 17:07.230
And in this room, you'll switch on second one and you'll come back to the first room switch on first.

17:07.350 --> 17:09.780
But that's it.

17:10.020 --> 17:18.750
So I have two different versions of steps here and first set of steps, second bulb go the next room.

17:18.750 --> 17:21.020
So the ball's first featured in this order.

17:21.030 --> 17:21.770
One, two, three.

17:21.990 --> 17:23.400
So there is the recursive call.

17:23.670 --> 17:29.520
This is very passive on first perform the operation, then the recursive call here first the recursive

17:29.520 --> 17:31.240
call, then perform the operation.

17:31.740 --> 17:38.190
So the main important thing that I have to show you here in the caution is that recursion has two phases.

17:38.490 --> 17:42.240
One is calling phase and the other one is written in phase.

17:42.510 --> 17:44.550
So both were switched on by going.

17:45.000 --> 17:46.960
Both were switched on while returning.

17:47.820 --> 17:53.590
So if you see this recursion print and then call switch on, then go to the next room.

17:53.910 --> 17:55.320
So this is the same as that one.

17:56.490 --> 18:00.750
And if you see this one, go to the next room, then switch on.

18:01.380 --> 18:04.830
So here in this example, first go to the next room.

18:04.830 --> 18:07.290
That is make a call and then print.

18:07.890 --> 18:09.480
So this is similar to this one.

18:10.140 --> 18:16.530
So finally, I can say that recursive functions are just like a rubber band if you stretch a rubber

18:16.530 --> 18:17.290
band bullet.

18:17.430 --> 18:19.240
So next, next, next, next.

18:19.680 --> 18:21.450
If you release, it will come back.

18:22.620 --> 18:28.710
It will come back, so save me recursive function, call and call and call and then return Rigi.

18:29.520 --> 18:33.010
So there are two phases, so that's all these are compared.

18:33.050 --> 18:36.060
But one thing that may confuse you, just let us look at this one.

18:36.070 --> 18:40.160
See, the first value was three to three to one for the printing was three to one.

18:40.170 --> 18:41.940
But here the room numbers are one, two, three.

18:41.940 --> 18:43.250
Don't compare this with that one.

18:43.680 --> 18:46.230
Just understand the procedure, how it is working.

18:46.470 --> 18:52.230
Otherwise they can change the room number three to one also so that output will be similar to that.

18:53.160 --> 18:56.700
So the important thing that we have learned is that recursion and have two phases.

18:56.700 --> 19:00.150
One is calling phase and one is returning phase nine.

19:00.170 --> 19:00.420
Right.

19:00.420 --> 19:03.480
Additional general form of recursive function once again and.
