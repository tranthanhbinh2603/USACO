1
00:00:00,760 --> 00:00:07,540
Let's solve the next problem, which again, about finding some key element in an array of the it.

2
00:00:08,710 --> 00:00:11,040
There is a lot of similarity between the two ideas.

3
00:00:11,050 --> 00:00:15,880
If I asked you to search for the key element, then f of Keith represent what?

4
00:00:16,900 --> 00:00:17,800
Almost nothing.

5
00:00:18,490 --> 00:00:20,770
This kind of equality is in a key.

6
00:00:21,760 --> 00:00:24,130
It's very hard to build a binary, searchable function.

7
00:00:24,460 --> 00:00:31,240
It the key from the previous function was and instead of thinking about equality converted to.

8
00:00:32,180 --> 00:00:33,080
Inequality.

9
00:00:33,680 --> 00:00:37,040
So inequalities, converters, a piece of.

10
00:00:38,470 --> 00:00:40,540
There is once to a space of.

11
00:00:43,040 --> 00:00:50,990
It this way in some some context, it can convert to the space to be binary searchable, so this intricate

12
00:00:51,110 --> 00:00:53,900
is going to be done again.

13
00:00:54,260 --> 00:00:57,620
So let me introduce for you the function that we can use.

14
00:00:58,250 --> 00:01:00,050
We will let function count.

15
00:01:01,240 --> 00:01:05,470
Less than equal here, the take the table and value to return for us.

16
00:01:05,680 --> 00:01:09,130
How many numbers are less than the given value?

17
00:01:10,120 --> 00:01:10,540
OK.

18
00:01:10,930 --> 00:01:18,760
So, uh, we give it a table, let's uh, let's build a here, a small table for three times the three.

19
00:01:20,020 --> 00:01:28,300
So one time is one one two three two four six three six nine.

20
00:01:28,870 --> 00:01:39,160
So this table here, if I asked you how many values are less than three, this three and these two,

21
00:01:39,160 --> 00:01:40,600
there are five values.

22
00:01:41,050 --> 00:01:43,870
If I told you how many values are less than six?

23
00:01:44,320 --> 00:01:45,370
There are here.

24
00:01:47,150 --> 00:01:53,930
So aid values are laser sorry, less than six, sorry if I told you seven, how many values are less

25
00:01:53,930 --> 00:01:54,380
than seven?

26
00:01:54,560 --> 00:01:56,840
There are eight values less than seven.

27
00:01:57,080 --> 00:01:58,550
So the function now, I hope, is clear.

28
00:01:59,180 --> 00:02:03,050
The function is given meaning and value returned for us.

29
00:02:03,050 --> 00:02:05,450
How many numbers are less than the value?

30
00:02:05,840 --> 00:02:07,180
Please stop the vigil.

31
00:02:07,370 --> 00:02:08,750
Take 10 minutes to think.

32
00:02:08,750 --> 00:02:13,280
How can you make use of this function to build your brain research a solution?

33
00:02:14,690 --> 00:02:17,170
The key here is this function is monotonic.

34
00:02:17,180 --> 00:02:17,720
Why?

35
00:02:18,200 --> 00:02:20,330
Because the value in the value is bigger.

36
00:02:20,690 --> 00:02:24,590
The numbers that are covered are more and more in the previous table here.

37
00:02:24,590 --> 00:02:28,580
One two three two four six three six nine.

38
00:02:29,240 --> 00:02:33,110
If I asked you for how many values are less than 10, then that is bigger.

39
00:02:33,530 --> 00:02:37,370
If I asked you for how many valid reason for then the values are smaller.

40
00:02:37,580 --> 00:02:40,400
So as you see, this is a tiny, confusing function.

41
00:02:41,000 --> 00:02:42,830
So for the money first, you are good.

42
00:02:43,220 --> 00:02:46,190
Now the question now how can we utilize this function?

43
00:02:46,610 --> 00:02:48,500
I am searching for the key element.

44
00:02:49,340 --> 00:02:59,570
So if I give the function some value, OK, this time were into binary search when a value and the previous

45
00:02:59,570 --> 00:03:01,460
one will be in the searching would index.

46
00:03:01,470 --> 00:03:03,620
This one would be their search and the value, and it would work.

47
00:03:04,190 --> 00:03:06,020
So I would begin their search with the value.

48
00:03:07,070 --> 00:03:09,950
And tell it, hey, how many numbers are less than this value?

49
00:03:10,250 --> 00:03:15,380
So let's say I give it value like seven, and I told it how many values are less than this value?

50
00:03:15,740 --> 00:03:18,500
It will say one, two, three to four.

51
00:03:18,680 --> 00:03:20,660
There are aid values less than seven.

52
00:03:21,820 --> 00:03:29,560
There are aid values that are less than seven, so this means that the value seven is that they're made

53
00:03:29,570 --> 00:03:30,070
for value.

54
00:03:30,760 --> 00:03:31,150
Right.

55
00:03:31,810 --> 00:03:34,840
If I say, hey, how many values are less than five?

56
00:03:35,290 --> 00:03:38,080
It would be one to two to four.

57
00:03:38,110 --> 00:03:44,610
There are five values, which is one two two three three four.

58
00:03:44,650 --> 00:03:45,230
How many ones?

59
00:03:45,250 --> 00:03:47,020
One two three four five six.

60
00:03:47,260 --> 00:03:51,010
So this mean five is the seventh value.

61
00:03:51,640 --> 00:03:52,780
You see the function now.

62
00:03:53,350 --> 00:03:59,830
We can use this function to give give the function a value and the function return for us.

63
00:04:00,760 --> 00:04:05,530
The actual index of it, you can think of this function as we give it.

64
00:04:05,530 --> 00:04:12,370
Value it, give it us back an index of the of the of the of the of the of the value.

65
00:04:12,610 --> 00:04:15,430
And this is a very common binary search track.

66
00:04:15,970 --> 00:04:21,580
The index value track you binary search on the value.

67
00:04:22,580 --> 00:04:24,290
The function give you an index.

68
00:04:24,380 --> 00:04:27,020
We use this index to decide if this is good or not enough.

69
00:04:27,450 --> 00:04:33,260
So, OK, so you know, the normal array you see, if I it give you 17, for example.

70
00:04:33,500 --> 00:04:38,080
No, I say like, let's say let's call it inverse inverse of 17.

71
00:04:38,090 --> 00:04:38,900
It's C I.

72
00:04:39,440 --> 00:04:41,750
I can use this value to get my brain research.

73
00:04:42,050 --> 00:04:47,810
So again, this binary search, when the value to give me back an index is a very common binary social

74
00:04:47,810 --> 00:04:50,390
side, you can see this in many other problems.

75
00:04:51,500 --> 00:04:53,960
Let me summarize that again, as this problem is heart.

76
00:04:54,440 --> 00:04:57,440
We try to search on the kith value itself.

77
00:04:57,800 --> 00:04:58,730
It didn't work.

78
00:04:59,790 --> 00:05:07,020
Now, instead of searching for the cave, we searched for the value itself, so instead of telling the

79
00:05:07,020 --> 00:05:09,600
function, Hey, fine for me is the seventh value.

80
00:05:10,230 --> 00:05:11,160
We told it here.

81
00:05:11,190 --> 00:05:12,540
What do you think about value?

82
00:05:12,540 --> 00:05:13,560
152?

83
00:05:13,860 --> 00:05:14,590
Say you know what?

84
00:05:14,790 --> 00:05:18,630
This is the 13 elements in the array.

85
00:05:19,170 --> 00:05:20,280
I told him, Hey, you know what?

86
00:05:20,290 --> 00:05:22,140
I'm searching only for the 10th element.

87
00:05:22,320 --> 00:05:23,340
What about hundred?

88
00:05:23,610 --> 00:05:24,600
You tell me, you know what?

89
00:05:24,810 --> 00:05:26,530
This is a seventh in that.

90
00:05:27,180 --> 00:05:28,040
I told them, You know what?

91
00:05:28,050 --> 00:05:29,550
What about 120?

92
00:05:29,760 --> 00:05:30,600
You say, You know what?

93
00:05:30,810 --> 00:05:32,850
This is the ninth in the right order.

94
00:05:33,000 --> 00:05:34,610
What about one hundred twenty five?

95
00:05:34,620 --> 00:05:34,890
He said.

96
00:05:34,890 --> 00:05:35,340
You know what?

97
00:05:35,520 --> 00:05:36,750
This is the tenth in the right.

98
00:05:37,320 --> 00:05:42,480
So instead of giving an index, which is the case here to get a value, well, binary, search it on

99
00:05:42,480 --> 00:05:47,370
the opposite of that buying decision on the value to get back and index.

100
00:05:47,610 --> 00:05:49,860
I hope you got the the idea.

101
00:05:50,100 --> 00:05:54,860
If we managed to implement to this function the binary assertion that was just following the smallest,

102
00:05:54,860 --> 00:05:55,770
the value is one.

103
00:05:56,040 --> 00:05:59,550
The largest to value is m times n OK.

104
00:06:01,470 --> 00:06:04,670
Now we begin the research in a normal way can be the index and in no way.

105
00:06:04,920 --> 00:06:11,250
And then we say how many elements are less than or equal this value, it will return infamy.

106
00:06:11,250 --> 00:06:12,210
Its index.

107
00:06:12,580 --> 00:06:18,600
I'm committing is with the target index and then I am doing my decisions here.

108
00:06:19,140 --> 00:06:19,560
OK.

109
00:06:20,030 --> 00:06:21,920
What about the the function?

110
00:06:21,930 --> 00:06:23,030
How can we implement it?

111
00:06:23,040 --> 00:06:26,670
I would be happy if you take 10 minutes to think, how can we implemented?

112
00:06:26,970 --> 00:06:30,930
The function should be all I think of him.

113
00:06:32,170 --> 00:06:34,780
Uh, yeah, oh, in all, no fruits.

114
00:06:35,590 --> 00:06:37,030
So here is the idea.

115
00:06:37,390 --> 00:06:38,470
The idea is very simple.

116
00:06:38,770 --> 00:06:40,990
And this is one good thing to remember.

117
00:06:41,170 --> 00:06:44,590
You don't have to make this function very efficient, just good enough for what you do.

118
00:06:44,950 --> 00:06:46,270
It could be a brute force.

119
00:06:46,270 --> 00:06:47,590
It could be improved brute force.

120
00:06:47,590 --> 00:06:47,950
It could be.

121
00:06:48,340 --> 00:06:49,450
Many things are possible.

122
00:06:50,260 --> 00:06:53,290
So the key here is following, let's say.

123
00:06:54,910 --> 00:07:01,360
We have five rules and seven columns, so this means we have values one, those two, five, two, five

124
00:07:01,840 --> 00:07:02,380
and so on.

125
00:07:04,320 --> 00:07:04,800
Yes, sir.

126
00:07:05,040 --> 00:07:08,190
We have seven columns, and we are currently at number five.

127
00:07:08,460 --> 00:07:12,450
So I rule number five one five two five three five four five and so on, up to seven five.

128
00:07:13,770 --> 00:07:15,630
What does a value 30 means?

129
00:07:16,170 --> 00:07:22,320
The value 30 means we are at the fifth position here, so 30 over five is just six, which means we

130
00:07:22,320 --> 00:07:24,900
have six values one two three four five six.

131
00:07:25,620 --> 00:07:26,870
What about three?

132
00:07:27,940 --> 00:07:34,630
Thirty three over five is also six, six and some fraction, which means there are six values an equal,

133
00:07:34,630 --> 00:07:36,670
so this should be, uh, 33 three.

134
00:07:38,690 --> 00:07:41,810
What about 35, 35 over five is seven.

135
00:07:42,290 --> 00:07:48,560
Seven values are less than, uh, in this room are less than three or five here.

136
00:07:49,340 --> 00:07:50,150
What about?

137
00:07:51,560 --> 00:07:52,550
This should be.

138
00:07:52,970 --> 00:07:54,030
I did a lot of myself.

139
00:07:54,050 --> 00:07:55,070
This should be 35.

140
00:07:55,130 --> 00:07:56,480
It should be 40.

141
00:07:56,900 --> 00:07:58,700
What about 40 40?

142
00:07:58,700 --> 00:07:59,870
Over five is eight.

143
00:08:00,810 --> 00:08:01,860
But wait a second.

144
00:08:02,250 --> 00:08:07,710
The maximum number of rows here and zero, only seven so that we still have seven values.

145
00:08:09,180 --> 00:08:11,690
I hope you got this, this this simple math.

146
00:08:12,150 --> 00:08:18,480
So the moral of that is you will iterate on rule by law and in every rule will not just be there.

147
00:08:18,480 --> 00:08:22,440
So we will not just iterate to get the numbers, we cannot accept an old one.

148
00:08:22,830 --> 00:08:28,620
So if you are searching too for value here and you divide by Earth, it tells you how many numbers are

149
00:08:28,620 --> 00:08:30,780
exactly less than or equal this value.

150
00:08:31,530 --> 00:08:35,790
But you cannot exceed the number of columns, so we are minimizing with the number of columns.

151
00:08:36,030 --> 00:08:37,590
I hope no, the function is clear for you.

152
00:08:37,590 --> 00:08:40,620
I will fix it that the text here of this function.

153
00:08:41,100 --> 00:08:44,250
So again, what made this problem hard?

154
00:08:44,490 --> 00:08:52,560
We cannot directly search the request in the previous homework, like the homework that involved the

155
00:08:52,560 --> 00:08:58,320
boutique, the threshold, the problem and all of that we would buy that assertion bloodedly the problem.

156
00:08:58,740 --> 00:09:02,070
But in these two problems here and there are the challenges, we couldn't do that.

157
00:09:02,490 --> 00:09:10,500
And the ATA now is how can we find a relevant function that can help us to find the answer, a function

158
00:09:10,500 --> 00:09:12,720
that is monotonic and can help us here.

159
00:09:13,110 --> 00:09:17,220
And this is definitely the heart of the board and it take a lot of time to develop this skill.

160
00:09:17,520 --> 00:09:24,390
And I what I want you to remember from this one also is that index of value trek when a function when

161
00:09:24,390 --> 00:09:28,380
the request is asking you to search for an index like the create value.

162
00:09:28,950 --> 00:09:35,430
Think also about binary searching when the value and getting an index from it and using that to find

163
00:09:35,430 --> 00:09:36,900
your target index.

164
00:09:37,290 --> 00:09:37,800
That's all.
