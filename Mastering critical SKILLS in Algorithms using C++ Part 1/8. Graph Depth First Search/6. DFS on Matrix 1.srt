1
00:00:01,180 --> 00:00:06,820
So far, we learned the idea of the defense itself, which you work on any graph I would like to show

2
00:00:06,820 --> 00:00:13,150
you today an example when the graph isn't like a standard graph, you will observe that all of the concepts

3
00:00:13,210 --> 00:00:16,990
that we learned are exactly applied on a specific other domain.

4
00:00:17,500 --> 00:00:23,440
So the goal of this lesson is to learn how to generalize what you learned, so don't get stuck in it.

5
00:00:24,440 --> 00:00:26,240
Um, yeah, so let's refresh.

6
00:00:26,270 --> 00:00:30,680
Also, this information there is what we call an explicit graph and an implicit graph.

7
00:00:30,980 --> 00:00:37,640
The explicit graph is when you have exactly in the nodes and edges and all of that in an implicit graph.

8
00:00:37,640 --> 00:00:45,680
The graph isn't really that that clear like you have to generate it, sometimes with a graph can be

9
00:00:45,680 --> 00:00:48,510
generated in a very systematic way, like an image.

10
00:00:48,530 --> 00:00:53,660
Imagine we have an image and we have full Niebuhr's here so we can trivially generate the neighbors

11
00:00:53,660 --> 00:00:56,120
and build the graph, as we did in the home before.

12
00:00:58,850 --> 00:01:04,250
The interesting thing here that creating the graph consumes time and money, but there is no use of

13
00:01:04,260 --> 00:01:04,970
reason here.

14
00:01:05,390 --> 00:01:10,250
Like, you don't see what is advantage of creating the graph really in this way, we already created

15
00:01:10,250 --> 00:01:12,650
the graph in this way during the homework.

16
00:01:12,890 --> 00:01:14,450
But in practice, what's the point?

17
00:01:14,480 --> 00:01:20,000
Like, what's the window penetrating, giving number for every position in the array and creating edges

18
00:01:20,000 --> 00:01:21,350
between them in an explicit way?

19
00:01:21,350 --> 00:01:22,400
There is no point in that.

20
00:01:22,940 --> 00:01:27,770
So it's make more sense to deal with the 2D array as a graph by itself.

21
00:01:27,890 --> 00:01:30,080
Generate what you need from it by yourself.

22
00:01:30,470 --> 00:01:32,060
So this is a one thing here.

23
00:01:32,870 --> 00:01:37,340
The second thing is the graph also is clear, but has millions or billions of nodes.

24
00:01:37,640 --> 00:01:39,170
We still know how to generate it.

25
00:01:39,410 --> 00:01:42,860
But even this is really impractical to generate.

26
00:01:43,160 --> 00:01:45,950
So this is another case where you work on an implicit graph.

27
00:01:45,950 --> 00:01:50,150
There are nodes, there are no edges, but we don't build them as a standard graph.

28
00:01:50,750 --> 00:01:56,000
This happened a lot, including Graeme's, because the search procedure would have a lot of states and

29
00:01:56,540 --> 00:02:00,320
usually due to memory limits, we cannot generate explicitly the graph.

30
00:02:02,420 --> 00:02:04,760
We have to traverse it in an implicit way anyway.

31
00:02:04,940 --> 00:02:15,880
We will revisit this type of problems when we like go to the back tracking topic in later in the potato

32
00:02:15,920 --> 00:02:16,550
of this course.

33
00:02:18,730 --> 00:02:19,140
OK.

34
00:02:19,450 --> 00:02:24,280
Let's move more to our problems, but before doing that, I would like to tell you about a nice name

35
00:02:24,280 --> 00:02:26,470
in computer science, which is called the float fell.

36
00:02:27,220 --> 00:02:32,980
If you try to open an application like a Photoshop like application, sometimes if it is a nice feature,

37
00:02:33,490 --> 00:02:35,550
you click on the image somewhere.

38
00:02:35,560 --> 00:02:37,060
So let's say there is a cow here.

39
00:02:37,340 --> 00:02:39,460
Here is a cow connected body.

40
00:02:39,670 --> 00:02:43,750
You select the color like Blue Collect, click only a single pixel in the cow.

41
00:02:44,110 --> 00:02:49,300
Then the word cow would be converted to the blue color.

42
00:02:49,660 --> 00:02:50,530
So we call it float.

43
00:02:50,530 --> 00:02:56,050
Well, the word the float fell as a as the English name means you float from this starting position

44
00:02:56,350 --> 00:02:58,210
to all of the similar regions here.

45
00:02:58,420 --> 00:03:00,220
So here are a bunch of examples of float.

46
00:03:00,220 --> 00:03:03,340
Well, so here in this image, we have three separate components.

47
00:03:03,670 --> 00:03:07,960
If we started here, we started to float everywhere where it has the same color.

48
00:03:08,440 --> 00:03:14,200
Here in this space image, if you started from here, you started to float everywhere, but you would

49
00:03:14,200 --> 00:03:20,170
not get inside the eye because this boundary is a splitting external component from internal components.

50
00:03:20,500 --> 00:03:26,560
And here is another image I would like you to think in all of this images as graphs.

51
00:03:26,620 --> 00:03:29,740
This is something very important like this is a graph of this graph.

52
00:03:29,770 --> 00:03:30,340
This is a graph.

53
00:03:30,340 --> 00:03:35,410
There are edges, anything that any bits of that can reach another other.

54
00:03:35,410 --> 00:03:41,050
So any pixel here in here or here and here or even inside here and here or here and here, this are

55
00:03:41,050 --> 00:03:41,560
all.

56
00:03:42,370 --> 00:03:45,260
It just that has the reachability but edges here.

57
00:03:45,280 --> 00:03:47,590
Note that here here are intelligible to give it.

58
00:03:48,040 --> 00:03:51,710
So try to get this sense of the generalizing graphs.

59
00:03:51,730 --> 00:03:57,430
OK, so this is generally speaking the idea of the offload felt.

60
00:03:59,020 --> 00:04:00,220
Now, let's proceed more.

61
00:04:01,980 --> 00:04:04,860
Let's see how to make a deposit for research on a matrix.

62
00:04:05,190 --> 00:04:10,580
Images are presented usually as a 2D sorry to the matrix.

63
00:04:10,590 --> 00:04:14,820
Images are presented as a rectangle or a 2D matrix specifically.

64
00:04:15,210 --> 00:04:19,440
And when we think about it, as we did before it yourself is a nut.

65
00:04:20,580 --> 00:04:24,540
The neighbor of it builds the edges, but we are the neighbors.

66
00:04:25,470 --> 00:04:26,670
There are different ways.

67
00:04:26,700 --> 00:04:31,370
The most common way is the four neighbors or the vertical and horizontal neighbors, or the upper and

68
00:04:31,380 --> 00:04:32,550
right and left down levers.

69
00:04:32,760 --> 00:04:36,540
So when you see here this node, it has a maximum of four neighbors.

70
00:04:37,020 --> 00:04:39,840
The node at the boundary here will have only two neighbors.

71
00:04:40,140 --> 00:04:43,650
So this is the four neighbors this time and the neighbors, the style.

72
00:04:43,650 --> 00:04:46,560
You actually look to the eight ones that are around you.

73
00:04:46,950 --> 00:04:53,460
So this involved with the previous four ones and also a right of left and right, then left, sometimes

74
00:04:53,460 --> 00:04:55,350
in computer vision.

75
00:04:55,380 --> 00:05:02,040
You even can expand the more so you can have all of this region together and so on.

76
00:05:02,040 --> 00:05:07,650
Even a problem might tell you that I just need this tool and this tool and this tool and this tool.

77
00:05:08,280 --> 00:05:15,360
So for in a in a bigger range, sometimes it is just you would like to get this one, this one, this

78
00:05:15,360 --> 00:05:16,230
one, this one.

79
00:05:16,650 --> 00:05:20,940
So from a domain to another, that is what decides what is age.

80
00:05:21,660 --> 00:05:29,550
So for now, let's consider the this kind of of food and eat style already to any food.

81
00:05:30,460 --> 00:05:34,300
Now, let's let's think about building the graph.

82
00:05:35,080 --> 00:05:40,480
We can build the graph in either an explicit way, like we did in the homework or an implicit way.

83
00:05:40,900 --> 00:05:46,570
So in an explicit as we did the metrics we can indicate from zero to Earth and C minus one.

84
00:05:46,990 --> 00:05:49,840
And then we have this formula now.

85
00:05:49,840 --> 00:05:54,820
Every node has an ID, generate the edges that generate that their neighbors.

86
00:05:55,060 --> 00:06:00,850
So for example, if this node has the label of 16, this node has a level of 17 and we can see they

87
00:06:00,850 --> 00:06:01,420
are neighbors.

88
00:06:01,540 --> 00:06:04,090
So we have an edge from 16 to 17.

89
00:06:04,270 --> 00:06:06,850
And we did did that before in the whole correct.

90
00:06:07,420 --> 00:06:11,740
Now, today we would like to generate on the implicit one, like, how can I make a difference on the

91
00:06:11,740 --> 00:06:15,130
three if I am having to do that in an implicit way?

92
00:06:20,260 --> 00:06:27,250
Now, let's solve the flood, Phil problem from late night church in the night could problem it tells

93
00:06:27,250 --> 00:06:30,910
you you will be given a matrix representing an image.

94
00:06:31,420 --> 00:06:34,780
Aitchison has an image which to represent a color in an image.

95
00:06:35,710 --> 00:06:38,140
Now it will give you a specific rule and call them.

96
00:06:39,320 --> 00:06:44,900
So let's say this big this position serves one, and one is to give you this one.

97
00:06:45,560 --> 00:06:48,470
It would like you to find the connected component of this one.

98
00:06:48,590 --> 00:06:50,600
What is a connected component of it?

99
00:06:50,870 --> 00:06:52,430
What is a region of it?

100
00:06:52,700 --> 00:06:56,300
It is the region that is reachable, and all of it has the same color.

101
00:06:56,600 --> 00:06:59,770
So you see, this node can reach this one because they are only.

102
00:07:00,110 --> 00:07:01,340
This one can achieve this one.

103
00:07:01,610 --> 00:07:02,810
This one can reach this one.

104
00:07:03,140 --> 00:07:04,940
This one can issue from here or from here.

105
00:07:05,090 --> 00:07:06,320
This one can reach you from here.

106
00:07:06,950 --> 00:07:11,170
So as you see, all of this work that is here was one are reachable.

107
00:07:11,180 --> 00:07:12,230
So all of these are connected.

108
00:07:13,010 --> 00:07:17,300
This one doesn't belong to them because it doesn't belong to this connected computer.

109
00:07:17,690 --> 00:07:19,610
I hope this concept is now very clear.

110
00:07:19,850 --> 00:07:22,190
It's exactly the same concept as a graph.

111
00:07:22,610 --> 00:07:23,300
However.

112
00:07:24,200 --> 00:07:27,170
We just this time find this the only neighbors here.

113
00:07:27,680 --> 00:07:33,920
Now the task is you will start from a specific position, find all of the nodes that are part of my

114
00:07:33,920 --> 00:07:40,700
connected components, part of my region and give them the new color, which is to so it gives you a

115
00:07:40,700 --> 00:07:42,890
location which will have all the value.

116
00:07:43,280 --> 00:07:46,550
All of the values within this region should have the new color.

117
00:07:47,210 --> 00:07:48,110
So what makes?

118
00:07:48,110 --> 00:07:52,790
Dubik says as neighbors, they must be four neighbors connected like Abdul left right.

119
00:07:53,000 --> 00:07:54,770
And they must share the same color.

120
00:07:55,130 --> 00:07:56,480
So this one here?

121
00:07:58,060 --> 00:08:02,380
This one here as a starting point, has this one as never has, this one has never but doesn't have

122
00:08:02,380 --> 00:08:04,520
this one as a neighbor and doesn't have this one as a neighbor.

123
00:08:04,960 --> 00:08:08,470
This one here has this one as a neighbor and has this one as an answer.

124
00:08:08,650 --> 00:08:09,550
I hope you.

125
00:08:09,780 --> 00:08:10,990
You got it, and I hope you.

126
00:08:10,990 --> 00:08:13,300
Visually, you see the way it did.

127
00:08:13,660 --> 00:08:14,980
I would like you to stop it.

128
00:08:15,190 --> 00:08:15,820
Just observe it.

129
00:08:15,830 --> 00:08:21,490
You try to solve this problem by yourself, without without,

130
00:08:24,550 --> 00:08:28,470
without rebuilding the graph in an explicit way.

131
00:08:28,480 --> 00:08:29,650
So give a trial for that.
