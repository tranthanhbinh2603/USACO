0
1
00:00:01,220 --> 00:00:08,420
Homework number three. In the first problem, we are given an integer array, and we would like
1

2
00:00:08,420 --> 00:00:15,710
to find a sub-array that if we only sorted this sub-array, then the whole array is sorted.
2

3
00:00:16,400 --> 00:00:19,220
We'd like to find the shortest such sub-array.
3

4
00:00:19,970 --> 00:00:21,970
We can definitely take the whole array and just sort it.
4

5
00:00:21,980 --> 00:00:25,040
That's OK, but we would like to find the shortest sub-array.
5

6
00:00:25,880 --> 00:00:30,650
I would like you to start by developing O(nlogn) solution which will depend on sorting.
6

7
00:00:31,040 --> 00:00:35,780
But there is another efficient solution that is O(n) only, it doesn't require sorting.
7

8
00:00:36,050 --> 00:00:40,520
When I mention O(n), don't just think, Oh, I would like to make it count sort, don't think this way.
8

9
00:00:41,090 --> 00:00:43,460
Count sort is very specific and we are done with it.
9

10
00:00:44,000 --> 00:00:47,660
Um, just a general approach.
10

11
00:00:48,080 --> 00:00:50,420
So here is an example.
11

12
00:00:50,720 --> 00:00:51,830
This is an array here.
12

13
00:00:52,100 --> 00:00:57,650
If you notice, if we started to sort the sub-array from six to nine, then the whole array will be
13

14
00:00:58,100 --> 00:00:58,790
sorted.
14

15
00:00:59,000 --> 00:01:04,010
So this is the goal, find the shortest sub-array to sort to get the whole array sorted.
15

16
00:01:04,340 --> 00:01:06,260
This array here is completely sorted.
16

17
00:01:06,260 --> 00:01:07,460
This one has a single element.
17

18
00:01:07,460 --> 00:01:08,000
That's OK.
18

19
00:01:10,880 --> 00:01:11,840
Problem number two.
19

20
00:01:13,400 --> 00:01:20,000
We have n jobs, and we have m workers, and you will be given three arrays.
20

21
00:01:20,180 --> 00:01:23,720
One of them is the difficulty, the profit, and the worker.
21

22
00:01:24,350 --> 00:01:27,800
So the difficulty and the profit are both of them for the jobs.
22

23
00:01:28,070 --> 00:01:34,310
So they will be of the same length, the same length here, which is n. The third array is worker,
23

24
00:01:34,310 --> 00:01:35,510
which is about the worker.
24

25
00:01:35,510 --> 00:01:43,640
And it refers to what is the difficulty that the worker can afford to do something?
25

26
00:01:44,930 --> 00:01:54,680
Uh, now each worker can be assigned one job only or at most one job, but the job itself can be applied
26

27
00:01:54,680 --> 00:01:55,670
several times.
27

28
00:01:56,480 --> 00:02:05,600
Now we would like to maximize the profit of the workers, we would like to maximize the profit of the workers.
28

29
00:02:06,380 --> 00:02:07,010
Um.
29

30
00:02:08,570 --> 00:02:08,930
Oh.
30

31
00:02:10,200 --> 00:02:11,520
I forgot to put examples.
31

32
00:02:11,550 --> 00:02:12,450
OK, anyway.
32

33
00:02:13,550 --> 00:02:17,690
So let's say we have here worker number one,
33

34
00:02:19,210 --> 00:02:20,140
worker number two.
34

35
00:02:22,170 --> 00:02:26,580
Let's say this person can work in a job that has a difficulty of at most five.
35

36
00:02:26,880 --> 00:02:30,630
And this one can work in a job that has a difficulty of at least eight.
36

37
00:02:31,290 --> 00:02:34,080
Now we have maybe different jobs.
37

38
00:02:34,950 --> 00:02:39,060
The first job has a difficulty of one and profit of three.
38

39
00:02:39,570 --> 00:02:43,290
Then the difficulty of two and maybe profit of five.
39

40
00:02:43,800 --> 00:02:46,730
Difficulty four and profit two.
40

41
00:02:47,460 --> 00:02:52,560
Difficulty may be six and profit ten.
41

42
00:02:53,280 --> 00:02:56,250
Difficulty eight and profit seven.
42

43
00:02:56,760 --> 00:02:59,520
Difficulty twenty and profit hundred.
43

44
00:03:00,600 --> 00:03:06,630
Now, no one of these two guys can do this task because its difficulty is way harder than five
44

45
00:03:06,630 --> 00:03:07,020
rate.
45

46
00:03:08,010 --> 00:03:13,710
The five one can do the one, two, and four. The eight one can do one, two, four, six, eight.
46

47
00:03:14,190 --> 00:03:16,300
Every one of them will be assigned only one job.
47

48
00:03:17,070 --> 00:03:21,300
Now you would like to assign it such that the added profit is going to be maximum.
48

49
00:03:22,050 --> 00:03:24,240
For example,
49

50
00:03:25,260 --> 00:03:29,920
this person here, he has a profit eight, so he can do all of these tasks, which one has the highest
50

51
00:03:29,920 --> 00:03:33,690
profit? Ten, so we assign this task for this one.
51

52
00:03:35,700 --> 00:03:42,450
Now, this person can only do one of the first three tasks.
52

53
00:03:42,660 --> 00:03:45,720
So he can only do these three, which is the maximum here? Five.
53

54
00:03:46,050 --> 00:03:47,400
So he is going to do this one.
54

55
00:03:49,000 --> 00:03:50,380
So the profit now is fifteen.
55

56
00:03:50,440 --> 00:03:51,340
This is the maximum one.
56

57
00:03:51,640 --> 00:03:54,580
What if I told you that the profit from this task is fifty?
57

58
00:03:55,240 --> 00:03:57,040
You can assign eight to this task.
58

59
00:03:57,430 --> 00:04:04,330
So the same job can be done by more than a person, but every person will do exactly one job.
59

60
00:04:04,600 --> 00:04:07,480
Among all of that, you would like to get the maximum profit.
60

61
00:04:07,730 --> 00:04:08,230
That's it.
61

62
00:04:08,380 --> 00:04:14,650
You will assign for every worker one job such that the assigned jobs are perfect in terms
62

63
00:04:14,650 --> 00:04:17,590
of difficulty and the profit is maximum.
63

64
00:04:20,210 --> 00:04:24,860
The third task, I simplified the text a little bit to make it a bit easier.
64

65
00:04:26,030 --> 00:04:31,990
The task is as following. We have an array of integers, we would like to make all of it to be equal values.
65

66
00:04:32,360 --> 00:04:33,180
So
66

67
00:04:33,200 --> 00:04:36,380
here is the given operations. In every step,
67

68
00:04:37,520 --> 00:04:43,990
You take the largest value, let's say it's index i, and find the next largest value, but must
68

69
00:04:44,000 --> 00:04:48,100
be strictly smaller than it, let's call it index j, then reduce i to j.
69

70
00:04:48,410 --> 00:04:55,190
So nums[ i ] is going to be nums[ j ]. Now we would like to know the number of operations to
70

71
00:04:55,190 --> 00:04:57,230
make all of the elements equal.
71

72
00:04:57,440 --> 00:05:04,490
So simulate this process to know the total number of operations that you will need to do
72

73
00:05:04,490 --> 00:05:04,790
that.
73

74
00:05:06,270 --> 00:05:08,190
So the process is known.
74

75
00:05:09,160 --> 00:05:11,570
But we would like to know how many steps it will take overall.
75

76
00:05:11,590 --> 00:05:14,170
And I would like to find that in O(nlogn) time.
76

77
00:05:15,590 --> 00:05:17,060
Uh, here is an example.
77

78
00:05:18,260 --> 00:05:20,270
Let's say we have the input [5, 1, 3].
78

79
00:05:21,260 --> 00:05:23,480
Let's apply the operation, where is the largest? Five.
79

80
00:05:23,660 --> 00:05:26,870
Where is the second largest? Three, reduce five to three.
80

81
00:05:27,050 --> 00:05:28,970
So now we have [3, 1, 3].
81

82
00:05:29,600 --> 00:05:30,620
Now, where is the largest?
82

83
00:05:30,620 --> 00:05:31,110
Three.
83

84
00:05:31,130 --> 00:05:33,560
Where is the second largest? One, reduce
84

85
00:05:33,560 --> 00:05:35,180
three to one, [1, 1, 3].
85

86
00:05:35,480 --> 00:05:36,290
Where is the largest?
86

87
00:05:36,290 --> 00:05:36,770
Three.
87

88
00:05:37,160 --> 00:05:38,450
Where is the next largest? One.
88

89
00:05:38,480 --> 00:05:40,310
Reduce three to one, then [1, 1, 1].
89

90
00:05:40,400 --> 00:05:45,320
So we needed three steps to reduce the whole array to the same value.
90

91
00:05:45,530 --> 00:05:46,040
And
91

92
00:05:46,400 --> 00:05:48,240
this one is already same value.
92

93
00:05:48,260 --> 00:05:50,360
We are done. This one, we take it.
93

94
00:05:50,510 --> 00:05:52,160
So the three will be reduced to two.
94

95
00:05:52,490 --> 00:05:55,610
Now we have three twos, three ones, keep reducing them one by one.
95

96
00:05:56,990 --> 00:05:57,410
That's all.
