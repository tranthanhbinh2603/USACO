1
00:00:01,110 --> 00:00:06,810
Let's solve the next problem, which is about the three diameter, the three diameter is a very well

2
00:00:06,810 --> 00:00:14,190
known problem in graph theory, and everywhere you will find people describing this first solution.

3
00:00:14,190 --> 00:00:17,220
I would like to tell you a little bit about it, but I will not give too much.

4
00:00:17,700 --> 00:00:22,350
So the idea this following, we would like to find the tree diameter, which is the longest to bath

5
00:00:22,350 --> 00:00:23,280
between two nodes.

6
00:00:23,970 --> 00:00:28,980
Now it is better for you when you are stuck and thinking to start with brute force.

7
00:00:29,340 --> 00:00:31,590
Just think, how can we do everything we can?

8
00:00:31,980 --> 00:00:32,730
We have a tree.

9
00:00:32,740 --> 00:00:35,310
Let's say the tree has five nodes.

10
00:00:36,510 --> 00:00:39,480
OK, so what about just the brute forcing every bit of nodes?

11
00:00:39,510 --> 00:00:40,850
This is just one way, right?

12
00:00:40,860 --> 00:00:43,380
Like dig this node and this new Warsaw and so on.

13
00:00:43,920 --> 00:00:45,020
This looks like very stupid.

14
00:00:45,030 --> 00:00:47,340
We can we can trivially do something better than that.

15
00:00:47,850 --> 00:00:54,390
Just try for every node and then do a bit of force to find the forest node from it.

16
00:00:54,630 --> 00:00:56,820
Do a bit first to find the first one for me.

17
00:00:57,090 --> 00:00:58,140
So we have nodes.

18
00:00:58,320 --> 00:01:06,120
Then for each node, I'm going to run one business, though this takes over all of the times it v for

19
00:01:06,120 --> 00:01:08,600
every node I will find the forest.

20
00:01:08,610 --> 00:01:08,850
What?

21
00:01:08,910 --> 00:01:10,380
What first one from it?

22
00:01:11,760 --> 00:01:12,150
OK.

23
00:01:12,720 --> 00:01:19,800
Clearly, if the first if the node that you have is one side of the diameter, then we definitely find

24
00:01:19,800 --> 00:01:20,760
the other side of the.

25
00:01:22,020 --> 00:01:25,650
But which one of this one must be really part of the damage that we do know?

26
00:01:26,460 --> 00:01:31,020
Let me tell you one very interesting approach that is coming on the internet.

27
00:01:33,890 --> 00:01:42,290
The idea is following if we run beliefs from any random note and in the forest and not from it, this

28
00:01:42,290 --> 00:01:46,250
forest and wood must be bought off one of the diameters.

29
00:01:47,260 --> 00:01:53,680
Let me say that again, big any random note from here, let's say we beg the distance, compute the

30
00:01:53,680 --> 00:01:59,290
forest, the not from it using a single force, which should be either this note or this note, let's

31
00:01:59,290 --> 00:02:00,190
say this note here.

32
00:02:02,020 --> 00:02:06,340
Then there is a claim that this note must be part of the tree diameter.

33
00:02:07,240 --> 00:02:14,770
OK, where does that either a tree diameter dig this very far and wood and defines the forest from it?

34
00:02:14,920 --> 00:02:16,600
So what is the forest one?

35
00:02:16,810 --> 00:02:18,760
This one could be the forest student here.

36
00:02:19,210 --> 00:02:22,090
So this now news represented their tree diameter.

37
00:02:22,540 --> 00:02:26,530
So the algorithm in these is following big in Inwood, let's say zero.

38
00:02:26,950 --> 00:02:27,820
Find the forest.

39
00:02:27,820 --> 00:02:28,360
Not for me.

40
00:02:28,450 --> 00:02:29,830
Let's say let's call it V1.

41
00:02:30,400 --> 00:02:33,610
Now, to be a first from V1, find the forest node from it.

42
00:02:33,610 --> 00:02:36,580
Let's say v2, v1 v2 must be the tree diameter.

43
00:02:37,270 --> 00:02:41,770
What did the time complexity of that is just implies we will run this twice.

44
00:02:42,400 --> 00:02:43,510
Let me show you the good.

45
00:02:49,250 --> 00:02:56,660
So here is here is the cut the tree diameter function was following this first function, I modified

46
00:02:56,660 --> 00:03:04,400
the beer fest to return to things it return to there the forest route and return the delta to the forest.

47
00:03:04,850 --> 00:03:08,450
OK, but by the way, this is a nice observation to note.

48
00:03:09,050 --> 00:03:13,250
We know that the buffs keep exploring the woods one by one, right?

49
00:03:13,700 --> 00:03:15,980
So let's get this current outside of the loop.

50
00:03:16,910 --> 00:03:22,130
Once this loop end, then current must be the forest route that the beef is reached.

51
00:03:22,760 --> 00:03:27,020
Again, let's say we did best from here.

52
00:03:28,120 --> 00:03:30,340
We first give this thing level by level.

53
00:03:32,090 --> 00:03:38,930
Would this be a first and the last thing would we get from the queue must be the first, then we can

54
00:03:38,930 --> 00:03:39,890
find that in a different way.

55
00:03:39,920 --> 00:03:43,370
We can just iterate on the 11th ray and get the largest value.

56
00:03:43,730 --> 00:03:48,950
But by definition, once the beef is ended, the less the value we get from the queue.

57
00:03:49,280 --> 00:03:51,650
Is the forest node in the queue.

58
00:03:52,130 --> 00:03:57,890
So current here to in the forest, the wood and length represent it's it's live.

59
00:03:59,090 --> 00:04:04,010
Now, the second thing here we do is follow, I do first be a first from zero eight return home for

60
00:04:04,010 --> 00:04:06,080
me, the forest and wood and its distance.

61
00:04:06,080 --> 00:04:07,220
We don't care about the distance.

62
00:04:07,550 --> 00:04:09,710
We will do another face from this note.

63
00:04:09,980 --> 00:04:11,690
So to return for me, a new beer.

64
00:04:12,000 --> 00:04:16,010
Now the beer here, the present to the forest and would so be one.

65
00:04:17,600 --> 00:04:23,420
The return value that's first represented the opposite value, the other value and the second represented

66
00:04:23,420 --> 00:04:25,070
the length of this value.

67
00:04:25,760 --> 00:04:31,520
Good wise, as you see, it's matter of getting the forest and making to be a fiscals.

68
00:04:31,990 --> 00:04:34,760
Now what's really challenging this problem is this following.

69
00:04:36,260 --> 00:04:42,320
The the algorithm looks like intuitive when you think about it, if you found the forest node from any

70
00:04:42,320 --> 00:04:47,060
node, then you actually Richard that one of the very boundaries of the tree.

71
00:04:47,840 --> 00:04:53,960
So intuitively, this node seems to be part of that of the diameter.

72
00:04:54,320 --> 00:04:59,150
So if you did another bit further from it, you should find the other opposite or the other end of the

73
00:04:59,150 --> 00:04:59,600
diameter.

74
00:05:00,050 --> 00:05:05,180
But the challenge really is to make a solid and formal proof for it.

75
00:05:05,970 --> 00:05:13,550
Uh, I'm putting here's some initial thoughts, but I personally never try to prove it like in a full

76
00:05:13,550 --> 00:05:13,880
way.

77
00:05:15,410 --> 00:05:24,740
Now I would like to show you an easier idea that is more efficient and is directly to be understood

78
00:05:24,740 --> 00:05:26,830
and easily to be proved.

79
00:05:27,110 --> 00:05:29,480
Converting to this very common approach on the internet.

80
00:05:30,230 --> 00:05:31,160
So let's see here.

81
00:05:33,280 --> 00:05:37,810
And I don't know why people do mention this approach off, like they focus a lot on the office idea.

82
00:05:38,170 --> 00:05:39,370
The idea is is following.

83
00:05:41,300 --> 00:05:42,230
We have a three.

84
00:05:42,650 --> 00:05:44,870
We will rule this three from anywhere.

85
00:05:45,050 --> 00:05:47,660
So let's say we have the directive to lead this way.

86
00:05:51,560 --> 00:05:57,170
I learned this algorithm the first time in the in the binary trees, in the binary tree, the same problem

87
00:05:57,170 --> 00:06:00,050
is asked to find the tree diameter, so I learned this solution.

88
00:06:01,130 --> 00:06:07,310
Now the idea is as follows This is a general tree that could have, maybe, let's say, here three children

89
00:06:07,310 --> 00:06:08,090
or four children.

90
00:06:08,990 --> 00:06:09,530
We will rule.

91
00:06:09,650 --> 00:06:15,200
We will root this tree to grow this tree just the first from anywhere and then only the edges that you

92
00:06:15,200 --> 00:06:18,050
take out of the one that exists as a direction.

93
00:06:18,260 --> 00:06:21,830
So for example, if I did the first two from zero, then this would be the direction.

94
00:06:22,100 --> 00:06:23,090
This would be the action.

95
00:06:23,090 --> 00:06:25,100
This would be the direction and so on.

96
00:06:25,460 --> 00:06:28,190
Routing the tree is something that's very common.

97
00:06:28,730 --> 00:06:32,060
I don't know if people Chad Brown will now set out the tree or route the tree.

98
00:06:32,400 --> 00:06:33,980
No, I'm not a native speaker.

99
00:06:34,940 --> 00:06:35,730
Um.

100
00:06:38,170 --> 00:06:39,820
OK, so now what is the point?

101
00:06:39,850 --> 00:06:45,490
We have a three, which is the three diameter let's the let's pretend for a while that this is just

102
00:06:45,490 --> 00:06:46,480
the binary three, OK?

103
00:06:49,520 --> 00:06:54,560
Now, imagine that you are at the root here, we will find the solution with a single device.

104
00:06:55,610 --> 00:06:59,870
Let me show you first the very simple task we will you will need it, which is the three height of the

105
00:06:59,870 --> 00:07:00,170
road.

106
00:07:00,590 --> 00:07:03,980
The height is the longest, the best from the north to the cliff.

107
00:07:04,280 --> 00:07:06,290
So for example, what is the height of this node?

108
00:07:06,740 --> 00:07:08,330
Let's make another try here.

109
00:07:10,010 --> 00:07:12,100
That's the height is one, two or three.

110
00:07:12,110 --> 00:07:16,760
So the height of this node three, because it is the longest bus would meet the height of this node

111
00:07:16,760 --> 00:07:17,510
is just two.

112
00:07:17,690 --> 00:07:24,440
Let's say here, the height of this node is to the height of this node is one.

113
00:07:24,980 --> 00:07:25,670
And so it.

114
00:07:27,650 --> 00:07:29,450
Uh.

115
00:07:31,040 --> 00:07:32,660
It seems I'm adding extra one.

116
00:07:32,690 --> 00:07:33,050
OK.

117
00:07:33,080 --> 00:07:38,150
So anyway, so this would be like a four and three and the two and the one here, so every leaf node

118
00:07:38,150 --> 00:07:39,770
is like one by itself.

119
00:07:41,260 --> 00:07:41,560
OK.

120
00:07:41,650 --> 00:07:46,030
This is the height of the tree, I hope it is an easy idea you should study the height idea in the data

121
00:07:46,030 --> 00:07:46,480
structure.

122
00:07:47,530 --> 00:07:49,150
OK, now what is a solution?

123
00:07:50,770 --> 00:07:54,430
We are doing a device here, which is a 3D printer.

124
00:07:54,820 --> 00:07:57,070
There is only two cases for the three there.

125
00:07:57,370 --> 00:07:59,620
There is only two cases for the reader.

126
00:08:00,490 --> 00:08:06,280
The first, the case is the 3D printer will best buy my nude.

127
00:08:07,910 --> 00:08:15,050
Will Best Buy may not the second case is that idea ever thought it would not Best Buy my note, if they're

128
00:08:15,440 --> 00:08:21,020
if they're then that doesn't occur, doesn't it read does it best buy my note, then that occasion will

129
00:08:21,020 --> 00:08:22,640
find it in a way in one of my children.

130
00:08:23,150 --> 00:08:24,200
What is the answer?

131
00:08:24,440 --> 00:08:26,570
If the diameter will bear in mind, would.

132
00:08:27,520 --> 00:08:28,960
The answer simply is.

133
00:08:30,440 --> 00:08:31,250
One B+.

134
00:08:32,260 --> 00:08:34,880
Your height from the lift is three and height from the right.

135
00:08:35,570 --> 00:08:38,780
So let's say the tree diameter is as follows this way.

136
00:08:40,860 --> 00:08:44,070
So the height from the lift route will go this way.

137
00:08:44,580 --> 00:08:46,500
The height from the right note would go this way.

138
00:08:46,950 --> 00:08:53,640
And then you add yourself five, let me say that again in a binary tree where everyone just has two

139
00:08:53,640 --> 00:08:54,120
children.

140
00:08:54,870 --> 00:08:59,310
The tree diameter is you either best for me or not.

141
00:08:59,310 --> 00:09:03,720
For me, if you're best for me, then my answer should be the longest.

142
00:09:03,780 --> 00:09:08,250
From the left side and the longest from the right site and adding me to them.

143
00:09:08,760 --> 00:09:11,310
Otherwise, we just find the answer in the children.

144
00:09:12,030 --> 00:09:14,820
OK, what if we are more than just two children?

145
00:09:14,830 --> 00:09:16,170
What if it's a general three?

146
00:09:16,860 --> 00:09:24,210
Then you need to find the longest sides in the longest to heights in your children, the longest two

147
00:09:24,210 --> 00:09:25,980
heights in your children.

148
00:09:26,130 --> 00:09:27,090
So let's see here.

149
00:09:27,360 --> 00:09:28,590
Imagine we have the route here.

150
00:09:28,920 --> 00:09:30,450
We have one would here.

151
00:09:30,480 --> 00:09:34,620
This is one Beth, and we have another one here and we have another one here.

152
00:09:37,300 --> 00:09:38,800
And we have another one here.

153
00:09:40,710 --> 00:09:45,990
Now I need the tree diameter, so I will take the two children with the longest the height, which is

154
00:09:45,990 --> 00:09:46,740
this one here.

155
00:09:48,170 --> 00:09:49,250
And this one here.

156
00:09:51,340 --> 00:09:52,810
And then add myself for them.

157
00:09:53,500 --> 00:09:57,690
So this is the longest diameter that best with the current two.

158
00:09:58,920 --> 00:10:02,640
I hope you good the idea, the good is very straightforward.

159
00:10:02,940 --> 00:10:05,850
You first start by writing the tree diameter code itself.

160
00:10:06,360 --> 00:10:09,210
OK, so let's first write the tree diameter grid itself.

161
00:10:09,570 --> 00:10:14,130
The tree diameter would be one blasted the maximum off all of my children.

162
00:10:14,580 --> 00:10:16,110
I'm here trying to take the maximum.

163
00:10:16,380 --> 00:10:19,140
I'm keeping the maximum of my best to children.

164
00:10:19,710 --> 00:10:22,050
You iterate as this is three.

165
00:10:22,050 --> 00:10:23,640
I don't want to use the vista, right?

166
00:10:24,100 --> 00:10:29,340
Uh, so if you don't want to use a vista array, you just make sure you don't go back to your spirit.

167
00:10:29,580 --> 00:10:35,700
We did that before you recurs on your children and your child here will return to that height of this

168
00:10:35,700 --> 00:10:36,210
child.

169
00:10:36,960 --> 00:10:39,570
Now I'm giving the two maximum children.

170
00:10:39,840 --> 00:10:46,830
If the maximum height is this then etche, then we take it here and give the maximum height to hide

171
00:10:46,830 --> 00:10:48,420
one and give myself for this side one.

172
00:10:48,990 --> 00:10:53,520
If it's actually equal or less than me, we see if we can give it to the second day.

173
00:10:53,730 --> 00:10:57,330
This is a straightforward to find the two maximum values here.

174
00:10:57,750 --> 00:10:59,710
Now what is the height of the new tree?

175
00:10:59,790 --> 00:11:02,040
It is just one below the maximum height in it.

176
00:11:02,850 --> 00:11:08,580
OK, where is the tree diameter and globally initializing variable called maximum there so far, and

177
00:11:08,580 --> 00:11:09,600
I'm updating it.

178
00:11:09,810 --> 00:11:14,820
So the maximum diameter here is the maximum height for me, plus the maximum height for the child.

179
00:11:15,180 --> 00:11:17,160
And as leaf node return one.

180
00:11:17,400 --> 00:11:19,470
So in a way, as a wrote, I'm included here.

181
00:11:19,470 --> 00:11:21,810
It's like a brother here.

182
00:11:23,250 --> 00:11:24,360
I hope you get the idea.

183
00:11:24,570 --> 00:11:30,210
This good is mainly the good for the tree diameter, and this line is updating the max.

184
00:11:30,680 --> 00:11:37,860
This this good is for the tree height, and this is the extra single line of code to find their tree

185
00:11:37,860 --> 00:11:38,340
there with that.

186
00:11:38,610 --> 00:11:40,920
So this one is updating the maximum diameter.

187
00:11:41,150 --> 00:11:47,850
It's simply saying for every node, what is the longest diameter in this node and maximize among all

188
00:11:47,850 --> 00:11:48,240
of them.

189
00:11:48,780 --> 00:11:54,600
So now the advantage we get sort of this good is, first of all, it is trivial to good because it just

190
00:11:54,600 --> 00:11:56,520
depends on the tree height, which is easy to cut.

191
00:11:56,970 --> 00:11:59,970
Second, it's just single, the first not to be a fiscals.

192
00:12:00,390 --> 00:12:02,850
Third, the logic to prove it is very easy.

193
00:12:03,120 --> 00:12:09,540
We were practically speaking, we tried to compute the diameter, if it will best by a node.

194
00:12:10,050 --> 00:12:11,520
And also, it has this nice insight.

195
00:12:11,520 --> 00:12:13,200
You are thinking about that.

196
00:12:13,530 --> 00:12:15,720
There are middle values, the middle nodes, the B.

197
00:12:15,720 --> 00:12:19,650
If a solution is thinking about the boundaries, you cannot find the boundary.

198
00:12:19,830 --> 00:12:22,080
Then another be forced to find another boundary.

199
00:12:22,440 --> 00:12:26,310
But this the first solution is thinking about the intermediate nodes.

200
00:12:26,520 --> 00:12:27,690
It say this is a node.

201
00:12:28,110 --> 00:12:31,980
What happens if the Democrats best from here or find the longest and find the longest?

202
00:12:32,190 --> 00:12:34,170
This is my my sequence.

203
00:12:35,250 --> 00:12:38,010
I think this is a nice and intelligent solution.

204
00:12:39,210 --> 00:12:43,740
We can still building the diameter with the S is a straight forward building.

205
00:12:43,740 --> 00:12:45,660
The diameter here is also, I think, doable.
