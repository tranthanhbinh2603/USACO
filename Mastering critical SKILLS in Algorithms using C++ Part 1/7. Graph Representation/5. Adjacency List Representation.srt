1
00:00:01,590 --> 00:00:08,070
Let's move to the second and very common adjacency list, the representation and other representation

2
00:00:08,070 --> 00:00:08,640
for the graph.

3
00:00:09,180 --> 00:00:13,290
I would say many of them, but the mutations during the course would be based on that one.

4
00:00:14,490 --> 00:00:15,060
Let's see.

5
00:00:16,340 --> 00:00:21,620
So the adjacency matrix is in a good word for sparse matrices.

6
00:00:23,820 --> 00:00:29,880
Now, just as he list to come to help this problem by saving more memory, the idea is very simple.

7
00:00:30,360 --> 00:00:35,910
But every note you will have a list you will see usually in books at Detroit like could list you have

8
00:00:35,910 --> 00:00:37,080
a list of nibbles.

9
00:00:37,890 --> 00:00:39,100
Can you guess the full picture?

10
00:00:39,120 --> 00:00:43,080
Like, how can we use Victor Victor of integers to represent, for example, unweighted graph?

11
00:00:45,070 --> 00:00:46,150
They did this following.

12
00:00:48,480 --> 00:00:55,050
Let's say that we have a new two here, not two here, it has four neighbors, one four five zero three.

13
00:00:56,130 --> 00:01:03,330
Now you do the following you start to say that no two is attached only to this list of nodes, so no

14
00:01:03,330 --> 00:01:05,970
two year would have a list of foreigners here.

15
00:01:06,660 --> 00:01:11,160
What about, for example, node zero, not zeros on the attached to Note five has only five.

16
00:01:11,190 --> 00:01:12,210
So we have here five.

17
00:01:13,310 --> 00:01:14,700
What about nude, no.

18
00:01:14,880 --> 00:01:21,000
Maybe nude number two, three, three doesn't have any neighbors, so empty list and so on.

19
00:01:21,390 --> 00:01:25,230
If not, number five is also connected to nude No.

20
00:01:25,950 --> 00:01:30,540
Six and also nude number seven and nude number eight.

21
00:01:30,780 --> 00:01:36,090
So nude number five here would have the food and would have also the six and the seven and eight.

22
00:01:36,600 --> 00:01:43,080
So the more of that is in instead of a complete one rule of zeros and ones or whatever to say if there

23
00:01:43,080 --> 00:01:47,790
is a neighbor or not, this doesn't work because in a sports matrix, all of that is zero.

24
00:01:48,390 --> 00:01:53,290
What about just saving the memory and just listing their correspondence?

25
00:01:53,970 --> 00:01:56,400
Can you implement that using Vector Victor Frontier?

26
00:01:56,640 --> 00:01:57,540
Can you give it a try it?

27
00:01:57,540 --> 00:01:58,830
It should be easy and intuitive.

28
00:02:00,510 --> 00:02:00,840
It is a.

29
00:02:01,860 --> 00:02:08,490
The graphic definition is still as it is there, the graph in the creation will see it now.

30
00:02:08,700 --> 00:02:11,700
The graph has here from an to as usual.

31
00:02:11,820 --> 00:02:14,430
But we say graph from the bush back to.

32
00:02:14,880 --> 00:02:19,590
So this is like instead of like attaching it to a list, we are attaching it to a vector.

33
00:02:20,940 --> 00:02:27,120
And the undirected, edgy ad from the left and you heard from the right, the printing this time iterate

34
00:02:27,120 --> 00:02:28,290
on every single note.

35
00:02:28,980 --> 00:02:34,950
But now graph from represent a list or a vector of my neighbors.

36
00:02:35,220 --> 00:02:41,430
For example, here in this, one graph of two g of two will be a vector that involve only the values

37
00:02:41,430 --> 00:02:43,560
of zero, one, five and three.

38
00:02:44,890 --> 00:02:52,230
So this would reiterate only for a number of steps and then graft from and to would be actionable.

39
00:02:52,450 --> 00:02:55,300
So as you see them, but ambition now is less intuitive.

40
00:02:55,480 --> 00:02:57,250
But over time, you will get used to it.

41
00:02:58,510 --> 00:02:59,680
It is the main function.

42
00:03:00,220 --> 00:03:02,290
Everything is as it is with one change.

43
00:03:02,650 --> 00:03:05,420
When you create here the graph, it would be a graph of nodes.

44
00:03:05,440 --> 00:03:09,790
This is in the previous same graph of nodes of victor of integral nodes.

45
00:03:09,970 --> 00:03:13,960
This time was just to create initially a single vector of nodes.

46
00:03:15,340 --> 00:03:17,860
Everyone has an empty victory in the beginning.

47
00:03:18,790 --> 00:03:23,380
And the more more value that you add, the more they are here in the list.

48
00:03:27,160 --> 00:03:28,990
Now, what if the graph is weakened?

49
00:03:29,110 --> 00:03:30,970
How can we handle that in the clouds?

50
00:03:31,690 --> 00:03:36,280
Can you think about a modification for the good try to be flexible like a challenge yourself?

51
00:03:38,220 --> 00:03:44,910
It is one way you can create an edge glass construct and added the value to and add you cost.

52
00:03:45,180 --> 00:03:47,490
You can even use the C++ beer internet.

53
00:03:47,970 --> 00:03:52,760
Now our presentation is not victor of victor of integer, it's victor of Victor Edge.

54
00:03:53,250 --> 00:03:56,760
Now this is very flexible because you can add whatever you need to there.

55
00:03:57,450 --> 00:03:59,370
You can add whatever you need to the edge itself.

56
00:04:01,160 --> 00:04:02,600
Let's see the implementation here.

57
00:04:03,080 --> 00:04:08,300
The function now will have the coast and now the bush back will have the two and the coast.

58
00:04:08,960 --> 00:04:11,920
This create an object from that structure.

59
00:04:12,950 --> 00:04:17,090
And now in the representation here, the EJU will have the two and it cost.

60
00:04:18,750 --> 00:04:19,120
OK.

61
00:04:19,380 --> 00:04:20,820
A few concerns to keep in mind.

62
00:04:21,390 --> 00:04:26,160
What about self loops, you can you rejected them and ignore them, if you would like?

63
00:04:26,850 --> 00:04:30,600
What about, uh, keeping only one editor from multiple edges?

64
00:04:30,930 --> 00:04:34,500
This is not as easy because I have no no to.

65
00:04:35,440 --> 00:04:37,810
Would you have an edge, five A. in?

66
00:04:37,960 --> 00:04:39,620
A. Three agita?

67
00:04:40,210 --> 00:04:42,580
Now you don't, you would like to keep all one edge.

68
00:04:42,940 --> 00:04:46,840
Well, for example, if there is a reason for that, you have to iterate through that.

69
00:04:46,840 --> 00:04:49,240
Five exist to avoid adding it again.

70
00:04:50,590 --> 00:04:53,350
Well, also the same, the same method looks I would like to remove.

71
00:04:53,350 --> 00:04:53,830
Seven.

72
00:04:54,910 --> 00:04:57,070
You have to find this and remove it.

73
00:04:57,130 --> 00:05:00,490
Maybe some people will just find it, swab it with the back and remove it.

74
00:05:00,520 --> 00:05:02,980
But in all cases, you still have to remove it.

75
00:05:04,680 --> 00:05:05,130
OK.

76
00:05:05,160 --> 00:05:10,650
What if I would like that the edges to be ordered like I don't need it five seven three two, I need

77
00:05:10,650 --> 00:05:13,320
it to be two three five seven.

78
00:05:15,180 --> 00:05:19,080
So one way is after you build the graph, you can sort it if you would like.

79
00:05:19,080 --> 00:05:23,460
By the definition, what we would like by the coast, you can circle by the coast and so on.

80
00:05:24,240 --> 00:05:27,890
So I'm trying to show you the flexibility now.

81
00:05:27,900 --> 00:05:31,560
Took five minutes to answer out of this question like that every time.

82
00:05:31,740 --> 00:05:36,870
And this is one extra question relative to the last time who would like to go into the degree of how

83
00:05:36,870 --> 00:05:37,620
can we do that?

84
00:05:39,780 --> 00:05:40,320
Let's see.

85
00:05:41,040 --> 00:05:45,110
Now, first of all, the space complexity is Ebola's V.

86
00:05:45,120 --> 00:05:47,820
When you create a vector, it is a Vector V nodes.

87
00:05:48,450 --> 00:05:51,120
Everyone will have bunch of neighbors, right?

88
00:05:51,300 --> 00:05:52,320
Like, I have two neighbors.

89
00:05:52,620 --> 00:05:55,380
Sevigny was five neighbors, three neighbors.

90
00:05:55,710 --> 00:05:58,260
The submission of all of the neighbors is somebody.

91
00:05:58,830 --> 00:06:00,600
So the total is Fiddler's feet.

92
00:06:00,840 --> 00:06:04,160
This is a very common complexity that you will see a lot during their graph theory.

93
00:06:05,190 --> 00:06:10,470
If you would like to get to know if an edge exists or not, you have to iterate on all of your neighbors.

94
00:06:10,710 --> 00:06:13,650
So let's call it ordinary here all of the our degree.

95
00:06:14,940 --> 00:06:18,870
If you would like to list all of your neighbors, yes, you would have to go LORDÂ°.

96
00:06:19,380 --> 00:06:24,390
If you'd like to traverse the wood graph, then you have to straighten out of it again.

97
00:06:24,390 --> 00:06:32,610
The same logic treat power over the nodes, pour over the neighbors, and the thick way to think about

98
00:06:32,610 --> 00:06:35,220
these edges here is as a as a root here.

99
00:06:35,400 --> 00:06:42,210
It's actually like a submission of the the neighbors, some submission of the neighbors of Node I.

100
00:06:42,450 --> 00:06:46,380
If you try to sum all of the neighbors in a total sum, it just eat.

101
00:06:47,280 --> 00:06:48,660
I hope it's clear enough for you.

102
00:06:49,020 --> 00:06:51,120
Try to think of it in an intuitive way.

103
00:06:51,480 --> 00:06:57,780
I have heard this vector, this vector, this vector is vector and this vector.

104
00:06:58,140 --> 00:07:03,120
So I have your different neighbors, but think globally this is e edges.

105
00:07:03,120 --> 00:07:06,660
So total is E and we have a V for the edges.

106
00:07:07,140 --> 00:07:08,850
What about the in the group A.?

107
00:07:10,140 --> 00:07:12,660
It would to to know the India Group A..

108
00:07:12,810 --> 00:07:16,890
You have to iterate over the wooded structure to summit, which is very expensive.

109
00:07:18,450 --> 00:07:23,880
This representation is more flexible than previous one specifically to maintain the memory, but it

110
00:07:23,880 --> 00:07:25,530
is more better for the sparse one.

111
00:07:28,380 --> 00:07:33,450
Um, we discussed two Boblo representations in the home work.

112
00:07:33,450 --> 00:07:38,430
You will see other two bubbler representation, then I will challenge you with many other question that

113
00:07:38,430 --> 00:07:43,020
about the representation and the message that I'm giving to you is a graph.

114
00:07:43,020 --> 00:07:44,850
Representation is a very generic concept.

115
00:07:44,850 --> 00:07:46,800
Don't trap yourself in a specific view.

116
00:07:47,490 --> 00:07:48,960
Just think what are my nodes?

117
00:07:48,960 --> 00:07:52,950
What are my edges thinking we did or not directed or not?

118
00:07:52,950 --> 00:07:56,040
Multiple edges are not, uh, a lot of things.

119
00:07:56,040 --> 00:07:58,890
C++ set Mab hash tables, vector list.

120
00:07:59,130 --> 00:08:04,980
All of that can be used in the representations, so don't grab yourself in what we explained.

121
00:08:05,220 --> 00:08:10,170
We are just showing you how people we're managing these representations.

122
00:08:11,490 --> 00:08:14,290
Let us think that I would like to tell you is about the rotary.

123
00:08:14,290 --> 00:08:21,690
You remember, the rotary is a directed tree was one root and then every every arrow is for down.

124
00:08:22,950 --> 00:08:25,650
So as a three, it will have in the minus one edges.

125
00:08:26,160 --> 00:08:28,200
Now there is a very interesting idea here.

126
00:08:28,230 --> 00:08:30,260
We can definitely represented with adjacent cities.

127
00:08:31,410 --> 00:08:33,180
But there is a very nice representation.

128
00:08:33,210 --> 00:08:34,470
Remember the idea?

129
00:08:34,770 --> 00:08:35,910
We say that, too.

130
00:08:35,910 --> 00:08:39,060
As a parent of five, the parent of zero is five.

131
00:08:39,060 --> 00:08:40,440
The merit of one is five.

132
00:08:40,440 --> 00:08:41,730
The parents of four is one.

133
00:08:42,360 --> 00:08:47,730
So create the one the array of eludes and in every one of them, put the beer.

134
00:08:47,730 --> 00:08:56,140
And for example, beer into four is one parent of two is five beer and two of six is two.

135
00:08:57,030 --> 00:08:59,580
And only for the root value would value like minus one.

136
00:09:00,150 --> 00:09:06,180
So interesting about this representation, it is all v in the memory only.

137
00:09:06,180 --> 00:09:11,790
It will be because in a way we have it just like spaces and we can know the beer and directly in 01.

138
00:09:12,420 --> 00:09:15,390
But if you would like to know your beer neighbours, you have to do it.

139
00:09:15,390 --> 00:09:20,280
In all, this representation is very important and is used by the -- data structure.

140
00:09:21,370 --> 00:09:23,490
Uh, yeah, that's so.

141
00:09:24,480 --> 00:09:26,820
Let me explain something a little more formal here.

142
00:09:26,820 --> 00:09:32,700
Before ending that, I want to mention that I would be very informal in the course I would give informal

143
00:09:32,700 --> 00:09:34,260
sketch for the groups and so on.

144
00:09:34,710 --> 00:09:42,000
But the proof the format why this field involve a lot of mathematics because to prove something, you

145
00:09:42,000 --> 00:09:43,170
need to do mathematics.

146
00:09:43,500 --> 00:09:47,010
I would like to show you, what does it mean to explain in a formal way when it comes to graph?

147
00:09:47,460 --> 00:09:48,660
I will tell you something later.

148
00:09:49,080 --> 00:09:56,230
Given a directed Graph G equals v any compute g ts to subscript here or B it.

149
00:09:57,030 --> 00:09:58,500
And this is explanation of fee.

150
00:09:58,890 --> 00:10:01,590
I would like you to take five minutes and try to guess what does this mean?

151
00:10:02,730 --> 00:10:03,210
So it is.

152
00:10:03,210 --> 00:10:03,930
What does it mean?

153
00:10:04,710 --> 00:10:10,320
First of all, g equal video because it is a graph of V nodes and edges.

154
00:10:11,500 --> 00:10:14,150
Now here this is just a solid script.

155
00:10:14,160 --> 00:10:17,430
You know, in programming, you write something like a graph to graph three.

156
00:10:17,440 --> 00:10:18,510
This is just subscript.

157
00:10:18,990 --> 00:10:19,890
So you see that here.

158
00:10:20,160 --> 00:10:25,050
G D, which is a new graph, is V, which is all the vertices.

159
00:10:25,050 --> 00:10:28,620
So we are using the same vertices and new edges.

160
00:10:28,620 --> 00:10:30,150
We are substituting them with Steve.

161
00:10:31,740 --> 00:10:33,780
Maybe some scripting, maybe another term I forgot.

162
00:10:34,500 --> 00:10:35,750
Now what?

163
00:10:36,160 --> 00:10:39,960
How to represent the new images the following way.

164
00:10:41,400 --> 00:10:42,390
You see these part.

165
00:10:45,280 --> 00:10:52,620
This is like a for loop, it says for every edge you and Vinnie would take Vnu.

166
00:10:53,260 --> 00:10:58,210
This means if the graph has an edge two, we would have it five and two.

167
00:10:59,350 --> 00:10:59,740
OK.

168
00:11:00,250 --> 00:11:03,340
Uh, this simple mean belongs to.

169
00:11:04,840 --> 00:11:08,710
So the idea here this is just we are reversing the edges of the death.

170
00:11:09,010 --> 00:11:17,530
It says if you have a graph of one, two or three, the new graph is one to three, but the digits are

171
00:11:17,530 --> 00:11:18,490
flipped two this way.

172
00:11:19,390 --> 00:11:20,830
So that's okay.

173
00:11:22,060 --> 00:11:24,130
Directed graph is an order the debate of nodes.

174
00:11:24,130 --> 00:11:27,820
So that's why we write this way like, you know, like a directed one.

175
00:11:28,240 --> 00:11:34,570
So if you envy is like a piece, like when I tell you the and v, it mean the first item from V and

176
00:11:34,570 --> 00:11:37,690
the second item is also from V So B and V R Preview and V.

177
00:11:39,250 --> 00:11:42,400
As I say, this is this is how we write something more formally.

178
00:11:42,670 --> 00:11:44,410
Informally, I would just say, you know what?

179
00:11:44,500 --> 00:11:46,660
This is a reference towards just the reverse of rage.

180
00:11:46,990 --> 00:11:50,500
So as you see, the informant sometimes is way easier to sublease.

181
00:11:51,040 --> 00:11:52,840
It's just matter of a single second.

182
00:11:53,200 --> 00:11:54,790
But the format is very important.

183
00:11:54,970 --> 00:12:00,130
Why many, many in mathematics, many formal proofs?

184
00:12:00,460 --> 00:12:04,180
Maybe you didn't write the formal proof they will miss something.

185
00:12:04,360 --> 00:12:06,580
Even in formal groups, people do mistakes.

186
00:12:06,970 --> 00:12:10,990
So when people do informal proofs, they are more subjective for mistakes.

187
00:12:11,110 --> 00:12:16,420
That's why formal definitions of of graph theory or other algorithms is very important.

188
00:12:16,600 --> 00:12:19,900
It isn't a waste of time, you know, it takes more time to understand it.

189
00:12:20,110 --> 00:12:26,470
But this is how you make something very solid and also a good way to discover your mistakes that solve.
