1
00:00:00,980 --> 00:00:06,380
And the third problem I would like to try and other kind of domains that the graph domains or specifically

2
00:00:06,680 --> 00:00:07,640
the grid domain.

3
00:00:08,120 --> 00:00:11,210
And it's more or less implementation of skills.

4
00:00:11,210 --> 00:00:14,330
And I think it's if you understood what is the what is the requirement?

5
00:00:14,750 --> 00:00:19,220
It is just to be like a normal normal code.

6
00:00:19,610 --> 00:00:25,550
So we are using here the adjacency list implementations, so this is could be best could be based the

7
00:00:25,550 --> 00:00:26,870
code from our code.

8
00:00:27,470 --> 00:00:29,750
Now let's see how to generate the graph.

9
00:00:30,170 --> 00:00:37,150
First of all, as you know, if we have a matrix that is rows and columns, then we have rules, times,

10
00:00:37,180 --> 00:00:38,660
columns, nodes.

11
00:00:38,840 --> 00:00:39,850
So this is the first thing.

12
00:00:39,860 --> 00:00:42,050
Here we are creating Rossum's columns, nodes.

13
00:00:42,530 --> 00:00:44,780
The second thing we are generating the edges.

14
00:00:45,290 --> 00:00:49,520
So we are, let's say, here the three times the four matrix.

15
00:00:53,380 --> 00:00:59,240
Oh, yes, three times for amitriptyline by rule and also call them the white collar.

16
00:01:00,050 --> 00:01:06,260
Now if I have this cell here, we can compute its index in a very easy way, which is row times columns

17
00:01:06,260 --> 00:01:11,390
of let's see, we learned this kind of flirting Bittrex back in programming like how can you convert

18
00:01:12,020 --> 00:01:20,270
index of Iron G in two index of just a flattened index, which either, by the way, is very but if

19
00:01:20,270 --> 00:01:26,960
you are, if you are at some room here, then it means that you've finished all of this column like,

20
00:01:26,960 --> 00:01:29,210
let's say you are to column the two and row two.

21
00:01:29,540 --> 00:01:33,890
This means you already finished two rows and every row has three columns.

22
00:01:34,070 --> 00:01:35,870
That's why you multiply through times of columns.

23
00:01:36,110 --> 00:01:38,390
And now we have a column that isn't further so far.

24
00:01:38,390 --> 00:01:39,360
So it's +I.

25
00:01:39,710 --> 00:01:46,430
So if I told you row two and column two, so two rows are done, this is the route and the columns and

26
00:01:46,430 --> 00:01:47,810
column two are still here.

27
00:01:48,020 --> 00:01:49,520
So this is a missing column.

28
00:01:49,730 --> 00:01:53,330
So this are the completed columns and this is the incomplete column.

29
00:01:53,750 --> 00:01:55,130
This is already in a very simple way.

30
00:01:56,520 --> 00:02:02,210
Now in the the problem, we know the neighbors are the top right bottom left.

31
00:02:02,480 --> 00:02:04,580
So I start here to say, Hey, you know what?

32
00:02:04,790 --> 00:02:10,010
My new rule is robust one my new column is as it is another one row minus one.

33
00:02:10,010 --> 00:02:10,820
No changes here.

34
00:02:11,120 --> 00:02:11,690
Another one.

35
00:02:11,690 --> 00:02:14,030
The row is fixed plus one another one.

36
00:02:14,030 --> 00:02:14,780
The rule is fix it.

37
00:02:14,780 --> 00:02:18,200
And currently this one, this note of resentment for neighbors.

38
00:02:18,680 --> 00:02:27,200
So now the original RNC is that is a is a from nood and their new new or new C is a new new this that

39
00:02:27,200 --> 00:02:29,870
would represent them my direct edge.

40
00:02:30,830 --> 00:02:36,740
So we go here after we after we completed them and say, add directed edge from this, from and from

41
00:02:36,740 --> 00:02:37,190
this to.

42
00:02:37,760 --> 00:02:44,330
So the moral of that is you, first of all, learn how to convert every cell IJI to a corresponding

43
00:02:44,330 --> 00:02:44,850
index.

44
00:02:45,500 --> 00:02:50,990
And the second thing you generate the four directions you converted to index, then you add an edge

45
00:02:50,990 --> 00:02:51,350
for it.

46
00:02:52,040 --> 00:02:58,520
The last thing here to be careful about the boundaries, the boundaries nodes will not have four indices.

47
00:02:58,730 --> 00:03:02,120
So one of them will have you like an inverted index here.

48
00:03:02,420 --> 00:03:04,880
So you need to verify the valid index or not.

49
00:03:05,240 --> 00:03:05,710
So have you.

50
00:03:05,810 --> 00:03:11,930
A very simple utility that takes the current to new row new column and the grid rows and columns.

51
00:03:12,320 --> 00:03:19,450
If the new row is less than zero or greater than the rules or the new columns is greater than zero or

52
00:03:19,890 --> 00:03:22,460
or the new Bekir.

53
00:03:24,960 --> 00:03:29,940
You have this position, you need to make sure it doesn't go outside here or here or go outside here

54
00:03:29,940 --> 00:03:33,210
or go outside here, so we have four directions for statements.

55
00:03:33,390 --> 00:03:37,440
We go right this one in a single line of code, but just for for clarity.

56
00:03:37,620 --> 00:03:44,610
This is merely how to reduce the problem of the image to the graph in the deepest section will learn

57
00:03:44,610 --> 00:03:50,070
how to write this code in a more elegant way, and we'll learn more stuff about that.
