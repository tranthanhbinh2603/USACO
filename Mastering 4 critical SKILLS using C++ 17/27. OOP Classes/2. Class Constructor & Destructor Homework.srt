0
1
00:00:00,870 --> 00:00:07,440
For the homework of the constructor and the destructor, we learned that the initializer list is the
1

2
00:00:07,440 --> 00:00:13,380
recommended way for constructors. Let's say that we have a class that have three variables A, B,
2

3
00:00:13,380 --> 00:00:20,820
C in order, but the initializer list used the order B, A, C. So the question here, will the constructor
3

4
00:00:20,820 --> 00:00:25,190
initialize them based on class order or initializer-list order?
4

5
00:00:25,650 --> 00:00:29,550
and what is the order of the destructor? In general,
5

6
00:00:29,700 --> 00:00:34,050
you are preferred to learn the answer to such a question by reading actually a book or reference,
6

7
00:00:34,170 --> 00:00:38,490
but I would like you to write a program that can tell us the answer to these two questions.
7

8
00:00:39,650 --> 00:00:48,380
You are to read this code and first of all, you are to tell us different ways how to finish the
8

9
00:00:49,310 --> 00:00:51,710
constructor of class C here.
9

10
00:00:51,890 --> 00:00:56,510
So we have here something with reference and something with const. How to finish this constructor? is there
10

11
00:00:56,510 --> 00:00:57,200
more than a way?
11

12
00:00:57,740 --> 00:01:02,690
And for the class A constructor, how many times would it be called and why do you think so?
12

13
00:01:02,960 --> 00:01:05,570
and give a tip for the coder who wrote this class.
13

14
00:01:07,450 --> 00:01:14,170
In this program, let's say that there is a code review for class D here, but the senior team leader
14

15
00:01:14,170 --> 00:01:19,420
told you that it's better to use const and  reference in the constructor objects this way or function
15

16
00:01:19,420 --> 00:01:19,720
calls.
16

17
00:01:20,080 --> 00:01:21,010
Why do you think so?
17

18
00:01:22,420 --> 00:01:28,630
Validations, figure out one bug in this code, fix it, and provide a tip for the coder who wrote such a
18

19
00:01:28,630 --> 00:01:33,280
code. Figure out another potential bug, and also provide a tip for the coder.
19

20
00:01:35,020 --> 00:01:42,610
In this time class, identify two changes that would make the code readable much more, identify also
20

21
00:01:42,610 --> 00:01:45,160
a bug and two code duplications.
21

22
00:01:45,550 --> 00:01:49,200
There is a missing input validation here for some potential user mistake,
22

23
00:01:49,210 --> 00:01:49,810
What is it?
23

24
00:01:52,590 --> 00:02:00,270
We would like to change our class to support this kind of fancy usage, you will see it a lot in practice.
24

25
00:02:00,270 --> 00:02:02,820
So what exactly to change the code to allow that.
25

26
00:02:04,840 --> 00:02:10,360
There is a code change request that came to this class and code change is something that happens
26

27
00:02:10,360 --> 00:02:12,120
all the time in industry.
27

28
00:02:12,430 --> 00:02:18,360
A good class and a good OOP project is a project that tries to minimize the code changes.
28

29
00:02:18,670 --> 00:02:24,310
One important difference between moving from normal programming to OOP: we think a lot
29

30
00:02:24,310 --> 00:02:27,250
about the code, the code design, the code quality.
30

31
00:02:27,380 --> 00:02:29,860
It isn't just about let's program the idea.
31

32
00:02:30,130 --> 00:02:35,990
It is more about the project, the functionality, the clarity, the readability, and so on.
32

33
00:02:36,190 --> 00:02:41,800
So anyway, the request is that this class has three variables, hours, minutes, seconds.
33

34
00:02:42,070 --> 00:02:49,130
We would like to change it to only have one variable integer total_seconds. Do necessary changes to support
34

35
00:02:49,130 --> 00:02:53,430
the new class. Identify one good coding tip
35

36
00:02:53,680 --> 00:02:58,930
if it was applied from the beginning in this project, the code change that we will do would be much less
36

37
00:02:58,930 --> 00:03:01,960
compared to the one that we will do for this class.
37

38
00:03:04,930 --> 00:03:06,460
This code is working well.
38

39
00:03:06,460 --> 00:03:07,750
I would like you to read it.
39

40
00:03:07,750 --> 00:03:12,220
We have some car specs here, like some functionalities of a car with some getters and setters,
40

41
00:03:12,460 --> 00:03:18,370
and this is an AutoTrader that gets a request to search for a query with the following matching and then
41

42
00:03:18,380 --> 00:03:24,070
it keeps going searching in the cars comparing one by one to check if we have such
42

43
00:03:24,070 --> 00:03:24,820
specs or not.
43

44
00:03:25,240 --> 00:03:28,900
This code is working well, but it is badly designed.
44

45
00:03:29,020 --> 00:03:31,480
As I said, starting from OOP,
45

46
00:03:31,510 --> 00:03:33,970
you start to think a lot about the design.
46

47
00:03:34,180 --> 00:03:35,410
How good is a design?
47

48
00:03:35,650 --> 00:03:42,820
One important thing in the homework in this course emphasizes designing skills.
48

49
00:03:43,030 --> 00:03:45,100
So think what is wrong in this design?
49

50
00:03:45,190 --> 00:03:45,880
Thinking deeply.
50

51
00:03:47,660 --> 00:03:49,260
What is the output of this program?
51

52
00:03:49,310 --> 00:03:53,270
This is one question, and there are two memory leaks in this program.
52

53
00:03:53,280 --> 00:03:54,080
Figure out them.
53

54
00:03:54,980 --> 00:03:55,490
That's it.
