0
1
00:00:01,140 --> 00:00:07,230
In modern C++, you can also easily delete a function from a class, you can read the copy
1

2
00:00:07,230 --> 00:00:13,380
constructor, the assignment operator, some normal member function, and later we will learn also how to prevent
2

3
00:00:13,470 --> 00:00:15,180
specific types of constructors.
3

4
00:00:16,050 --> 00:00:22,110
Now, if you would like to delete some constructor, let's say, you have
4

5
00:00:22,110 --> 00:00:27,900
here provided a class constructor for an employee with integer salary and name, but you want to avoid that
5

6
00:00:27,900 --> 00:00:31,490
someone is calling with double, and there is an implicit conversion happening here.
6

7
00:00:31,800 --> 00:00:37,230
You can come and say employee double salary, string name equals delete. When you see this keyword
7

8
00:00:37,230 --> 00:00:38,940
this way, it is going to 
8

9
00:00:39,000 --> 00:00:40,560
disallow this guy to be called.
9

10
00:00:40,590 --> 00:00:43,950
We can call with value 10, but you can't call with value
10

11
00:00:44,150 --> 00:00:46,860
10.5. Another case
11

12
00:00:46,860 --> 00:00:51,060
if you would like to delete the copy constructor, one might think, OK, let's put it in the private
12

13
00:00:51,060 --> 00:00:51,510
section,
13

14
00:00:51,510 --> 00:00:52,500
so it's now deleted.
14

15
00:00:52,890 --> 00:00:58,470
Now, you can just put here the keyword delete, which is explicitly showing your attention that
15

16
00:00:58,470 --> 00:00:59,480
this guy is deleted.
16

17
00:00:59,790 --> 00:01:05,130
So now if you have E1, you cannot now copy constructor to E2, it will be prevented.
17

18
00:01:06,050 --> 00:01:08,100
A third case is what we call the assignment operator.
18

19
00:01:08,480 --> 00:01:11,950
We didn't again study the assignment operator so far,
19

20
00:01:11,960 --> 00:01:14,030
we'll do that in the operator overloading. 
20

21
00:01:14,030 --> 00:01:19,970
You just come here and say write this statement, follow this structure for your class, and just say here
21

22
00:01:19,970 --> 00:01:20,520
equal delete.
22

23
00:01:21,080 --> 00:01:24,160
This is going to prevent an assignment statement,
23

24
00:01:24,410 --> 00:01:29,030
and as we said before, the difference between this one and this one that this one involve E1 and
24

25
00:01:29,180 --> 00:01:31,040
E2 with the creation of a new object,
25

26
00:01:31,340 --> 00:01:34,180
but this one involves just assigning, there is no creation here.
26

27
00:01:35,420 --> 00:01:37,280
You can also delete a specific function.
27

28
00:01:37,280 --> 00:01:43,280
Let's say you have a hello, integer X, and double X, you wanna it to be called with integer, but not with double.
28

29
00:01:43,400 --> 00:01:53,420
You can again put here the word delete so that the compiler doesn't allow this kind of call. Some tips,
29

30
00:01:53,660 --> 00:01:56,510
I would like you always, as a beginner
30

31
00:01:56,690 --> 00:02:00,970
that's all, to start with deleting your copy constructor and assignment operator.
31

32
00:02:01,400 --> 00:02:07,330
This will warn you whenever you are trying to do the copy constructor and assignment operator, and you didn't notice that.
32

33
00:02:08,300 --> 00:02:11,030
So it's just more for clarifying for you what's happening,
33

34
00:02:11,330 --> 00:02:18,410
and you need that when you have internal pointers inside your class. At least if you
34

35
00:02:18,410 --> 00:02:23,870
would like, you can provide the copy constructor, but you must disable the new assignment operator
35

36
00:02:24,110 --> 00:02:29,930
if you have internal pointers. Later, when we learn the operator overloading, you will know how to
36

37
00:02:29,930 --> 00:02:33,840
properly provide an assignment operator similar to the copy constructor.
37

38
00:02:34,400 --> 00:02:37,550
Remember, this is very important when you have internal pointers.
38

39
00:02:38,210 --> 00:02:38,750
That's it.
