0
1
00:00:01,530 --> 00:00:08,460
In this video, You will learn about one of the fundamental things in STL named iterators. Remember, we once had
1

2
00:00:08,460 --> 00:00:09,460
a queue like say here
2

3
00:00:09,480 --> 00:00:11,070
a queue initialized with five members.
3

4
00:00:11,070 --> 00:00:12,600
We want to print it from front,
4

5
00:00:12,640 --> 00:00:15,240
So 1, 2, 3, 4, 5 would go ahead.
5

6
00:00:15,240 --> 00:00:19,420
As long as it isn't empty, We will get a front and then remove it.
6

7
00:00:19,950 --> 00:00:21,570
So this is enough to print it.
7

8
00:00:21,600 --> 00:00:24,240
We had a simple issue here with that.
8

9
00:00:25,290 --> 00:00:27,690
After this iteration, The queue is empty.
9

10
00:00:28,050 --> 00:00:32,700
OK, As the queue is a reference this would make this guy is now empty.
10

11
00:00:32,710 --> 00:00:34,590
I just wanted to print it, OK?
11

12
00:00:34,680 --> 00:00:35,550
Here is a workaround.
12

13
00:00:35,820 --> 00:00:37,010
Don't just use add.
13

14
00:00:37,020 --> 00:00:41,540
So it is going to make a copy in memory but this is a lot of time-consuming.
14

15
00:00:41,550 --> 00:00:45,050
What if I just want to iterate on the content and print it.
15

16
00:00:45,270 --> 00:00:45,870
That's it.
16

17
00:00:46,350 --> 00:00:48,660
So here is where the iterators come to the scene.
17

18
00:00:49,440 --> 00:00:53,550
Iterator is an object, Mainly has a class
18

19
00:00:53,910 --> 00:00:56,590
but you can think of it like a position in an array.
19

20
00:00:56,970 --> 00:00:57,420
OK?
20

21
00:00:57,840 --> 00:01:02,460
Whenever we mean the class, We mean the struct like think of them as the same thing.
21

22
00:01:03,120 --> 00:01:07,980
So the interesting about iterators, It has some begin, Which is the beginning of the dequeue
22

23
00:01:07,980 --> 00:01:13,020
for example, and it has an end after the dequeue so think of it as a position.
23

24
00:01:13,020 --> 00:01:17,170
If you did position plus-plus, you move forward. Position minus-minus, You move backward.
24

25
00:01:17,610 --> 00:01:21,060
What if I would like to get the current element?  We use asterisk-position.
25

26
00:01:21,060 --> 00:01:23,010
Probably, This is the most new thing for you.
26

27
00:01:24,210 --> 00:01:28,730
If you have this asterisk position, You can start to change and print the value.
27

28
00:01:29,130 --> 00:01:32,150
So thinking about iterating on that, You start on the beginning,
28

29
00:01:32,160 --> 00:01:34,320
You move, You move, You move
29

30
00:01:34,320 --> 00:01:36,340
as long as you aren't equal to the end.
30

31
00:01:36,360 --> 00:01:40,190
Once you are equal to the end, You know that you are done with printing.
31

32
00:01:40,530 --> 00:01:41,720
Let's see some code for that.
32

33
00:01:42,120 --> 00:01:50,580
So we have here a function printing for the dequeue so the way that we get an iterator that can iterate
33

34
00:01:50,580 --> 00:01:51,740
on this dequeue is as following:
34

35
00:01:52,110 --> 00:01:57,390
You get your data structure like the dequeue integer here then you write colon, colon, iterator.
35

36
00:01:57,540 --> 00:02:05,920
So Iterator is a class inside this dequeue so now you can get an object for yourself. If you see
36

37
00:02:05,920 --> 00:02:11,200
q dot begin, It returns an object looking into the beginning of the array.
37

38
00:02:11,640 --> 00:02:13,110
Now I would like to print it.
38

39
00:02:13,230 --> 00:02:16,620
You say as follow: while iterator not equal
39

40
00:02:16,800 --> 00:02:24,870
queue dot end (Remember the end is after the array) so now iterator here we say plus-plus it, It keeps moving to the
40

41
00:02:24,870 --> 00:02:26,840
next element, to the next element, to the next element.
41

42
00:02:27,390 --> 00:02:31,990
The way to get the value of the current position is using asterisk-it.
42

43
00:02:32,070 --> 00:02:33,720
This is a new operator for you.
43

44
00:02:33,960 --> 00:02:36,270
It is named dereference operator.
44

45
00:02:36,270 --> 00:02:39,590
We will later learn more about references and dereferences.
45

46
00:02:39,930 --> 00:02:43,410
So this is how we mainly can iterate on that.
46

47
00:02:43,830 --> 00:02:45,790
...
47

48
00:02:46,170 --> 00:02:48,510
This is very fundamental for the remaining of the section.
48

49
00:02:48,750 --> 00:02:52,020
I would like you to read this code to make sure that you are familiar with it.
49

50
00:02:52,320 --> 00:02:54,780
We have queue dot begin is looking to the begin.
50

51
00:02:55,080 --> 00:03:00,480
We keep going till we are in the end. We can use plus-plus it to move forward and asterisk-it to
51

52
00:03:00,480 --> 00:03:01,710
get the current value.
52

53
00:03:01,950 --> 00:03:04,470
So this one is going to print to the five values.
53

54
00:03:06,020 --> 00:03:11,330
Now, let's do something a bit interesting, We can also print  the queue in the reverse order in a very
54

55
00:03:11,330 --> 00:03:11,840
similar way.
55

56
00:03:11,840 --> 00:03:15,260
So we would like to implement the print back for example.
56

57
00:03:15,680 --> 00:03:18,230
So the way to do that is another type of iterator.
57

58
00:03:18,230 --> 00:03:19,870
It's name the reverse iterator.
58

59
00:03:20,120 --> 00:03:26,900
So to get it, You say queue dot r begin this return a reverse iterator object, adds to it and you keep
59

60
00:03:26,900 --> 00:03:29,090
going till you queue dot r end.
60

61
00:03:29,480 --> 00:03:31,970
And again, asterisk-it to print
61

62
00:03:32,210 --> 00:03:40,190
but wait this is also plus-plus it, You might think OK, I'm stopping at the end, and then we are returning backward
62

63
00:03:40,430 --> 00:03:47,390
so my it minus-minus? No. You can think of it as the content of the queue has been reversed for you and you
63

64
00:03:47,390 --> 00:03:49,210
have again begin and end for it.
64

65
00:03:49,460 --> 00:03:55,660
So the way you print it is again you get the start in the end and you keep going till you reach
65

66
00:03:55,660 --> 00:03:58,050
its end.
66

67
00:03:58,100 --> 00:04:05,930
OK!. So practically speaking, Rbegin adds the last element, Rend is before the first element.
67

68
00:04:05,960 --> 00:04:08,000
So this is how the iterating is working.
68

69
00:04:08,390 --> 00:04:14,210
It is another way to write the same idea but more fancy way like using auto, You can just save your time
69

70
00:04:14,240 --> 00:04:17,900
instead of writing all of this big expression here in C++11.
70

71
00:04:18,620 --> 00:04:24,890
So you just write auto and just put all of them together here with the for loop, It just making your life much
71

72
00:04:24,890 --> 00:04:25,290
nicer.
72

73
00:04:25,670 --> 00:04:27,500
Again, Make sure you are familiar with that.
73

74
00:04:29,330 --> 00:04:34,920
An interesting thing here about the iterator is you can do some arithmetic on it.
74

75
00:04:35,120 --> 00:04:35,960
What does this mean?
75

76
00:04:36,170 --> 00:04:42,980
So think of it again like a position. Here we say q dot begin is looking to the first element.
76

77
00:04:43,460 --> 00:04:46,900
If I added plus 3, I'm jumping to the fourth element.
77

78
00:04:47,210 --> 00:04:49,850
So now this iterator is looking to the forth element.
78

79
00:04:49,850 --> 00:04:51,230
If we printed it, We get four.
79

80
00:04:51,860 --> 00:04:57,290
Now, I can also say iterator minus-minus. If you did an asterisk here 
80

81
00:04:57,320 --> 00:05:00,380
(Remember the rules of the minus-minus operator this way,
81

82
00:05:00,380 --> 00:05:05,810
The postfix) then it is going to print the current value then move one step backward.
82

83
00:05:06,050 --> 00:05:11,480
So asterisk-it minus-minus (We are at the four), we're going to print it then we're going to move to the backward
83

84
00:05:11,600 --> 00:05:12,140
for printing
84

85
00:05:12,140 --> 00:05:17,870
The current iterator or current position, We have three. Try to think all the time like we are dealing
85

86
00:05:17,870 --> 00:05:24,020
with an array and it is more of like a position on it. Here we say minus-minus iterator 
86

87
00:05:24,050 --> 00:05:28,310
so we are jumping one step to the back first, then we are printing.
87

88
00:05:28,500 --> 00:05:30,140
So this is now 2. Again,
88

89
00:05:30,140 --> 00:05:35,150
If we printed here we are at the 2. We can also say like iterator plus three,
89

90
00:05:35,150 --> 00:05:38,720
If this is the position then position plus three is now at the fifth.
90

91
00:05:38,720 --> 00:05:40,010
We are at second. With three, We are at the fifth.
91

92
00:05:41,060 --> 00:05:43,650
So with asterisk-it, We can just directly get the value.
92

93
00:05:43,970 --> 00:05:45,560
So again, Think of that.
93

94
00:05:45,680 --> 00:05:51,710
Think of asterisk like you are accessing using an array and then you are saying array of current position plus
94

95
00:05:51,890 --> 00:05:54,820
3. We can also say position plus equals 3,
95

96
00:05:54,830 --> 00:06:00,430
This is jumping 3 positions, asterisk-it, and so on. You can change the whole value of the vector
96

97
00:06:00,440 --> 00:06:02,700
by the way, You can start on the beginning till the end,
97

98
00:06:02,720 --> 00:06:03,260
Keep going
98

99
00:06:03,260 --> 00:06:05,020
and asterisk it equal ten.
99

100
00:06:05,360 --> 00:06:09,540
So again, Think of that as an asterisk as like accessing the array in the current moment.
100

101
00:06:09,830 --> 00:06:12,590
So this is how we can do some arithmetic with iterators.
101

102
00:06:13,670 --> 00:06:15,470
There's also another interesting thing,
102

103
00:06:15,530 --> 00:06:21,440
The const iterator. the const iterator is the same concept as the main iterator but you write cbegin,
103

104
00:06:21,440 --> 00:06:28,970
cend and it is const iterator. the only difference here is that you cannot change the iterator
104

105
00:06:28,970 --> 00:06:30,770
during the iteration.
105

106
00:06:31,700 --> 00:06:33,410
It's same performance, same everything,
106

107
00:06:33,410 --> 00:06:34,550
You just can not change it.
107

108
00:06:34,850 --> 00:06:37,430
It is more if you are communicating intention to others
108

109
00:06:37,430 --> 00:06:42,350
like there is no intention to change the content of this dequeue, for example.
109

110
00:06:45,880 --> 00:06:53,740
In fact, we're here seeing the dequeue, You can have iterators on many, many data structures.
110

111
00:06:53,890 --> 00:06:58,830
some of them you cannot, like the stack, queue, and priority queue. If you have to print them, They will get empty.
111

112
00:06:59,170 --> 00:07:00,660
But most of the other things they are
112

113
00:07:00,700 --> 00:07:04,180
OK. So here is an example of printing string.
113

114
00:07:04,210 --> 00:07:10,270
We have a string function that counts the number of lower characters so I can again make an iterator
114

115
00:07:10,270 --> 00:07:11,250
in the beginning of the string,
115

116
00:07:11,270 --> 00:07:12,340
Keep going till the end.
116

117
00:07:12,880 --> 00:07:19,440
Asterisk-it here would be an index in the str so it would be now a character. you can count plus
117

118
00:07:19,510 --> 00:07:21,100
equal is lower or not
118

119
00:07:22,060 --> 00:07:27,720
then this will tell us the number of lower characters. Remember, is-lower returns zero or a big value
119

120
00:07:27,970 --> 00:07:33,080
so it's better to put here greater than zero to make a comparison.
120

121
00:07:34,330 --> 00:07:36,370
The auto it here is of type string,
121

122
00:07:36,370 --> 00:07:37,900
Colon, colon iterator.
122

123
00:07:39,690 --> 00:07:45,420
In the next videos, We will learn more about other data structures and they all support the iterators
123

124
00:07:46,740 --> 00:07:52,590
You will see in the next videos operations on these containers, for example, We will start to erase elements
124

125
00:07:52,890 --> 00:07:57,840
or insert a bunch of elements using iterators, We will see algorithms that take the beginning and the end
125

126
00:07:57,840 --> 00:07:58,620
of iterators.
126

127
00:07:58,860 --> 00:08:04,560
So more when you come to study, You will see that you can define a vector of integer iterator, set of
127

128
00:08:04,560 --> 00:08:08,720
integer iterator, map of integer and string iterator, and so on.
128

129
00:08:08,940 --> 00:08:14,160
So there are more iterators that are coming in the next videos. That's it.
