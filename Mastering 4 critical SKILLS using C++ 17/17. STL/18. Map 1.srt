0
1
00:00:00,590 --> 00:00:04,930
The map is one of the very useful and interesting data structures.
1

2
00:00:05,370 --> 00:00:12,360
So remember, when you would like to access an array, we access with some index like an index of zero,  index of
2

3
00:00:12,360 --> 00:00:13,920
1, index of 2 and so on, in the array.
3

4
00:00:14,520 --> 00:00:17,970
What if I would like to access the index with something more complex?
4

5
00:00:18,120 --> 00:00:21,980
What if I would like to access with double, with string, and so on.
5

6
00:00:22,260 --> 00:00:25,350
This is where a map would come to help.
6

7
00:00:25,680 --> 00:00:29,520
So a map of string and integer is how we define a map.
7

8
00:00:29,730 --> 00:00:33,120
It looks like very close to the pair definition.
8

9
00:00:33,420 --> 00:00:40,250
You define a map and you say it would be a map from string and integer here.
9

10
00:00:40,530 --> 00:00:46,080
So the string here means this is the key, and int this is the value. In an array,
10

11
00:00:46,290 --> 00:00:47,970
the key is typically an index,
11

12
00:00:47,970 --> 00:00:49,110
The value could be whatever.
12

13
00:00:49,110 --> 00:00:53,750
If you define double numbers array, then you can access any value here.
13

14
00:00:53,760 --> 00:00:56,790
So it would be here like double, but this is more of the index.
14

15
00:00:57,390 --> 00:00:58,770
Now, let's access the map.
15

16
00:00:58,770 --> 00:01:01,740
You start to access a very normal array.
16

17
00:01:02,010 --> 00:01:05,480
You say a map of the index equals 10.
17

18
00:01:05,760 --> 00:01:08,940
In normal case, you say array of zero, array of 1, array of  2,
18

19
00:01:09,180 --> 00:01:14,700
but here we say that the key would be of type string and then you provide different keys and assign
19

20
00:01:14,700 --> 00:01:15,310
different values.
20

21
00:01:15,630 --> 00:01:17,730
So it looks like in reality something like that.
21

22
00:01:17,940 --> 00:01:24,510
The key can be like key3, key1, key4, key2, and you start to put your own values.
22

23
00:01:24,960 --> 00:01:27,710
So this is how we really a map is defined.
23

24
00:01:27,720 --> 00:01:31,870
So you can think of it as a generalization to the array.
24

25
00:01:32,240 --> 00:01:33,360
Let's print the map.
25

26
00:01:34,580 --> 00:01:40,940
So one of the things to notice here when we go to print it, it would print to Mustafa-40, Saad-20, 
26

27
00:01:40,940 --> 00:01:41,760
Mustafa-30.
27

28
00:01:41,960 --> 00:01:42,710
So what was input here?
28

29
00:01:43,370 --> 00:01:47,530
We have Mustafa-10, then saad, then Mustafa again with 30.
29

30
00:01:47,900 --> 00:01:49,890
So think of it as an array.
30

31
00:01:49,910 --> 00:01:53,620
So the first array value was 10 then we override with 30,
31

32
00:01:53,930 --> 00:01:58,750
while here another value Mustafa with M capital as Mustafa small and capital are different things.
32

33
00:01:59,000 --> 00:02:05,120
So we have two different entries for it. To some extent also
33

34
00:02:05,270 --> 00:02:06,620
but we don't count on that,
34

35
00:02:06,860 --> 00:02:07,820
they might be
35

36
00:02:07,970 --> 00:02:09,710
looks like they are ordered here.
36

37
00:02:12,290 --> 00:02:13,820
What else?
37

38
00:02:15,530 --> 00:02:21,440
Yeah, let's check out the printing function. We are passing here the map with the reference,
38

39
00:02:21,450 --> 00:02:23,930
so we are looking to the same copy in the memory.
39

40
00:02:24,320 --> 00:02:26,090
Const means we will not change it,
40

41
00:02:26,090 --> 00:02:31,250
we promised to do that. So we can iterate it like just normal iterating,
41

42
00:02:31,550 --> 00:02:34,950
but the question here, what is the single item if we are iterating
42

43
00:02:35,540 --> 00:02:39,650
on a vector, on a queue ( we know that we are iterating with integers ),
43

44
00:02:39,650 --> 00:02:41,090
but what are we iterating here?
44

45
00:02:41,450 --> 00:02:45,980
The map internally has a pair for every item that it can provide it with you.
45

46
00:02:46,430 --> 00:02:50,770
So a map of a string of int will have a pair of string and int as an item.
46

47
00:02:51,080 --> 00:02:52,970
So this is how you iterate on it.
47

48
00:02:53,180 --> 00:03:00,470
You see item dot first, item dot second. The dot first give you the key and the dot second give you the value.
48

49
00:03:01,010 --> 00:03:04,010
In a similar way to the set, we can find and we can erase.
49

50
00:03:04,010 --> 00:03:11,540
So I say in here auto it iterator dot find saad. If iterator is not equal to end, we know it exists, then we can now
50

51
00:03:11,540 --> 00:03:14,600
remove it and we can print again.
51

52
00:03:14,930 --> 00:03:18,470
So be careful from printing inside the iterator.
52

53
00:03:18,770 --> 00:03:26,220
So this is the way how to find and how to erase a map. Let's go a little more complex.
53

54
00:03:26,270 --> 00:03:32,080
Now, what if we would like to define, say, a map from a character to a vector of integer?
54

55
00:03:32,450 --> 00:03:36,080
OK, so I like you to think of it as a very general generalization.
55

56
00:03:36,380 --> 00:03:38,500
You are mapping from something to something.
56

57
00:03:38,750 --> 00:03:41,660
So here the form is a character and the to is a vector.
57

58
00:03:41,660 --> 00:03:44,620
It can even be mapped form a vector to character,
58

59
00:03:44,640 --> 00:03:47,510
this is OK too. let's define a single vector.
59

60
00:03:47,510 --> 00:03:49,280
We pushed back 3 numbers, 1, 2, 3.
60

61
00:03:49,580 --> 00:03:56,960
Then I said here that the map from the character A is a vector X, but here is important to be careful
61

62
00:03:56,960 --> 00:04:00,440
about something if I say now X dot push back 4,
62

63
00:04:01,510 --> 00:04:06,940
and try to print, let's access the vector here in the map and get the size, you will notice the size
63

64
00:04:06,940 --> 00:04:11,550
of the vector is 3, the old values, but the X is 4.
64

65
00:04:11,800 --> 00:04:18,240
So actually, there are two copies in the memory, this X vector and this one but it is inside here now.
65

66
00:04:18,430 --> 00:04:22,940
So if you like to change more, Do changing here, at least this one safe way.
66

67
00:04:23,510 --> 00:04:27,670
Now, let's get the my data A in a vector here.
67

68
00:04:28,120 --> 00:04:30,050
This is again, a third copy.
68

69
00:04:30,070 --> 00:04:35,860
So now you have three copies in the vector itself. what if I would like to get the vector here and access it directly
69

70
00:04:35,860 --> 00:04:39,040
and it's still in the same in the memory, then put here the reference.
70

71
00:04:39,190 --> 00:04:43,360
So the reference means I'm pointing in the memory to this one directly.
71

72
00:04:43,510 --> 00:04:48,190
So if you change it x3 only, it will change the map.
72

73
00:04:48,200 --> 00:04:51,760
The other things like the X and X2 will not change the map.
73

74
00:04:52,330 --> 00:04:55,870
So be careful with complicated data structures. that's it.
