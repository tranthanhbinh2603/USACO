0
1
00:00:00,690 --> 00:00:08,400
Let's continue practicing. This task is easy in a slow way, but a bit hard when it comes to making it
1

2
00:00:08,400 --> 00:00:09,150
more efficient.
2

3
00:00:09,720 --> 00:00:10,830
The task as following:
3

4
00:00:10,980 --> 00:00:14,980
Let's say we have an array as given like that, and some number K with three.
4

5
00:00:15,360 --> 00:00:19,620
So for K of 3, let's say you are having these first three numbers.
5

6
00:00:20,130 --> 00:00:22,440
Now think of it like a fixed window, a fixed
6

7
00:00:22,440 --> 00:00:23,170
start and end.
7

8
00:00:23,310 --> 00:00:25,240
Now move this window one step to the right.
8

9
00:00:25,590 --> 00:00:27,650
Now it's focusing on these next 3 numbers.
9

10
00:00:27,930 --> 00:00:32,160
Move it to the right, the next three numbers, move it to the right, next three numbers and so on.
10

11
00:00:32,700 --> 00:00:34,440
This is for every time get the maximum.
11

12
00:00:34,590 --> 00:00:37,800
So in the first time, these three numbers have this maximum number.
12

13
00:00:38,130 --> 00:00:40,330
The second number is also the maximum between them is
13

14
00:00:40,410 --> 00:00:46,510
3. The third case, the maximum between -1, -3, 5 is 5, and so on.
14

15
00:00:46,530 --> 00:00:49,830
Keep going until you reach the last three numbers here, which have a maximum of 7.
15

16
00:00:50,250 --> 00:00:55,090
Now, find the maximum between all of these numbers, which is 7.
16

17
00:00:55,530 --> 00:00:58,790
So what we're moving here, we call it sliding window,
17

18
00:00:58,840 --> 00:00:59,850
It's a fixed size,
18

19
00:00:59,850 --> 00:01:02,330
So the size of this sliding window is always a three,
19

20
00:01:02,670 --> 00:01:06,670
and as I said, the task here is to find the maximum among all of them.
20

21
00:01:06,990 --> 00:01:12,270
I would like to give yourself a few minutes to think in a solution and then try to think in a faster
21

22
00:01:12,270 --> 00:01:12,750
solution.
22

23
00:01:14,620 --> 00:01:21,250
We can easily do two nested loops to identify the answer, but if we would like to make it a bit fast,
23

24
00:01:21,790 --> 00:01:25,900
it takes more thinking. We're going to show a solution with the multi-set.
24

25
00:01:26,290 --> 00:01:31,150
However, I'm going to attach an optional reading for a faster solution using a dequeue,
25

26
00:01:32,450 --> 00:01:34,290
but it's a bit harder than the last one.
26

27
00:01:34,820 --> 00:01:39,550
So here is the logic, we are going to simulate something like what we see here as following:
27

28
00:01:39,860 --> 00:01:46,010
This is a vector input and K. We're going to create a multiset, a multiset here,
28

29
00:01:46,340 --> 00:01:50,210
and we're going to insert the first K elements in the multiset.
29

30
00:01:50,390 --> 00:01:53,100
So in this case,we will insert 1, 3, -1.
30

31
00:01:53,630 --> 00:02:00,350
Now, I'm inserting them with the negative because this will make the multiset just sorting from 
31

32
00:02:01,040 --> 00:02:02,300
the big to the small.
32

33
00:02:02,330 --> 00:02:05,980
There are different ways to handle the ordering, but this is an easier way.
33

34
00:02:06,350 --> 00:02:10,730
So we are always inserting it with the minus and getting the value with the minus.
34

35
00:02:11,240 --> 00:02:16,130
Anyway, when we entered the values with the minus, just think like we are getting it with the maximum
35

36
00:02:16,130 --> 00:02:16,450
first.
36

37
00:02:16,760 --> 00:02:17,960
So, the dot begin here
37

38
00:02:18,200 --> 00:02:21,990
when we get it asterisk and multiply back with negative, It is going to be the three.
38

39
00:02:22,310 --> 00:02:27,570
So internally it would be like the reverse of 3, 1, -1.
39

40
00:02:27,800 --> 00:02:30,740
So we are getting the maximum now, which is just 3.
40

41
00:02:31,190 --> 00:02:33,000
So now we have the maximum of the first window.
41

42
00:02:33,320 --> 00:02:35,160
Now, we would like to move to the second window.
42

43
00:02:35,360 --> 00:02:36,110
Here is the trick,
43

44
00:02:36,530 --> 00:02:40,550
we are going to find the first element and just remove it,
44

45
00:02:40,940 --> 00:02:46,400
and we are going to get the current element and just added. This easy way using only 2 steps.
45

46
00:02:46,580 --> 00:02:50,460
You have the new window and it is ready to get the maximum out of it.
46

47
00:02:50,750 --> 00:02:54,580
So here is what's going to happen,...
47

48
00:02:54,590 --> 00:02:58,070
We are going to start from K because we are done with inserting the first key elements.
48

49
00:02:58,430 --> 00:03:00,910
So starting from K which would be this guy.
49

50
00:03:01,280 --> 00:03:03,910
So here in line 19, we inserted it,
50

51
00:03:04,340 --> 00:03:11,840
but in the line before it, we find the first element in the map, in the multiset
51

52
00:03:11,840 --> 00:03:16,460
should be, which is now 1, we find it from the array input and we remove it.
52

53
00:03:16,820 --> 00:03:19,880
So we find it then remove it. Once we are done with that,
53

54
00:03:22,870 --> 00:03:30,760
we are to get the top of the multiset, OK, then we put it, by the way, we want you
54

55
00:03:30,760 --> 00:03:37,460
to return the values of all of the sliding windows, not just the maximum.
55

56
00:03:38,200 --> 00:03:39,850
So, again, the logic was as following:
56

57
00:03:40,030 --> 00:03:45,250
If you have in the multiset, these 3 numbers, you can remove the first one, then you add the
57

58
00:03:45,250 --> 00:03:46,570
current one and that's it.
58

59
00:03:46,870 --> 00:03:49,720
Then remove the first one and add the next one,
59

60
00:03:49,720 --> 00:03:50,260
and that's it.
60

61
00:03:50,440 --> 00:03:52,720
Then remove the first one and add the next one.
61

62
00:03:52,720 --> 00:03:53,260
and that's it.
62

63
00:03:53,480 --> 00:03:54,070
This way,
63

64
00:03:54,220 --> 00:04:01,390
The multiset in every iteration, using only a couple of operations, has the updated set of numbers,
64

65
00:04:01,570 --> 00:04:06,520
so we can just get the beginning of it and multiply with minus because we put them with negative values
65

66
00:04:06,790 --> 00:04:09,190
here to get the maximum value.
66

67
00:04:09,370 --> 00:04:12,810
If this is a bit hard for you, this is OK. That's it.
