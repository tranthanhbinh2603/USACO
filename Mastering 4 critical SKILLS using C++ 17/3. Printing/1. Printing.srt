0
1
00:00:01,230 --> 00:00:03,790
In this video, we will learn more about printing.
1

2
00:00:05,850 --> 00:00:12,870
Remember, there is a life cycle that typically involves writing code, compiling it, running it to get
2

3
00:00:12,870 --> 00:00:14,250
some results.
3

4
00:00:14,400 --> 00:00:20,490
And also remember that we say that, there is a compiler that double checks if you have any compiler errors or not.
4

5
00:00:20,490 --> 00:00:25,440
If there are any, it generates the compiler errors and stop at 
5

6
00:00:25,440 --> 00:00:29,850
this stage. There are actually two types of errors,
6

7
00:00:30,180 --> 00:00:32,250
What we call compiler errors, as you know now.
7

8
00:00:32,250 --> 00:00:37,080
It should be when you have a problem with the syntax rules of the compiling, of the language.
8

9
00:00:37,080 --> 00:00:37,460
itself.
9

10
00:00:38,010 --> 00:00:40,440
Another issue is (run-time) error.
10

11
00:00:40,770 --> 00:00:44,220
Run-time error means, the syntax is very good
11

12
00:00:44,640 --> 00:00:46,490
and we are running now the program
12

13
00:00:46,830 --> 00:00:51,480
and somewhere in the middle of the program, the program crashes during running the program.
13

14
00:00:51,900 --> 00:00:59,580
As an example for that, let's say that you run a program that divided by zero, which is totally wrong
14

15
00:00:59,580 --> 00:01:01,110
and will cause the program to crash.
15

16
00:01:01,440 --> 00:01:05,360
So compiler error before running, run-time error during running.
16

17
00:01:06,720 --> 00:01:12,960
So the overall of the cycle, your code goes to the compiler, it double checks if you have any compiling errors.
17

18
00:01:12,960 --> 00:01:14,940
If nothing, it generates a program,
18

19
00:01:14,940 --> 00:01:19,650
we run the program and if any problem in the middle, it's must be a run-time error.
19

20
00:01:19,920 --> 00:01:21,060
So compiler error, compiler.
20

21
00:01:21,060 --> 00:01:22,710
runtime error during running.
21

22
00:01:24,420 --> 00:01:26,270
So let's now go more in writing.
22

23
00:01:26,280 --> 00:01:31,680
Let's say that I want to write the following three statements, "I am Mostafa", "I Was born in Giza",
23

24
00:01:31,700 --> 00:01:33,450
"I graduated from Cairo University".
24

25
00:01:34,080 --> 00:01:37,170
When you double check the console, you will notice an issue.
25

26
00:01:37,500 --> 00:01:43,650
They are all printed in one line, but we actually want them to be on separate lines.
26

27
00:01:44,100 --> 00:01:46,010
There are two ways to solve this issue.
27

28
00:01:46,320 --> 00:01:48,830
One of them could be 'endl'  and another could '\n'
28

29
00:01:49,830 --> 00:01:50,820
Let's see how to do that
29

30
00:01:53,700 --> 00:01:54,110
Here,
30

31
00:01:54,550 --> 00:01:57,180
Let's do something we call (code-tracing).
31

32
00:01:58,080 --> 00:02:04,890
When the compiler sees 'cout', it knows it's going to print a message, it is expecting 2 less than '<<'
32

33
00:02:05,650 --> 00:02:07,770
no space among them, then a message.
33

34
00:02:07,920 --> 00:02:09,150
Now, the compiler printed
34

35
00:02:09,330 --> 00:02:16,200
"I am Mostafa", semicolon ';' means the end of a message. In the second line it found itself printing but something
35

36
00:02:16,200 --> 00:02:21,510
called 'endl', 'endl' is an abbreviation to "end line", it means to go one line down.
36

37
00:02:22,170 --> 00:02:27,410
Once we go down we have another message that say, "I was born in Giza", It writes it
37

38
00:02:27,420 --> 00:02:28,560
"I was born in Giza"
38

39
00:02:28,950 --> 00:02:32,250
However there is here something called '\n', again
39

40
00:02:32,250 --> 00:02:39,420
the compiler understands that as we are going to one line down here, finally there is a new message,
40

41
00:02:39,420 --> 00:02:39,690
here,
41

42
00:02:39,690 --> 00:02:48,490
"I graduated from Cairo university" and again 'endl', So the way to go to one new line is either you say 'endl'
42

43
00:02:48,510 --> 00:02:52,770
which means "end line", or you put '\n', which is part of the message.
43

44
00:02:53,040 --> 00:02:59,130
As you notice, the '\n' is very convenient because you just append it to your message. Let's write
44

45
00:02:59,130 --> 00:03:00,480
this time in a different way.
45

46
00:03:02,040 --> 00:03:11,340
I now wrote here more printing using the '<<', by the way we call it
46

47
00:03:11,340 --> 00:03:12,420
an extraction operator.
47

48
00:03:12,600 --> 00:03:13,820
Extraction operator.
48

49
00:03:14,250 --> 00:03:22,200
So you see here we say 'cout' and then we say extraction operator "I am" and it's going to print "I am",
49

50
00:03:22,200 --> 00:03:26,130
it finds  another extraction operator with a message "Mustafah".
50

51
00:03:26,130 --> 00:03:31,950
So it prints "Mostafa", then another extraction operator with 'endl' so it goes to a new line.
51

52
00:03:32,310 --> 00:03:39,390
Then another message, "I was born in Giza\n" and it goes to a new line, and again now here notice the statement is done
52

53
00:03:39,390 --> 00:03:42,300
so, in this is statement we printed,
53

54
00:03:42,300 --> 00:03:48,330
One, two, three, four, we printed four items, and again we are doing the same here and then here.
54

55
00:03:48,540 --> 00:03:55,860
So you notice here that the trick here we can have more messages or more outputs attached to the same.
55

56
00:03:56,070 --> 00:03:56,430
'cout' statement.
56

57
00:03:58,620 --> 00:04:00,540
OK, let's go deeper.
57

58
00:04:00,540 --> 00:04:04,980
We now, put all of them on the same line, all of them together.
58

59
00:04:04,990 --> 00:04:06,360
So how many messages here?
59

60
00:04:06,720 --> 00:04:08,220
How many printings that happened?
60

61
00:04:08,370 --> 00:04:12,470
One, two, three, four, five, six.
61

62
00:04:12,480 --> 00:04:19,620
So we put six messages on the same line. OK, this is the same as the code from the last time.
62

63
00:04:19,620 --> 00:04:20,400
Exactly
63

64
00:04:20,610 --> 00:04:23,130
We just put it on on several lines.
64

65
00:04:23,400 --> 00:04:30,090
Notice there's only a single semicolon here so you can keep writing on different lines of code to make
65

66
00:04:30,090 --> 00:04:35,910
it like more, say, visually readable, but using one semicolon here in the end.
66

67
00:04:36,330 --> 00:04:42,330
So we saw cases, we were writing them on different statements with different semicolons.
67

68
00:04:42,510 --> 00:04:49,800
And now as a one big statement with one semicolon. And even more, you can have them here as one big message
68

69
00:04:49,980 --> 00:04:53,910
with more '\n'. How many printings happened here?
69

70
00:04:54,300 --> 00:04:55,440
Only one printing.
70

71
00:04:55,770 --> 00:04:59,730
OK, so every extraction operator, every '<<'
71

72
00:04:59,800 --> 00:05:05,610
is going to print one thing, and here, it is one big message with several lines.
72

73
00:05:07,270 --> 00:05:07,820
Your turn.
73

74
00:05:08,220 --> 00:05:15,430
I would like you to start using my provided codes, play with them, and after that, try to remove
74

75
00:05:15,430 --> 00:05:18,000
the whole code and start writing it from scratch.
75

76
00:05:18,070 --> 00:05:19,960
You probably will do a lot of mistakes.
76

77
00:05:19,960 --> 00:05:23,430
Start to compare my code with your code, and learn from that.
77

78
00:05:23,950 --> 00:05:24,580
That's it! :)
