0
1
00:00:01,500 --> 00:00:09,000
Throughout the whole course, we depended on the IDE like eclipse and code blocks to compile, link,
1

2
00:00:09,000 --> 00:00:15,810
and run our own code. Today and using our current  background, we will see how we can also use the
2

3
00:00:15,810 --> 00:00:18,400
command line to do such a process.
3

4
00:00:18,780 --> 00:00:26,450
It happens sometimes in your development that you don't have an access to an IDE.
4

5
00:00:26,820 --> 00:00:32,910
For example, when we work remotely on other servers, then the only way to compile and run things
5

6
00:00:33,180 --> 00:00:34,860
is to do that from the command line.
6

7
00:00:35,250 --> 00:00:39,870
The command line is an important skill for any software engineer.
7

8
00:00:40,660 --> 00:00:47,490
As we know so far, there is actually some compilation step, some linking step, and then we
8

9
00:00:47,490 --> 00:00:49,470
double click or we execute something.
9

10
00:00:49,650 --> 00:00:56,310
So we overall have three kinds of commands to give to some program to run them for us.
10

11
00:00:56,310 --> 00:00:58,210
IDE was doing that for us.
11

12
00:00:58,560 --> 00:01:05,010
So what does the IDE do behind the scene? it just does them. There is behind the scene when you go and
12

13
00:01:05,010 --> 00:01:13,170
install the GCC or the g++. The GCC is a program that we use to compile and link the C files for C
13

14
00:01:13,320 --> 00:01:18,120
programming language and the g++ is the one that we run for the C++ compilation 
14

15
00:01:18,150 --> 00:01:27,000
like say you are using some g++ for, let's say, version five, you can also
15

16
00:01:27,030 --> 00:01:32,100
download another one, let's say g++ nine or so, to do the compilation for you.
16

17
00:01:33,590 --> 00:01:41,330
So now let's open some terminal. If you don't know how to open the terminal, just Google it, how
17

18
00:01:41,330 --> 00:01:47,620
to do it for your operating system, which is eventually some black screen. Try first to run the word
18

19
00:01:47,660 --> 00:01:48,550
g++.
19

20
00:01:49,070 --> 00:01:56,450
If you see good outputs, like if it doesn't say I don't recognize what is g++, then
20

21
00:01:56,450 --> 00:01:58,550
you can see the g++ program.
21

22
00:01:59,000 --> 00:02:03,760
If you wrote g++ dash-dash help, it is going to give you a bunch of options.
22

23
00:02:04,130 --> 00:02:08,630
One of them is the dash-dash version which is going to show the version of your compiler.
23

24
00:02:08,630 --> 00:02:16,580
Please, run this command. Two interesting commands among the big list the dash c,
24

25
00:02:16,580 --> 00:02:22,550
and dash O, the two options. The dash-c is going to compile and assemble your code.
25

26
00:02:23,010 --> 00:02:28,070
The dash_O is going to tell it the path for some output file.
26

27
00:02:28,490 --> 00:02:31,580
Now, let's try to do the compiling, the linking, and the running.
27

28
00:02:32,120 --> 00:02:40,610
If you'd like to compile your file, you need to do a compilation command, one for each CPP file.
28

29
00:02:41,060 --> 00:02:41,950
As an example,
29

30
00:02:41,960 --> 00:02:47,390
remember, in the last time we have four CPP files, then I would like to give four commands,
30

31
00:02:47,660 --> 00:02:50,440
each one of them is going to compile my file.
31

32
00:02:50,810 --> 00:02:53,360
So we see here the command is g++,
32

33
00:02:53,690 --> 00:03:00,110
or maybe if you have another version, you say g++ dash nine or some version, then you give it dash c,
33

34
00:03:00,140 --> 00:03:03,820
which means we are going to compile and assemble our code.
34

35
00:03:04,310 --> 00:03:08,680
You are going to give it dash_O and then some path for the output file.
35

36
00:03:09,080 --> 00:03:12,260
So I'm saying here, dash_O, my fun2_dot_O.
36

37
00:03:12,260 --> 00:03:18,890
So it means please locally here, give me a generated file which is my fun2_dot_O, and then you
37

38
00:03:18,890 --> 00:03:23,000
are giving here the name of the CPP file that is going to be compiled.
38

39
00:03:25,030 --> 00:03:32,710
Now, I compiled Fun2, then I compiled Fun1 then, I compiled Fun3, and then I compiled
39

40
00:03:32,710 --> 00:03:37,900
test dot CPP, but we here in the test dot CPP, I told him, please make the name Mostafa Test dot O.
40

41
00:03:37,930 --> 00:03:39,470
It doesn't have to be test dot O.
41

42
00:03:39,910 --> 00:03:41,230
This is the output file.
42

43
00:03:41,230 --> 00:03:41,950
It's up to you
43

44
00:03:41,950 --> 00:03:43,030
what is the file name?
44

45
00:03:43,720 --> 00:03:48,430
Once we did these commands, we are going to generate these dot O files for these
45

46
00:03:48,430 --> 00:03:49,860
dot CPP files.
46

47
00:03:50,230 --> 00:03:54,070
This way we are done with the compilation step. In the second step,
47

48
00:03:54,070 --> 00:03:55,540
it comes the linking step,
48

49
00:03:56,080 --> 00:03:59,590
and in this time, we say also again g++
49

50
00:03:59,920 --> 00:04:02,440
but this time we do without write dash C, we directly 
50

51
00:04:02,470 --> 00:04:04,660
say dash O. Again, O for the output file.
51

52
00:04:05,050 --> 00:04:09,850
So this time we say, hey, we would like to output, say if you are windows, you say output program
52

53
00:04:09,850 --> 00:04:10,570
dot exe.
53

54
00:04:11,320 --> 00:04:16,590
After that, you are going to provide a list of all dot_O files that we will need
54

55
00:04:16,870 --> 00:04:20,970
like I said here Mostafa_test_dot_O, Fun3_O, MyFun2_O, MyFun1_O,
55

56
00:04:20,980 --> 00:04:28,690
and once you did this compilation, you get a program dot_exe file because
56

57
00:04:28,690 --> 00:04:29,970
this is the name that we selected.
57

58
00:04:30,550 --> 00:04:32,980
Now, go to your program dot_exe file and run it,
58

59
00:04:32,990 --> 00:04:34,130
You are going to get 30.
59

60
00:04:34,750 --> 00:04:35,680
Here is a question,
60

61
00:04:36,010 --> 00:04:44,830
what if I just give it most_test_dot_O and myFun_dot_O only? It is going to fail to link because the
61

62
00:04:44,830 --> 00:04:51,880
Mostafa_dot_test is needing something in Fun1_dot_O. It is searching
62

63
00:04:51,880 --> 00:04:53,460
for the implementation of some things.
63

64
00:04:53,980 --> 00:04:59,320
That's why you need here to provide a complete list of all the dot_O files that you need. With these
64

65
00:04:59,340 --> 00:05:00,280
three commands,
65

66
00:05:00,460 --> 00:05:02,860
specifically these two. This one and the previous one.
66

67
00:05:03,040 --> 00:05:07,390
You compiled and linked your program to get an executable to run.
67

68
00:05:08,260 --> 00:05:16,420
One more interesting thing, please go ahead and investigate the console screen in your IDE that shows
68

69
00:05:16,420 --> 00:05:17,620
the commands area.
69

70
00:05:18,050 --> 00:05:23,500
You know that you used to ignore it, but for fun, let's say looking to eclipse or even code blocks or whatever.
70

71
00:05:23,890 --> 00:05:26,770
You should start to see these g++ commands here.
71

72
00:05:27,070 --> 00:05:31,730
As you notice, we have four g++ commands and then other g++ commands.
72

73
00:05:31,760 --> 00:05:37,150
We have here some names for the exe then the bunch of the dot_O files.
73

74
00:05:37,300 --> 00:05:43,300
You see one O file for every file you. You probably would see extra choices,
74

75
00:05:43,300 --> 00:05:49,000
for example, dash Wall is for warning. Dash_Wall means show me
75

76
00:05:49,000 --> 00:05:50,890
every warning that you found in this scope.
76

77
00:05:51,250 --> 00:05:53,680
dash_O for the optimizations.
77

78
00:05:53,680 --> 00:05:57,340
As you know, the compiler is doing a lot of optimization behind the scene.
78

79
00:05:57,760 --> 00:06:02,020
Dash_O_zero means it doesn't do any optimizations, but you can also have more choices,
79

80
00:06:02,020 --> 00:06:08,050
for example, if you went to eclipse here, you notice that we have dash_O one, two, three,
80

81
00:06:08,380 --> 00:06:16,720
and s. Dash_O3 is the highest kind of optimization that you can get from the optimizer.
81

82
00:06:16,840 --> 00:06:21,250
So you can also add these dash_O commands, if you like.
82

83
00:06:21,460 --> 00:06:24,880
There are definitely a lot of choices that you can have in your compiler.
83

84
00:06:25,120 --> 00:06:26,710
Feel free to go and investigate.
84

85
00:06:26,890 --> 00:06:33,730
I wanted you to be aware of the compilation's commands because sometimes you need to do them in practice,
85

86
00:06:33,920 --> 00:06:37,240
although most of the time, the IDE would be enough. That it.
