0
1
00:00:01,230 --> 00:00:06,930
Let's finish the abstraction concept, which comes to the data point about the what versus how. This
1

2
00:00:06,930 --> 00:00:10,080
is a car, we all drive cars.
2

3
00:00:10,080 --> 00:00:13,450
We mainly know about the big picture of how to drive a car.
3

4
00:00:13,740 --> 00:00:18,390
However, there are a lot of very complicated details about driving a car.
4

5
00:00:18,570 --> 00:00:24,210
Think back about the Google search engine, about what you see externally, and about all of the internal
5

6
00:00:24,210 --> 00:00:28,660
details that I don't know, and I don't care to know actually about most of them.
6

7
00:00:29,160 --> 00:00:35,400
So you have a lot of things in your home, TV, and car and blah, blah, blah, Internet browser,
7

8
00:00:35,610 --> 00:00:38,640
you don't care really about a lot of inner details,
8

9
00:00:38,640 --> 00:00:41,520
you care about how to use them. In C++,
9

10
00:00:41,520 --> 00:00:45,090
you might call the power function with something like 3.2 .
10

11
00:00:45,090 --> 00:00:49,680
You might not care about how this really is implemented internally?
11

12
00:00:50,040 --> 00:00:55,980
If I'm implementing some application, let's say, to edit images, for example, I don't
12

13
00:00:55,980 --> 00:00:58,740
care how the operating system read and write the images,
13

14
00:00:58,740 --> 00:01:02,950
I just care that they really give me an image that I read or a file that I'm going to read.
14

15
00:01:03,360 --> 00:01:08,970
So you typically take care a lot about the what not the how. The WHAT is what the function is doing,
15

16
00:01:08,970 --> 00:01:12,150
what is it returning, but HOW is how it's implemented.
16

17
00:01:12,510 --> 00:01:17,430
Sometimes the implementation is slow like the summation from one to N, sometimes it is fast like
17

18
00:01:17,430 --> 00:01:22,650
the equation, sometimes there are bugs, sometimes it's more stable like internet explorer and Firefox,
18

19
00:01:22,920 --> 00:01:27,510
sometimes it might take a very big implementation like Chrome versus Firefox.
19

20
00:01:27,840 --> 00:01:33,990
If you looked at all of that cases, they are all share the same functionality as browsers
20

21
00:01:33,990 --> 00:01:34,290
here,
21

22
00:01:34,590 --> 00:01:37,360
but they are all implemented in different ways.
22

23
00:01:38,070 --> 00:01:44,550
The interesting thing about spreading the WHAT from HOW is it only like we are making it simpler for
23

24
00:01:44,550 --> 00:01:51,840
the user who is focusing on what he needs, but also think about our ability to change the inner implementations,
24

25
00:01:52,020 --> 00:01:54,210
like let's say we discovered a bug in our software,
25

26
00:01:54,220 --> 00:02:00,240
I would like to have a new release that has more features or better features or stable features,
26

27
00:02:00,510 --> 00:02:04,140
and the user now doesn't depend a lot on us.
27

28
00:02:04,140 --> 00:02:09,330
It depends only on the specific WHAT, and we can change a lot of the internal HOW.
28

29
00:02:11,430 --> 00:02:21,720
So in terms of code like one important thing from separating the WHAT from HOW is about the colon
29

30
00:02:21,720 --> 00:02:22,230
operator.
30

31
00:02:22,440 --> 00:02:29,550
Remember, we already before learned how to separate a struct's functionalities from how the functionality
31

32
00:02:29,550 --> 00:02:30,240
is implemented.
32

33
00:02:30,570 --> 00:02:36,570
When you looked at the class rectangle here, what you see? you know that this class would have compute
33

34
00:02:36,570 --> 00:02:37,860
area in the public section,
34

35
00:02:38,040 --> 00:02:44,370
It has a constructor, it has compute_perimeter, it has some getters and setters. This the what of the class,
35

36
00:02:44,700 --> 00:02:46,190
but how is it implemented?
36

37
00:02:46,470 --> 00:02:49,380
The compute_area is implemented by multiplying the width and
37

38
00:02:49,380 --> 00:02:49,790
the height.
38

39
00:02:50,040 --> 00:02:54,090
If you are a user of the rectangle class, you care about the public section
39

40
00:02:54,090 --> 00:02:57,030
here. You don't care about how is implemented.
40

41
00:02:57,150 --> 00:03:00,030
It might be in future change it, improve it, blah blah blah.
41

42
00:03:00,030 --> 00:03:01,140
We don't care about that.
42

43
00:03:01,470 --> 00:03:06,980
So the separation of the WHAT from HOW starts with separating the class here
43

44
00:03:06,990 --> 00:03:09,660
declarations from the definitions,
44

45
00:03:11,120 --> 00:03:20,120
and this takes us to the abstraction concept in a deeper way. Abstraction is about hiding unwanted details
45

46
00:03:20,330 --> 00:03:23,990
while showing most essential in a given context.
46

47
00:03:24,180 --> 00:03:27,590
There are very three critical keywords here.
47

48
00:03:27,860 --> 00:03:32,690
Hide, show context, hide, show context.
48

49
00:03:33,110 --> 00:03:40,830
There are two ways that hiding happens under the concept of abstraction.
49

50
00:03:41,180 --> 00:03:45,830
The first one is the getters and setters that we discussed the last time.
50

51
00:03:46,080 --> 00:03:55,520
Remember,..., when we provide private and public
51

52
00:03:55,540 --> 00:04:00,500
sections, we start to hide the private section and show only the public section.
52

53
00:04:00,650 --> 00:04:06,830
So the public section is mainly about revealing only the relevant functionalities, like thinking about
53

54
00:04:06,830 --> 00:04:07,880
the Google search engine,
54

55
00:04:07,970 --> 00:04:10,910
you only see the search engine with the string query.
55

56
00:04:11,180 --> 00:04:11,780
That is it.
56

57
00:04:11,990 --> 00:04:21,160
So we do a lot of hiding using the private and public section, and we provided the accessors
57

58
00:04:21,170 --> 00:04:26,060
and the mutators to facilitate more access to the functionalities if needed.
58

59
00:04:26,600 --> 00:04:30,620
The other way of hiding here is hiding the WHAT from the HOW.
59

60
00:04:30,860 --> 00:04:37,070
So the HOW refers to the implementation, the WHAT is what you call WHAT or what you call interface or
60

61
00:04:37,070 --> 00:04:42,320
API. As we said, they could be really several implementations, the slow and fast, the one that
61

62
00:04:42,320 --> 00:04:43,700
memory hungry, a lot of things.
62

63
00:04:44,090 --> 00:04:47,840
So the word hide here has two parts,
63

64
00:04:48,140 --> 00:04:54,470
what we hide in the private and public sections and what we hide in terms of the implementation
64

65
00:04:55,280 --> 00:04:58,310
using the colon operator and what we will see more.
65

66
00:04:58,610 --> 00:05:04,250
So going back to the abstraction, we now know about the hide and show, so we hide something and show
66

67
00:05:04,440 --> 00:05:07,700
something either public and private or the implementation
67

68
00:05:07,700 --> 00:05:09,380
WHAT and HOW. What does it mean
68

69
00:05:09,380 --> 00:05:10,100
Context?
69

70
00:05:11,270 --> 00:05:17,450
Let's say that we are in a Google company and would like to define a class to represent Google's employee,
70

71
00:05:18,020 --> 00:05:22,730
and in another company would like to represent the employee in Toyota car company.
71

72
00:05:23,390 --> 00:05:24,050
Definitely,
72

73
00:05:24,350 --> 00:05:28,550
there should be some similar functionalities or data members,
73

74
00:05:28,580 --> 00:05:35,450
for example, the name, the age, the birthdate, the national ID. They are common, but within
74

75
00:05:35,450 --> 00:05:42,630
context of a Google's employee, we might have something about the Google's employee
75

76
00:05:42,650 --> 00:05:47,420
itself or about it being a software engineer like maybe his software engineer level in the company.
76

77
00:05:47,630 --> 00:05:51,020
Google uses levels like 2, 3, 4, 5, 6, for example.
77

78
00:05:51,500 --> 00:05:58,730
But thinking about Toyota guy, it might be a very different concern, like, for example, the
78

79
00:05:58,730 --> 00:06:01,190
commissions that this guy is going to get over
79

80
00:06:01,190 --> 00:06:02,960
his sales, what is the percentage of that?
80

81
00:06:03,200 --> 00:06:07,250
So this is what we mean by context from a class to another,
81

82
00:06:07,430 --> 00:06:08,990
you think about the context.
82

83
00:06:08,990 --> 00:06:15,200
If you are designing a class for a banking application, customer, user, you think what is really
83

84
00:06:15,200 --> 00:06:17,270
relevant to this customer user?
84

85
00:06:17,510 --> 00:06:23,240
So the word context is about what is really relevant here in what we are designing.
85

86
00:06:23,510 --> 00:06:29,570
So thinking about the data abstraction and its relationship with encapsulation and information hiding,
86

87
00:06:29,750 --> 00:06:31,730
you feel it like a bigger concept.
87

88
00:06:31,970 --> 00:06:38,490
It involves encapsulation, we are encapsulating things. To involve the information hiding,
88

89
00:06:38,540 --> 00:06:40,340
we have the private and public.
89

90
00:06:40,340 --> 00:06:42,080
So it's a bit bigger concept.
90

91
00:06:43,370 --> 00:06:48,080
The word abstraction is very common in computer science,
91

92
00:06:48,260 --> 00:06:54,080
I would suggest you go and proceed with these links. People who have higher abstract thinking skills,
92

93
00:06:54,320 --> 00:06:55,910
they can see the big picture,
93

94
00:06:56,090 --> 00:07:01,040
they can see a lot of the WHAT and ignore the HOW
94

95
00:07:01,310 --> 00:07:03,500
that isn't relevant to that.
95

96
00:07:04,610 --> 00:07:11,030
One very relevant thing here in our software engineering industry is the managers like - think
96

97
00:07:11,030 --> 00:07:17,540
about a company very big like Google or Amazon, for example, in the lowest level, you might have a software
97

98
00:07:17,540 --> 00:07:18,950
engineer, above it
98

99
00:07:18,950 --> 00:07:21,380
you have a tech lead, maybe above it
99

100
00:07:21,380 --> 00:07:26,030
you have a manager level one, then another manager, then a third manager for this manager,
100

101
00:07:26,210 --> 00:07:28,430
then a vice president, then blah, blah, blah,
101

102
00:07:28,490 --> 00:07:36,590
till you end up say for a Jeff Bezos in Amazon, for example. Every one of these managers, if you
102

103
00:07:36,590 --> 00:07:42,020
told Jeff Bezos about what is the design of specific functionality, he will know nothing about
103

104
00:07:42,020 --> 00:07:42,200
it,
104

105
00:07:42,350 --> 00:07:46,220
but he might know that this project exists in this department and that is it,
105

106
00:07:46,520 --> 00:07:48,800
or the goal of this project is X, Y, Z,
106

107
00:07:49,040 --> 00:07:50,420
but how is it implemented?
107

108
00:07:50,540 --> 00:07:52,460
He doesn't know and he doesn't care.
108

109
00:07:52,730 --> 00:07:59,390
One of the very common properties in managers, they can see in a high abstraction level, this why
109

110
00:07:59,390 --> 00:08:00,590
they are really highly paid.
110

111
00:08:00,890 --> 00:08:04,550
A lot of people need the implementation and this low level,
111

112
00:08:04,850 --> 00:08:10,240
but to be at a very high level, managing fifty projects, and under you like 300
112

113
00:08:10,310 --> 00:08:13,290
employees, you don't care a lot about the details
113

114
00:08:13,310 --> 00:08:16,420
that aren't relevant to you.
114

115
00:08:16,610 --> 00:08:21,010
You care about the WHAT and the very big picture from a level to another.
115

116
00:08:21,230 --> 00:08:26,720
You see, what Jeff Bezos knows about the company. From a technical perspective is very less.
116

117
00:08:27,050 --> 00:08:33,110
If you go lower in the managerial level, you find people who know more of the low level and less of
117

118
00:08:33,110 --> 00:08:33,710
the high level.
118

119
00:08:33,890 --> 00:08:41,180
You go higher in the hierarchy, you go higher and higher, and this takes to the concept of levels of
119

120
00:08:41,180 --> 00:08:41,870
abstraction.
120

121
00:08:42,260 --> 00:08:44,660
The higher the level, the less the details.
121

122
00:08:44,690 --> 00:08:48,920
So you're thinking about the Google interface as a very high-level one.
122

123
00:08:49,200 --> 00:08:50,590
It is the highest abstraction.
123

124
00:08:50,690 --> 00:08:53,470
So, you know very less. Inside Google's search engine,
124

125
00:08:53,480 --> 00:08:58,510
there are a lot of classes and a lot of components with different low levels of details.
125

126
00:08:59,690 --> 00:09:09,500
So going back to the abstraction here in C++, we can see the abstraction exists from one side in the
126

127
00:09:09,500 --> 00:09:12,140
private public section as an access modifier.
127

128
00:09:12,440 --> 00:09:19,130
You see it also in the colon-colon scope resolution operator that separated for us the WHAT from the
128

129
00:09:19,130 --> 00:09:19,400
HOW.
129

130
00:09:19,670 --> 00:09:25,830
We also see it in the header files that we discussed before that separate the code into different files
130

131
00:09:25,880 --> 00:09:29,330
so you again doing more separation.
131

132
00:09:29,960 --> 00:09:31,630
This the header files if you remember.
132

133
00:09:31,790 --> 00:09:33,890
So we create a header file for rectangle,
133

134
00:09:34,040 --> 00:09:40,700
and then we started to put the declaration here for the rectangle, and then in the implementation file
134

135
00:09:40,820 --> 00:09:43,490
you started to see how a rectangle is implemented,
135

136
00:09:43,640 --> 00:09:48,950
and in your main, you just hash-include this rectangle dot-h. You as a user to
136

137
00:09:48,950 --> 00:09:52,160
the rectangle, know nothing about how the rectangle is implemented,
137

138
00:09:52,400 --> 00:09:58,210
and if we have a reason to change the implementation here, we just go and change it.
138

139
00:09:58,520 --> 00:10:01,060
That's mainly what is abstraction.
139

140
00:10:01,400 --> 00:10:01,940
That's it.
