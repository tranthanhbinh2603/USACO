0
1
00:00:01,140 --> 00:00:04,050
The abstraction homework.
1

2
00:00:06,030 --> 00:00:12,810
First, I would like you to create an analogy for the concept of encapsulation, data hiding, and abstraction.
2

3
00:00:12,810 --> 00:00:14,430
In terms of your house components,
3

4
00:00:14,430 --> 00:00:18,630
you have a bed rooms, store room, kitchen, beds, fridge.
4

5
00:00:18,780 --> 00:00:23,400
You have some valuables that you should take care of, like money, jewelry.
5

6
00:00:23,670 --> 00:00:26,130
You have things that have something that will work
6

7
00:00:26,130 --> 00:00:28,410
like how works like TV, fridge, fan.
7

8
00:00:28,530 --> 00:00:34,080
I would like you to try to make an analogy of all of these components to separate and realy ensure
8

9
00:00:34,080 --> 00:00:38,750
that you realize the difference between the three concepts. The word context,
9

10
00:00:38,760 --> 00:00:41,910
remember, we say context helps us to define what is relevant.
10

11
00:00:42,210 --> 00:00:47,880
Let's say we have three separate projects, one for a kindergarten application, another for a college
11

12
00:00:47,880 --> 00:00:51,240
student and another for college's gym application.
12

13
00:00:51,630 --> 00:00:53,470
All of them has a student as a class.
13

14
00:00:53,850 --> 00:00:58,950
Think in some common member variables for every one of them and think in one unique feature for each
14

15
00:00:58,950 --> 00:00:59,460
one of them
15

16
00:00:59,460 --> 00:01:06,120
given the different contexts between the three different items. Let's say that we have a building that
16

17
00:01:06,300 --> 00:01:10,610
consists of apartments, elevators, each apartment has rooms, a bathroom, and so on.
17

18
00:01:11,070 --> 00:01:16,320
I would like you to design and implement a set of classes in a simple way that represent the customer
18

19
00:01:16,320 --> 00:01:17,490
requirements. The word
19

20
00:01:17,490 --> 00:01:20,190
customer requirements is very common in software engineering.
20

21
00:01:20,370 --> 00:01:23,340
This is what the customer really comes and asks us about it.
21

22
00:01:23,580 --> 00:01:30,420
So think about some suitable member data and functionalities and think about what to provide a setters and
22

23
00:01:30,420 --> 00:01:30,870
getters.
23

24
00:01:32,640 --> 00:01:39,210
Invoice is a very common thing in hotels, online shopping, and so on. You are to design a simple invoice
24

25
00:01:39,210 --> 00:01:47,220
class that has the following felids like - it just has some name, item number, some price and some
25

26
00:01:47,220 --> 00:01:47,880
quantity.
26

27
00:01:49,170 --> 00:01:53,340
As, for example, it could be an invoice for a single item that Acer laptop,
27

28
00:01:53,610 --> 00:01:55,980
and this is a number, this is a price,
28

29
00:01:55,980 --> 00:01:58,200
and this is a quantity that we took.
29

30
00:01:58,200 --> 00:01:59,630
So we took here two laptops.
30

31
00:01:59,850 --> 00:02:06,510
So it's like an invoice for a single item. Provide setters and getters for their functionality and provide
31

32
00:02:06,510 --> 00:02:07,080
some function 
32

33
00:02:07,080 --> 00:02:10,320
like get total price, print to string, so get total price
33

34
00:02:10,320 --> 00:02:11,310
now is two times this
34

35
00:02:11,310 --> 00:02:18,270
number, to_string is returning a string like this guy, comma, separated. Implement them in one file,
35

36
00:02:18,540 --> 00:02:21,060
but separate the declaration from the definition.
36

37
00:02:21,090 --> 00:02:24,510
Feel free to separate also as a separate header file.
37

38
00:02:25,500 --> 00:02:31,140
I would like you to read this program that has several set functionalities and get functionalities, and
38

39
00:02:31,140 --> 00:02:32,610
guess the output of the program.
39

40
00:02:33,000 --> 00:02:36,720
What is the name of this feature that has several functionalities of the same name?
40

41
00:02:38,240 --> 00:02:44,330
Finally, we know that every variable in memory should have its own different address, but the question
41

42
00:02:44,330 --> 00:02:49,310
here, in a class, would every member function also have their object
42

43
00:02:49,310 --> 00:02:52,370
a different address.
43

44
00:02:52,550 --> 00:02:56,990
For example, let's say we have an object lucky number and it has a print address functionality
44

45
00:02:57,350 --> 00:03:04,550
and print it has a function, let's say print address, some functions name this way. Let's say we have
45

46
00:03:04,550 --> 00:03:05,470
10 objects of lucky
46

47
00:03:05,490 --> 00:03:11,390
numbers, would every one of them has a function that has a different address in memory, or they are sharing
47

48
00:03:11,630 --> 00:03:13,740
the address of the function.
48

49
00:03:14,360 --> 00:03:19,610
This exercise would like you to use this weird line, it says print, double quotes, and then it say
49

50
00:03:19,630 --> 00:03:21,980
a reference of lucky number, print address.
50

51
00:03:22,340 --> 00:03:26,560
This line is going to print the address of this function.
51

52
00:03:26,630 --> 00:03:32,390
It's a C style, not c++. In C, it's is much easier to print the address of functionality. Develop a
52

53
00:03:32,390 --> 00:03:39,560
very simple code to show if the address is going to be same or different for the member function from
53

54
00:03:39,560 --> 00:03:40,830
an object to another.
54

55
00:03:41,360 --> 00:03:41,840
That's it.
