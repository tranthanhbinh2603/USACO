0
1
00:00:01,110 --> 00:00:08,070
One of the fundamental concepts in object-oriented programming is data hiding. So let's know what
1

2
00:00:08,070 --> 00:00:08,820
is a class.
2

3
00:00:09,000 --> 00:00:12,360
So class is something very similar to the struct,
3

4
00:00:12,570 --> 00:00:16,230
you give it a class' name, you open braces, then you put a semicolon,
4

5
00:00:16,410 --> 00:00:19,850
you start to put some variables and start to put some functionalities.
5

6
00:00:20,370 --> 00:00:23,160
So it encapsulate also the data and functionalities,
6

7
00:00:23,400 --> 00:00:30,840
but it is more of an OOP. Struct was originally coming from the C language and it kept evolving in a way
7

8
00:00:30,840 --> 00:00:34,000
that make it almost like class, but class is more OOP.
8

9
00:00:34,320 --> 00:00:38,880
So let's see how things in OOP world are. In a class,
9

10
00:00:39,210 --> 00:00:43,280
we start to have something called the public section and the private section.
10

11
00:00:43,620 --> 00:00:50,880
The public section has data and functionalities that the user can see and access.
11

12
00:00:51,270 --> 00:00:54,180
By user, we mean someone who is trying to use our class.
12

13
00:00:54,870 --> 00:01:03,980
The private section is a section that a user cannot see or access its data functionalities or data
13

14
00:01:03,990 --> 00:01:04,440
members.
14

15
00:01:04,770 --> 00:01:05,930
So who is seeing it?
15

16
00:01:06,180 --> 00:01:07,380
The class itself.
16

17
00:01:07,500 --> 00:01:09,640
OK, so this is how we implement it.
17

18
00:01:09,990 --> 00:01:12,900
This is a private, and this is a public section.
18

19
00:01:13,260 --> 00:01:19,560
You start to write here some data members, some functions, and you start to write here, some variables
19

20
00:01:19,740 --> 00:01:20,910
and some functionalities.
20

21
00:01:21,300 --> 00:01:24,840
If you as a user tried to use this class,
21

22
00:01:25,080 --> 00:01:26,610
and you started to say queue
22

23
00:01:26,700 --> 00:01:27,210
dot external
23

24
00:01:27,210 --> 00:01:28,380
Is it in public section?
24

25
00:01:28,390 --> 00:01:29,280
Yes, no problem.
25

26
00:01:29,580 --> 00:01:31,470
Queue dot print, is it in public section?
26

27
00:01:31,470 --> 00:01:32,340
Yes, no problem.
27

28
00:01:33,000 --> 00:01:33,660
Queue dot internal,
28

29
00:01:33,660 --> 00:01:34,770
Is it in public section.
29

30
00:01:34,770 --> 00:01:35,210
No.
30

31
00:01:35,220 --> 00:01:41,370
So as an external user you cannot use this internal function, and you cannot call this get quote.
31

32
00:01:41,670 --> 00:01:46,470
However, inside the public section itself, you can see your private section.
32

33
00:01:46,770 --> 00:01:55,050
So we call them the access modifiers because it determines the accessibility about who can access what.
33

34
00:01:55,410 --> 00:01:57,720
We can visualize them through this code.
34

35
00:01:57,990 --> 00:02:04,230
This is our class, our object. Inside the class, the public and private see each other,
35

36
00:02:04,590 --> 00:02:09,840
but if you are an external user to the class, you only can see the public section, but you cannot
36

37
00:02:09,840 --> 00:02:11,370
see the private section.
37

38
00:02:11,640 --> 00:02:19,380
So the private section hides some data members and some member functions from users, from external
38

39
00:02:19,390 --> 00:02:25,110
users. As a very critical OOP design principle,
39

40
00:02:25,320 --> 00:02:33,240
you are to reveal in the public section as little as possible and maximize your private section as much
40

41
00:02:33,240 --> 00:02:34,700
as possible.
41

42
00:02:35,850 --> 00:02:38,370
Let's think about Google search engine.
42

43
00:02:38,400 --> 00:02:45,210
We referred before that Google search engine provides us with some interface that involves viewing results,
43

44
00:02:45,450 --> 00:02:48,450
that involves some of the optional settings,
44

45
00:02:48,750 --> 00:02:53,490
However, Google search is a very huge website, is a very huge codebase.
45

46
00:02:53,790 --> 00:02:58,770
So we can say that all the complexity of the project is hidden from us.
46

47
00:02:59,100 --> 00:03:00,300
Do I care as a user?
47

48
00:03:00,450 --> 00:03:01,320
The answer is no.
48

49
00:03:01,350 --> 00:03:05,310
All I need is just to know how to search for something on your website.
49

50
00:03:05,520 --> 00:03:07,500
I don't care about any anything else,
50

51
00:03:07,740 --> 00:03:09,900
only the internal classes care about that.
51

52
00:03:09,900 --> 00:03:10,860
I don't care about that.
52

53
00:03:11,070 --> 00:03:12,990
So it's more of the what versus the how.
53

54
00:03:13,500 --> 00:03:17,940
So here is what might be the overall code of Google
54

55
00:03:18,330 --> 00:03:21,210
like, let's say you are calling the Google search engine.
55

56
00:03:21,600 --> 00:03:25,740
There is a private section that has a huge amount of data that no one knew about them,
56

57
00:03:26,160 --> 00:03:28,890
and there is a public section that has functionalities to search.
57

58
00:03:29,040 --> 00:03:36,180
You can send me a query, you can send me some settings and you are receiving a vector of results, and
58

59
00:03:36,180 --> 00:03:39,090
there is some class for result and some class for settings,
59

60
00:03:39,480 --> 00:03:45,660
but you have no access and you actually don't care about anything in the private section.
60

61
00:03:46,830 --> 00:03:47,760
So this is how user
61

62
00:03:47,760 --> 00:03:53,280
eventually, just give a query and some settings and he gets results.
62

63
00:03:53,610 --> 00:03:59,610
The user here doesn't care how Google is going to find the results and what is hidden in Google.
63

64
00:03:59,610 --> 00:04:00,780
No one care about that.
64

65
00:04:01,380 --> 00:04:08,850
So the good here about having less access that it reduces the system complexity.
65

66
00:04:10,100 --> 00:04:14,690
You do know most of it, so you don't care. So why data hiding? first
66

67
00:04:14,870 --> 00:04:18,980
because it helps us to prevent the corruption of the data.
67

68
00:04:19,250 --> 00:04:25,730
The less that you see to others, the less they can change in your own code. Such changes sometimes
68

69
00:04:25,730 --> 00:04:29,150
even might be unintended or intended. In an unintended way,
69

70
00:04:29,150 --> 00:04:33,140
someone or a hacker or whatever decided to break things. In an unintended way,
70

71
00:04:33,140 --> 00:04:34,640
and this would actually happened all the time,
71

72
00:04:34,790 --> 00:04:40,940
someone might access like, let's say going back to the struct, we didn't see this private and
72

73
00:04:40,940 --> 00:04:41,720
public section,
73

74
00:04:41,930 --> 00:04:45,530
so someone externally using your code can just change whatever,
74

75
00:04:45,710 --> 00:04:48,050
but here you have some limitation.
75

76
00:04:48,230 --> 00:04:53,960
So we might be able to protect our data members as much as we could.
76

77
00:04:54,440 --> 00:04:57,350
There also a concept called the object integrity.
77

78
00:04:57,620 --> 00:04:59,420
The word integrity refers that
78

79
00:04:59,630 --> 00:05:04,740
things together are like looks like they are working together in a good way.
79

80
00:05:05,060 --> 00:05:06,410
Let me give you some example.
80

81
00:05:06,680 --> 00:05:12,620
Let's say you have some computer or a mobile or a car or whatever. You figured out there are some problems
81

82
00:05:12,620 --> 00:05:15,500
in your laptop, for example, that something wrong in your adapter.
82

83
00:05:15,800 --> 00:05:21,440
You then bought a new cheap adapter to replace the old adapter. The computer for a while seems working,
83

84
00:05:21,650 --> 00:05:26,950
but after some time, the whole system failed due to, say, some voltage problem.
84

85
00:05:27,170 --> 00:05:28,270
Where is the problem here?
85

86
00:05:28,550 --> 00:05:33,860
This new component that you added to the system isn't integrable with the whole system,
86

87
00:05:34,070 --> 00:05:41,960
and this what might happen in the system with the user, like let's say the struct has an array and
87

88
00:05:42,170 --> 00:05:45,770
has length. The length is 100 and then suddenly the user
88

89
00:05:45,920 --> 00:05:47,090
put the length with zero.
89

90
00:05:47,390 --> 00:05:53,830
So we have data, but now the length is zero. Someone corrupted the integrity of the whole system.
90

91
00:05:54,410 --> 00:06:01,220
We can also see that data hiding is reducing the system complexity and also it give us better code readability.
91

92
00:06:01,520 --> 00:06:08,300
If you remember the Google search example, the main that was calling the search engine has very
92

93
00:06:08,300 --> 00:06:08,710
little.
93

94
00:06:08,840 --> 00:06:12,730
So you can read the code in an easy way because you don't see all of this
94

95
00:06:12,740 --> 00:06:18,710
big codebase from the user. Data hiding versus encapsulation.
95

96
00:06:18,710 --> 00:06:25,730
We already know about the encapsulation that it gathers together the data members
96

97
00:06:25,730 --> 00:06:26,680
and the member functions.
97

98
00:06:27,200 --> 00:06:29,720
So what's the difference between encapsulation and data hiding?
98

99
00:06:29,720 --> 00:06:36,620
Encapsulation can be achieved at least with a struct. We saw in a struct that it collected
99

100
00:06:36,620 --> 00:06:41,450
for us the member function and collected for us the data members,
100

101
00:06:41,930 --> 00:06:44,210
but with data hiding,
101

102
00:06:44,210 --> 00:06:47,330
we also split them to what is private and what is public.
102

103
00:06:47,630 --> 00:06:53,000
As you see, data hiding is impossible without encapsulation like you, functionalities are spread in
103

104
00:06:53,000 --> 00:06:53,470
the code.
104

105
00:06:53,480 --> 00:06:55,350
You cannot make what is public and what's private.
105

106
00:06:55,370 --> 00:07:00,800
OK, so this is the critical difference between encapsulation and data hiding. Be careful, people are mixing
106

107
00:07:00,800 --> 00:07:01,370
them together.
107

108
00:07:01,700 --> 00:07:07,130
Encapsulation is all about gathering together the data and the functionalities.
108

109
00:07:07,400 --> 00:07:11,960
Data hiding is about reorganizing them into private and public sections.
109

110
00:07:13,100 --> 00:07:20,870
So back to the system complexity point that I mentioned, the word system complexity is 
110

111
00:07:21,280 --> 00:07:22,460
achieved as following:
111

112
00:07:22,850 --> 00:07:29,360
When you are enforcing encapsulation, the way that encapsulation is reducing the system complexity
112

113
00:07:29,600 --> 00:07:31,450
is mainly by grouping things together.
113

114
00:07:31,670 --> 00:07:33,650
So development is now easier,
114

115
00:07:34,040 --> 00:07:40,060
and also if you are solving some bug, it's much easier because you have here now a class of date involved
115

116
00:07:40,110 --> 00:07:41,540
with all of the things of the date.
116

117
00:07:41,690 --> 00:07:44,870
You have a class of question involving all of the things of question.
117

118
00:07:44,870 --> 00:07:48,800
You have a class of user involving functionality for user.
118

119
00:07:48,920 --> 00:07:53,780
So designing, coding, implementing, fixing bugs is much easier with encapsulation.
119

120
00:07:54,230 --> 00:07:55,010
What about data hiding?
120

121
00:07:55,010 --> 00:07:57,800
the search of Google engine is a good example.
121

122
00:07:57,980 --> 00:08:01,280
Like there is a lot in Google that we don't know.
122

123
00:08:01,520 --> 00:08:07,310
So as a user I only care about how can I call the Google function and I don't care about anything else.
123

124
00:08:07,520 --> 00:08:11,840
So this means that we are hiding a lot of the complexity of the system.
124

125
00:08:12,380 --> 00:08:16,400
There is also a very interesting concept here, which is dependency (coupling).
125

126
00:08:16,400 --> 00:08:21,650
You will hear the word a lot, and it's a critical concept in software engineering.
126

127
00:08:21,890 --> 00:08:25,820
Couples mean that there is some dependency.
127

128
00:08:26,300 --> 00:08:30,560
Thinking about the Google search engine, what is exactly our dependency?
128

129
00:08:30,830 --> 00:08:36,890
We have only one dependency on a function named search that takes a query and takes some settings, but
129

130
00:08:36,890 --> 00:08:37,610
nothing else.
130

131
00:08:37,940 --> 00:08:42,770
So Google can be very flexible about its hidden functionalities.
131

132
00:08:42,920 --> 00:08:44,570
They can change a lot of them,
132

133
00:08:44,780 --> 00:08:51,260
and they don't care that the outsiders depend on our code because we only depend on a single functionality.
133

134
00:08:51,620 --> 00:08:58,160
So if there are other one thousand functionality, we don't depend on them so they can internally change
134

135
00:08:58,160 --> 00:09:01,090
them as much as they need. The less you depend on others code,
135

136
00:09:01,130 --> 00:09:02,750
the less coupling that
136

137
00:09:02,750 --> 00:09:03,500
is in system.
137

138
00:09:05,350 --> 00:09:10,960
Finally, we already so far discussed the two fundamental concepts in OOP, encapsulation and data hiding.
138

139
00:09:11,470 --> 00:09:17,380
I hope we now can figure out exactly the difference between them, we heard a lot of important concepts
139

140
00:09:17,460 --> 00:09:24,040
that we hear a lot in software engineering, integrity, dependency, system complexity, user, coupling,
140

141
00:09:24,190 --> 00:09:27,620
readability and security.
141

142
00:09:31,480 --> 00:09:37,520
I would like you to think of a simple rectangle class that has just this kind of two dimensions.
142

143
00:09:37,840 --> 00:09:40,290
Think about the potential data members and member functions.
143

144
00:09:40,330 --> 00:09:45,540
This is the easy part, but think about what might be public and what might be private.
144

145
00:09:46,030 --> 00:09:46,630
That it.
