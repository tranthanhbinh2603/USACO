0
1
00:00:02,320 --> 00:00:06,470
This set of homework for the polymorphism is the following but first, consider the following node:
1

2
00:00:07,000 --> 00:00:12,820
Always try to apply polymorphism, try to think about depending on some parent class to minimize
2

3
00:00:12,820 --> 00:00:15,450
the dependencies and coupling between classes.
3

4
00:00:15,730 --> 00:00:20,620
So, for example, the image editor doesn't know about the rectangle, doesn't know about the circle, doesn't
4

5
00:00:20,620 --> 00:00:21,300
know about all of that
5

6
00:00:21,310 --> 00:00:23,440
so we are removing dependencies between classes,
6

7
00:00:23,710 --> 00:00:25,810
It just know what is a shape and so on.
7

8
00:00:25,960 --> 00:00:28,000
So Polymorphisms is helping you in that.
8

9
00:00:28,660 --> 00:00:31,990
In the first homework, you are to read this UML diagram carefully.
9

10
00:00:32,170 --> 00:00:35,140
It's for an ATM machine and then just describe it.
10

11
00:00:35,320 --> 00:00:35,920
That's it.
11

12
00:00:37,030 --> 00:00:43,150
In the second one, we have a fresh software engineer who wanted to implement a new class for square
12

13
00:00:43,150 --> 00:00:43,750
as a shape.
13

14
00:00:44,290 --> 00:00:48,490
So he thought as following: we have a square which is inheriting from a rectangle.
14

15
00:00:48,710 --> 00:00:52,250
A rectangle is a class that is very heavy with a lot of implementation.
15

16
00:00:52,630 --> 00:00:56,080
The first question is, why do you think the guy thought this way?
16

17
00:00:56,650 --> 00:00:59,170
Then think, why is this problematic?
17

18
00:00:59,170 --> 00:01:00,460
What's wrong here?
18

19
00:01:00,730 --> 00:01:03,020
and provide a tip to avoid such a mistake.
19

20
00:01:03,310 --> 00:01:07,510
Also, how to fix this design like we would like now to still have a square class,
20

21
00:01:07,690 --> 00:01:11,140
but we don't want to face the problem that we did here.
21

22
00:01:11,540 --> 00:01:16,240
Remember, the rectangle class is a heavy one. You would like to make use of these functionalities.
22

23
00:01:18,000 --> 00:01:24,240
We would like to develop a set of classes for a company and its payroll specifically we have people who are
23

24
00:01:24,240 --> 00:01:27,110
either volunteers or employees, both are working in the company.
24

25
00:01:27,510 --> 00:01:31,070
The employees are either hourly based or salaried based.
25

26
00:01:31,380 --> 00:01:35,680
So the hourly-based guy would just be paid based on the number of hours.
26

27
00:01:36,060 --> 00:01:38,880
There is also a commission salaried employee.
27

28
00:01:39,120 --> 00:01:43,950
This guy takes commission extra based on the number of sales that he did.
28

29
00:01:44,130 --> 00:01:46,170
So this is like a third category that we have.
29

30
00:01:46,740 --> 00:01:47,880
So this is one category
30

31
00:01:47,880 --> 00:01:49,510
the payroll has to pay money for it.
31

32
00:01:49,690 --> 00:01:52,860
There is another source to pay, invoices.
32

33
00:01:53,130 --> 00:01:59,160
We have invoices, let's say as simple as each invoice has a set of items, item could be like a book,
33

34
00:01:59,160 --> 00:02:00,150
food, whatever.
34

35
00:02:00,450 --> 00:02:05,310
Each item has its own details, like maybe for a book it would be the book author name.
35

36
00:02:07,350 --> 00:02:08,790
So like a different fields I mean.
36

37
00:02:08,790 --> 00:02:16,050
The payroll should determine and pays money for whatever payable. Payable means in like something that we
37

38
00:02:16,050 --> 00:02:16,760
have to pay for it.
38

39
00:02:16,860 --> 00:02:19,140
Here is the employee or the invoice.
39

40
00:02:19,440 --> 00:02:23,740
So you have to do something that expresses the company payroll here.
40

41
00:02:23,760 --> 00:02:29,640
We would like to represent the company payroll and some of  employees type that we have in this
41

42
00:02:29,640 --> 00:02:30,060
system.
42

43
00:02:30,820 --> 00:02:35,430
Assume after we developed the system, after a few months, we have the following:
43

44
00:02:36,090 --> 00:02:42,770
There is one new type of employee, which is labourer employee. the labourer employee is an hourly employee.
44

45
00:02:43,260 --> 00:02:44,340
...
45

46
00:02:44,970 --> 00:02:51,350
However, at the moment there are no extra functionalities or variables that are for the labourer employee.
46

47
00:02:51,690 --> 00:02:58,140
The question is from a design perspective, should you add a new class for a labourer, for example,
47

48
00:02:58,140 --> 00:03:04,650
extending from an hourly employee, but just an empty class, or just make use of the hourly employee based object,
48

49
00:03:04,650 --> 00:03:07,560
just make use of it as a representation for a labourer
49

50
00:03:07,560 --> 00:03:09,870
at the moment. Which one is a better choice?
50

51
00:03:10,050 --> 00:03:11,070
Think and design it.
51

52
00:03:12,870 --> 00:03:19,200
In the fourth task, you are to study a library named JSON. JSON is a standard text-based library,
52

53
00:03:19,200 --> 00:03:22,070
It's very common in industry, so it's good to learn about it.
53

54
00:03:22,380 --> 00:03:25,500
You will study this very basic C++ library.
54

55
00:03:25,770 --> 00:03:32,960
I by myself downloaded the library file and changed their examples to be better ones.
55

56
00:03:33,210 --> 00:03:38,190
So I would like first to run and read the code then guess the text structure.
56

57
00:03:38,220 --> 00:03:44,070
So first, just to read and just guess what is that. After that, try to find materials in web about
57

58
00:03:44,070 --> 00:03:44,490
JSON.
58

59
00:03:44,490 --> 00:03:45,950
I'm attaching here one video.
59

60
00:03:46,110 --> 00:03:49,730
YouTube has a lot and Google has more is easy.
60

61
00:03:50,190 --> 00:03:53,970
The guys has also some interfaces of the different functionality here. Please, read carefully.
61

62
00:03:54,450 --> 00:03:59,340
In the future, I will have some assignments and projects depending on JSON, so I would like you really to do
62

63
00:03:59,340 --> 00:03:59,880
this task.
63

64
00:04:00,600 --> 00:04:06,390
There are other popular market formats to know about them, like XML and YAML, so check them out.
64

65
00:04:06,390 --> 00:04:08,350
Also, they are good to learn for yourself.
65

66
00:04:09,030 --> 00:04:09,560
That's it.
