0
1
00:00:00,780 --> 00:00:05,460
Let's see how to solve the employee application, which is a simple application at this stage.
1

2
00:00:07,500 --> 00:00:10,510
First of all, we need some storage for our data.
2

3
00:00:10,530 --> 00:00:12,360
We have names, ages and salaries.
3

4
00:00:12,630 --> 00:00:19,310
So I created 4 arrays that correspond to our needs, and I use some artificial maximum here of 10000.
4

5
00:00:19,920 --> 00:00:25,020
And I have a variable here to refer to the number of added employees so far. Like any program that
5

6
00:00:25,020 --> 00:00:29,970
needs to keep printing forever and also have a menu, I have a while loop here working forever.
6

7
00:00:30,210 --> 00:00:35,520
And I have a list here of four choices presented to the user and a choice that we read from the user.
7

8
00:00:36,150 --> 00:00:42,210
In the future, we will learn how to handle in a proper way the failure in the inputs; the user  might input string
8

9
00:00:42,210 --> 00:00:44,940
for you might input something that's completely invalid.
9

10
00:00:45,180 --> 00:00:46,740
How to handle that? in the future
10

11
00:00:46,740 --> 00:00:50,660
we'll learn about that. Now for a basic verification,
11

12
00:00:50,670 --> 00:00:56,760
I'm just checking if the choice is between one and four or not. Observing here the syntax;
12

13
00:00:57,330 --> 00:00:58,950
this is the target condition.
13

14
00:00:59,280 --> 00:01:05,240
Like I need to make sure that the choice is greater than one or equal to it and less than equal four. After that,
14

15
00:01:05,250 --> 00:01:07,950
I'm just putting a note here to not all of this expression.
15

16
00:01:09,000 --> 00:01:12,330
This expression can be not by also noting this one by itself
16

17
00:01:12,330 --> 00:01:13,620
and noting this one by itself
17

18
00:01:13,620 --> 00:01:18,210
and switching the and to or, this is how we can flip a complete expression.
18

19
00:01:19,510 --> 00:01:25,420
After that, we just go if it's choice number one, we started to read the name and the age and the
19

20
00:01:25,420 --> 00:01:29,400
salary and gender, we read them directly in the array depending on the counter.
20

21
00:01:29,710 --> 00:01:32,460
But after that, we have to increment the counter here.
21

22
00:01:33,160 --> 00:01:38,920
If the choice is 2, we just iterate and start to print the data that we have.
22

23
00:01:40,680 --> 00:01:48,840
And observe here I have an if condition that say if age doesn't equal minus one, what
23

24
00:01:48,840 --> 00:01:52,110
happened is we will have a delete operation from here.
24

25
00:01:52,620 --> 00:01:55,680
And I don't want to mess up with the array at the moment.
25

26
00:01:55,680 --> 00:02:00,290
So I will just mark some elements with minus one as a deleted.
26

27
00:02:00,510 --> 00:02:03,060
So we call that lazy delete.
27

28
00:02:03,300 --> 00:02:06,870
Lazy delete means that you can actually make a delete operation
28

29
00:02:07,110 --> 00:02:09,780
you just like make it in a very lazy way.
29

30
00:02:10,950 --> 00:02:14,610
Lazy initialization and lazy deleting are something very common in the industry.
30

31
00:02:16,230 --> 00:02:19,230
So if it exists, we will just print it.
31

32
00:02:19,680 --> 00:02:20,820
And here is the third
32

33
00:02:20,820 --> 00:02:25,890
choice, if the user would like to remove an age based on a range came to print the start
33

34
00:02:25,890 --> 00:02:27,210
and end.For simplicity,
34

35
00:02:27,210 --> 00:02:32,780
I assume the user would be a good one, just entering a small start after it can end one and start to less than
35

36
00:02:32,790 --> 00:02:33,180
small.
36

37
00:02:33,630 --> 00:02:40,560
Then I iterate over all of the employees and if his age is between this range, I mark it with minus
37

38
00:02:40,560 --> 00:02:44,210
one, which is a marking for a removal of this person.
38

39
00:02:45,270 --> 00:02:51,090
And finally, if we'd like to make an update based on name and salary, then I read the name and salary
39

40
00:02:51,450 --> 00:02:54,480
and then I iterate and try to find him.
40

41
00:02:54,840 --> 00:03:01,740
If the person isn't removed and there is a match for the name we mark that we found him, update the salary
41

42
00:03:01,740 --> 00:03:05,770
and break. If not found, we just give a message that not found.
42

43
00:03:06,030 --> 00:03:09,020
I hope overall that was a fair example for you.
43

44
00:03:09,300 --> 00:03:17,580
The more we go in the course, you will have more of like harder programs and many other
44

45
00:03:17,580 --> 00:03:20,430
courses we call such a simple program like a project
45

46
00:03:20,430 --> 00:03:22,500
but this is actually a mini assignment.
46

47
00:03:22,860 --> 00:03:27,810
I would like you to be familiar with that because the project, the course will end up with codes up
47

48
00:03:27,810 --> 00:03:30,270
to like...,  in an optimal way.
48

49
00:03:30,450 --> 00:03:33,540
The last project is like a one thousand two hundred lines of code.
49

50
00:03:34,140 --> 00:03:36,860
You probably will write it in two or three thousand lines of code.
50

51
00:03:36,870 --> 00:03:41,310
And this is a lot, but it would be a very decent teaching experience for you.
