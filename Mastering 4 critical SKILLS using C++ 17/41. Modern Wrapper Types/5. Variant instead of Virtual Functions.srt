1
00:00:01,130 --> 00:00:07,590
You'll find many programmers saying that variant is a replacement for the old union thing and C++.

2
00:00:07,820 --> 00:00:14,240
That's OK, but there's actually a more stronger use case for the variant as a replacement to visual

3
00:00:14,240 --> 00:00:14,870
functions.

4
00:00:17,060 --> 00:00:19,760
Let's give some details about that.

5
00:00:21,950 --> 00:00:26,420
How could you define a very a picture of different data types like.

6
00:00:26,710 --> 00:00:31,130
I would like to create a vector of maybe an integer and double a string.

7
00:00:31,160 --> 00:00:32,780
How would you define something like that?

8
00:00:33,290 --> 00:00:34,520
This isn't straightforward.

9
00:00:34,760 --> 00:00:40,460
Maybe I would like to find something some this class and I would do some different drive the classes

10
00:00:40,460 --> 00:00:41,790
and with some polymorphism.

11
00:00:42,260 --> 00:00:45,770
This looks a lot for a primitive data types right now.

12
00:00:45,830 --> 00:00:47,420
Here is how it is variant.

13
00:00:47,420 --> 00:00:49,790
How can solve this problem in a very simple way.

14
00:00:50,150 --> 00:00:57,350
You define your own variant of the different types and then you define some vestor over this variant

15
00:00:57,740 --> 00:01:02,030
and start to make a vector of this over time here.

16
00:01:02,450 --> 00:01:08,370
Now you can embellish back from the vector one to bring to help you not see it.

17
00:01:08,390 --> 00:01:09,240
This is very powerful.

18
00:01:09,260 --> 00:01:15,090
Now you have a vector of three different types and you can iterate and just each one of them.

19
00:01:15,650 --> 00:01:22,850
So you see how in a very simple way, the very give you this compile time, different choices, but

20
00:01:22,850 --> 00:01:25,800
otherwise you will have to depend here on the different runtime choices.

21
00:01:26,300 --> 00:01:31,910
Let's make this just more generic for the sake of learning how to do more treatment, more generic treatments.

22
00:01:37,670 --> 00:01:41,490
First of all, here I defined the brain twister.

23
00:01:41,540 --> 00:01:43,460
Yeah, this is same logic,

24
00:01:48,020 --> 00:01:52,590
lets here create a variant to contain it.

25
00:01:52,620 --> 00:01:59,160
It is going to create like a vector of variance, providing here some template over a variant.

26
00:01:59,480 --> 00:02:02,990
So here I have a variant of string and integer.

27
00:02:03,110 --> 00:02:08,220
I'm creating a variant of like a subclass over this variant.

28
00:02:08,390 --> 00:02:12,170
So it's going to be here and I'm defining my function.

29
00:02:12,170 --> 00:02:13,040
That's named the visit.

30
00:02:13,220 --> 00:02:21,180
You give me Vester, which I defined here, and use it to visit the operator.

31
00:02:21,200 --> 00:02:26,750
So I treated over every object to call Deville's function and providing here to function, push back

32
00:02:26,750 --> 00:02:27,530
an endless back.

33
00:02:28,490 --> 00:02:34,910
So the push back is just pushing back in the vector and then BLIS back is taking the very arguments

34
00:02:34,910 --> 00:02:37,110
and just passively to the endless back function.

35
00:02:37,130 --> 00:02:42,860
Remember that this back is taking the the very dark tablets.

36
00:02:44,840 --> 00:02:46,030
What else are here?

37
00:02:46,280 --> 00:02:53,480
So, yeah, I'm here defining a vector of this type and then I'm directly in back of it in respect of

38
00:02:53,480 --> 00:02:59,990
it and calling its visit function and basing for it Alamdar for my my vestor.

39
00:03:00,260 --> 00:03:02,110
I'm just trying to make the code more generic.

40
00:03:02,120 --> 00:03:03,630
Nothing about the variant itself.

41
00:03:03,950 --> 00:03:12,380
So instead of here, one one I'm creating here over Vector for example, you would like maybe to create

42
00:03:13,040 --> 00:03:13,820
something else.

43
00:03:14,360 --> 00:03:21,340
Yeah, but definitely the eventually vector just just making you could more generic solve for the confusion.

44
00:03:23,220 --> 00:03:29,800
Let's take one more example where we are seeing, obviously where the runtime replacement could happen.

45
00:03:30,090 --> 00:03:34,680
Let's say you have a glass piece and another glass looks right from it and they have function that could

46
00:03:34,680 --> 00:03:35,310
bring to name.

47
00:03:36,190 --> 00:03:45,750
Now you can create a pointer over the bicyclers that equals one of your drive, the closest as in the

48
00:03:45,990 --> 00:03:48,930
virtual function, and you just call the printer and function.

49
00:03:49,500 --> 00:03:53,580
Now you notice here, this is all runtime behavior and this is virtual things.

50
00:03:54,000 --> 00:03:56,780
Now let's see how the variant would help us.

51
00:03:57,150 --> 00:04:03,300
We are going to make a very simple class base that is in virtual and we are making extra drive that

52
00:04:03,300 --> 00:04:04,460
doesn't extend from it.

53
00:04:04,740 --> 00:04:12,120
And then you have this variant of these two classes here and then you have say some some, some, some,

54
00:04:12,120 --> 00:04:17,660
some function that just your visitor is just calling the function, the print and then you are just

55
00:04:17,670 --> 00:04:18,140
visiting.

56
00:04:18,600 --> 00:04:19,230
That's it.

57
00:04:20,730 --> 00:04:21,270
This is good.

58
00:04:21,270 --> 00:04:27,440
By the way, DOCTYPE you see here, the Alworth we care is that this object have the function print,

59
00:04:27,450 --> 00:04:29,960
we don't care about its subject time itself.

60
00:04:30,360 --> 00:04:37,680
So the moral of this video, as you see, we can get rid of the polymorphism if it isn't necessary and

61
00:04:37,680 --> 00:04:46,870
just go with basic option with the variance over all of the variance is a replacement to what was called

62
00:04:46,890 --> 00:04:53,700
the union, which I didn't explain in this course you the need and also as it is a replacement for the

63
00:04:53,940 --> 00:04:59,880
body Murphysboro time in terms of the memory, like let's say you have a variant of four different data

64
00:04:59,880 --> 00:05:00,420
types.

65
00:05:00,450 --> 00:05:02,300
We know that only one of them exists.

66
00:05:02,430 --> 00:05:08,510
So behind the scene, the largest member of them in memory size will be the actual size of the offering,

67
00:05:08,710 --> 00:05:10,380
something that you didn't care about it.

68
00:05:12,990 --> 00:05:16,290
There are some disadvantages for variant.

69
00:05:16,320 --> 00:05:24,370
One of them is you have to know the different types in the competition time and the timing, which may

70
00:05:24,540 --> 00:05:29,430
be sometimes like you need to be careful, like you are just expecting something to have a function.

71
00:05:29,430 --> 00:05:36,480
That's one of the annoying things, is you typically when it comes to printing, it's annoying.

72
00:05:36,480 --> 00:05:38,490
And was, for example, was Vestor.

73
00:05:38,700 --> 00:05:43,620
You have to make a visitor for every different functionality and sometimes it's very complicated when

74
00:05:43,620 --> 00:05:45,030
they are different data types.

75
00:05:45,030 --> 00:05:46,380
It's really not that easy.

76
00:05:47,130 --> 00:05:49,200
In the future you might go and read this link.
