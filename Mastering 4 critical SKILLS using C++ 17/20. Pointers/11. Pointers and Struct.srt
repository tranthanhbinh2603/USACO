0
1
00:00:05,140 --> 00:00:11,100
...So this is a struct of an employee class that has just a normal constructor, some function, and print
1

2
00:00:11,110 --> 00:00:11,590
function.
2

3
00:00:12,480 --> 00:00:18,900
Now, if you would like to define it in a very normal way like â€” you just say, employee e1 10, Mostafa.
3

4
00:00:18,900 --> 00:00:20,150
you want to print, that's it.
4

5
00:00:20,430 --> 00:00:21,390
So far, so good.
5

6
00:00:21,890 --> 00:00:28,170
Recall, how do we create a single element with a pointer? We say integer, pointer,
6

7
00:00:28,170 --> 00:00:28,550
X.
7

8
00:00:28,710 --> 00:00:35,790
You can open the braces and then a new integer and then you can use these two parentheses and then 50.
8

9
00:00:36,300 --> 00:00:41,670
Defining an object of type employee as pointer is exactly the same logic.
9

10
00:00:41,910 --> 00:00:47,880
Instead of int, we have here employee. Instead of int here, we have an employee. Instead of 50 here, we have the
10

11
00:00:47,880 --> 00:00:51,310
constructors of the struct and that's it.
11

12
00:00:51,780 --> 00:00:55,020
So this way we declare a pointer of type employee.
12

13
00:00:55,560 --> 00:00:56,790
Now here is a new thing.
13

14
00:00:56,790 --> 00:01:03,230
If you would like to use an object this e2, you cannot just say e2 dot print. C++ uses this arrow style,
14

15
00:01:03,240 --> 00:01:05,390
It is dash, greater than without spaces.
15

16
00:01:05,760 --> 00:01:11,180
This arrow style is used with pointers corresponding to the dot style with the normal objects.
16

17
00:01:11,470 --> 00:01:12,780
So this is one more thing.
17

18
00:01:13,500 --> 00:01:16,710
It just for the sake of fun. Here,
18

19
00:01:16,710 --> 00:01:22,350
If you remember, if you say asterisk e3, you are getting the actual object. As its actual object, you
19

20
00:01:22,350 --> 00:01:23,240
can now use that.
20

21
00:01:23,280 --> 00:01:30,210
So one way is just to put these two parentheses, then put the asterisk and just use it. Don't use that in practice,
21

22
00:01:30,210 --> 00:01:30,910
It is useless.
22

23
00:01:30,930 --> 00:01:31,650
We don't do it.
23

24
00:01:31,890 --> 00:01:36,390
It just I'm telling you the that is available. In a very similar way,
24

25
00:01:36,390 --> 00:01:40,080
we can have pointers who also looking at existing variables.
25

26
00:01:40,290 --> 00:01:48,450
So I can say asterisk e4 equals e2 which is a pointer, or e5 reference e1 which is an object that
26

27
00:01:48,450 --> 00:01:50,160
we need its reference,
27

28
00:01:50,310 --> 00:01:53,330
and remember, this is more of a modern C++ style.
28

29
00:01:54,810 --> 00:01:59,280
Now, here I am defining another variable e6, and I'm giving it asterisk e2.
29

30
00:01:59,670 --> 00:02:00,660
This is also normal.
30

31
00:02:00,670 --> 00:02:04,980
You can take the reference and e asterisk here is just getting the variable. Reference
31

32
00:02:04,980 --> 00:02:06,080
needs an object here
32

33
00:02:06,360 --> 00:02:08,080
but the pointer needs the address itself.
33

34
00:02:08,670 --> 00:02:11,760
Now, you can start to use the variable as normal.
34

35
00:02:12,270 --> 00:02:19,230
Notice here, if I started to change e2 to 111 and print e6, it is going to print the same
35

36
00:02:19,230 --> 00:02:23,160
value of e2 because it's by reference. In a very similar way,
36

37
00:02:23,160 --> 00:02:28,520
I can create a vector of employees like â€” here, I can push back e2 as an object of a pointer.
37

38
00:02:28,770 --> 00:02:35,730
I can also push back a reference of e6 and just use it.
38

39
00:02:37,200 --> 00:02:43,190
Going to delete objects, we have here e2 and e3, the only two created ones with pointers.
39

40
00:02:43,350 --> 00:02:45,480
So these are the only two things that we remove,
40

41
00:02:45,690 --> 00:02:49,610
and after you remove it, please use a null pointer to initialize them.
41

42
00:02:49,950 --> 00:02:55,380
So yeah, that's it about the pointers to struct here
42

43
00:02:55,380 --> 00:02:56,040
in this slide,
43

44
00:02:56,370 --> 00:03:01,190
and remember always to remove the pointer that you created.
44

45
00:03:01,560 --> 00:03:02,070
That's it.
