0
1
00:00:01,620 --> 00:00:06,290
So far, we studied the 1d array in the inner case and the character array.
1

2
00:00:06,690 --> 00:00:12,210
So today we see a generalization for it, which is multidimensional array, let's motivate it.
2

3
00:00:12,750 --> 00:00:19,500
If I told you to write a program that reads the grades for students, we have 100 students and
3

4
00:00:19,500 --> 00:00:20,930
we have 20 subjects.
4

5
00:00:21,300 --> 00:00:29,580
So how can we code that? you are probably going to create 20  arrays for the grades, grad1[100],
5

6
00:00:29,580 --> 00:00:34,230
grade2[100], grade20[100] and so on.
6

7
00:00:34,830 --> 00:00:40,590
In this case, we did a grade per subject for 100 students.
7

8
00:00:42,030 --> 00:00:46,080
But this is very impractical and also it doesn't scale
8

9
00:00:46,080 --> 00:00:47,550
well, what if we have 1000?
9

10
00:00:47,550 --> 00:00:49,250
what if we have one more subject?
10

11
00:00:49,830 --> 00:00:51,130
Let's visualize the data.
11

12
00:00:51,900 --> 00:00:55,350
So here are 7 students and 4 subjects.
12

13
00:00:55,380 --> 00:00:57,230
This is called metrix or a table.
13

14
00:00:57,720 --> 00:01:02,880
So we have here some students and we have here 4 subjects.
14

15
00:01:03,270 --> 00:01:04,830
We can describe it as following,
15

16
00:01:05,070 --> 00:01:07,530
We have here 7 rows, OK?
16

17
00:01:07,830 --> 00:01:09,630
And we have 4 columns.
17

18
00:01:10,710 --> 00:01:16,260
Remember, in array indexing, we were using zero based indexing; so the same.
18

19
00:01:16,260 --> 00:01:22,390
Let's say that the rows are indexed from 0 to 6 and the columns are indexed from 0 to 3.
19

20
00:01:22,830 --> 00:01:28,700
So for example, row 0 here represents Mostafa and the column 0 here represents Math.
20

21
00:01:29,490 --> 00:01:35,520
If I told you what is the value of the table of row 6, column 2 ? then row 6 is here, column
21

22
00:01:35,520 --> 00:01:36,380
2 is here.
22

23
00:01:36,420 --> 00:01:38,960
Remember, we are in zero-indexing.
23

24
00:01:39,360 --> 00:01:48,000
OK, so let's use this nice notation ([6][2]) so one bracket for 6 one bracket of 2, to represent
24

25
00:01:48,000 --> 00:01:50,270
what we need exactly from this
25

26
00:01:50,270 --> 00:01:50,640
nice table.
26

27
00:01:52,340 --> 00:01:59,960
C++ saves our time and gives us this nice utility, the 2D table, something that can be number
27

28
00:01:59,960 --> 00:02:01,910
of rows times number of columns.
28

29
00:02:02,090 --> 00:02:04,550
Exactly same rules like 1D arrays,
29

30
00:02:04,730 --> 00:02:10,370
But now it's more of 2D. How to create it, like following a double grade[7][4],
30

31
00:02:10,670 --> 00:02:16,870
It means 7 rows and 4 columns, to access an array use grades[6][2].
31

32
00:02:17,120 --> 00:02:17,690
That's it.
32

33
00:02:18,470 --> 00:02:22,520
So here is a matrix that is 3x4.
33

34
00:02:22,820 --> 00:02:24,110
These are three rows,
34

35
00:02:24,170 --> 00:02:25,550
These are four columns.
35

36
00:02:25,670 --> 00:02:29,270
If you want to access this index, then it is of value of [1][3].
36

37
00:02:29,930 --> 00:02:34,100
If I would like to code this in C++, I can do it as following,
37

38
00:02:34,100 --> 00:02:38,360
I can say: int val[3][4];,
38

39
00:02:38,510 --> 00:02:41,360
then I am done with the array but it isn't initialized.
39

40
00:02:41,690 --> 00:02:45,770
I can say =, open two braces and write zeros, then they are all zeros.
40

41
00:02:46,130 --> 00:02:54,170
But if I want to initialize it, mainly like that one, then I can come here and open braces and write
41

42
00:02:54,170 --> 00:03:01,540
the first row, comma braces, then write the second row, then braces and write the third row.
42

43
00:03:01,850 --> 00:03:05,720
If you used the =, this is more of the C-style, if you removed it,
43

44
00:03:05,810 --> 00:03:11,660
This is a new C++11 initialization list style. if I would like to access it,
44

45
00:03:11,660 --> 00:03:21,110
Very similar to the normal array, val[1][3], please take your time to 
45

46
00:03:21,410 --> 00:03:27,200
familiarize yourself with this array structure. Let's proceed more.
46

47
00:03:27,680 --> 00:03:31,220
You will notice that it's just as same as the 1D.
47

48
00:03:31,700 --> 00:03:34,250
But we are extending to the to 2D case.
48

49
00:03:34,460 --> 00:03:40,130
I'm here defining a double array of grades, seven rows and six columns, and I put here zero,
49

50
00:03:40,140 --> 00:03:44,620
So all of it now initialized to 0. if I want to put the grades of Mostafa.
50

51
00:03:44,720 --> 00:03:50,540
So Mostafa was at row 0, so notice here, grade[0], grade[0], grade[0], grade[0].
51

52
00:03:50,810 --> 00:03:54,560
And then I started to access the subjects, grade[0][0] is 50
52

53
00:03:54,860 --> 00:04:00,230
This is for math. grade[0][1], grade[0][2], grade[0][3], and so on.
53

54
00:04:00,710 --> 00:04:04,630
For Asmaa, it's grades[1], grades[1], grades[1], and so on.
54

55
00:04:05,030 --> 00:04:09,730
So this is how we can put the values. again,
55

56
00:04:09,920 --> 00:04:14,660
Keep remembering that our indices are zero-based, not one-based.
56

57
00:04:16,500 --> 00:04:22,800
OK, so let's print it, assume I already initialized all of it to zero and then some values, how to print it?
57

58
00:04:23,080 --> 00:04:29,230
We typically need to print it by iterating over every row, and for every row iterate on every column.
58

59
00:04:29,520 --> 00:04:34,630
So it goes as following, in a very standard way: for (int row = 0; row < 7;
59

60
00:04:34,680 --> 00:04:38,130
This is iterating on every row and printing here I'm in row 0.
60

61
00:04:38,550 --> 00:04:44,190
Then you are iterating internally, for column = 0, column < 4, ++column,
61

62
00:04:44,520 --> 00:04:46,860
Then this array access.
62

63
00:04:47,090 --> 00:04:49,800
You are going to see this structure over and over again.
63

64
00:04:49,950 --> 00:04:51,930
Please familiarize yourself with it.
64

65
00:04:53,580 --> 00:05:00,090
OK, let's read the very same concept, let's define an array here, we initialize it to zeros, then we
65

66
00:05:00,090 --> 00:05:01,350
started to read it.
66

67
00:05:01,350 --> 00:05:07,530
So we iterate on rows, then we iterate on columns, and then start to read the array. that's it. If you would
67

68
00:05:07,530 --> 00:05:15,150
like to print it. that's it. as you see just normal extension from 1D to 2D array just by considering
68

69
00:05:15,150 --> 00:05:16,650
a table style right now.
69

70
00:05:17,660 --> 00:05:18,430
That's it for now.
