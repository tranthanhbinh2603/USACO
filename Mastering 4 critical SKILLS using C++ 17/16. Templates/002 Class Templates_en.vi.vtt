WEBVTT

00:00:01.080 --> 00:00:09.390
Theo cách tương tự với các chức năng, Mẫu gần như cùng một logic.  Hãy nói rằng chúng ta có một cấu trúc

00:00:10.360 --> 00:00:16.030
như xếp hàng ở bệnh viện.  Hãy nhớ rằng, chúng ta cần một hàng số nguyên và một hàng chuỗi khác

00:00:16.030 --> 00:00:22.240
vân vân, Suy nghĩ về mã của cấu trúc: mã của nó chỉ là sao chép-dán.

00:00:22.450 --> 00:00:23.100
Chuyện gì đã xảy ra thế?

00:00:23.110 --> 00:00:25.500
Bạn chỉ cần thay thế số nguyên bằng chuỗi,

00:00:25.540 --> 00:00:27.250
Thay thế chuỗi bằng double để có hàng đợi double.

00:00:27.520 --> 00:00:34.450
Đó là nó, giống nhau ở mọi nơi.  Các mẫu lớp
xuất hiện trở lại để trình biên dịch trong

00:00:34.450 --> 00:00:40.890
thời gian biên dịch sẽ tạo ra một số bản sao
cấu trúc của bạn, giống như bạn đã sử dụng nó.

00:00:40.900 --> 00:00:46.510
Nếu tôi đã sử dụng một lớp mẫu gồm số nguyên và một lớp mẫu khác có gấp đôi, thì nó sẽ tạo ra hai phiên bản.

00:00:46.660 --> 00:00:48.040
một số nguyên và một gấp đôi cho bạn.

00:00:49.330 --> 00:00:51.430
Vì vậy, đây là cách

00:00:51.640 --> 00:00:54.220
lớp hàng đợi sẽ được thực hiện trong

00:00:56.810 --> 00:01:03.100
các mẫu lớp.  Bạn thích chức năng đầu tiên thì vào đây và tìm template gõ tên T

00:01:03.110 --> 00:01:03.390
...

00:01:03.940 --> 00:01:09.590
Điều này có nghĩa là lớp này sẽ là một mẫu, sẽ là các phiên bản sao chép-dán

00:01:09.590 --> 00:01:10.820
cho nó và thời gian tuân thủ

00:01:11.270 --> 00:01:17.090
và kiểu là T. Không đâu cả,
Thay vì bạn định nghĩa mảng số

00:01:17.090 --> 00:01:17.540
nguyên hàng trăm, chúng tôi
định nghĩa nó là mảng T hàng trăm.

00:01:18.320 --> 00:01:24.470
Ví dụ, hàm ở đây đang mong đợi trong tham số ở đây một mảng để sao chép từ nó.

00:01:24.470 --> 00:01:26.240
loại nào sẽ là một số nguyên.

00:01:26.240 --> 00:01:29.380
Bạn không thể chỉ đặt số nguyên, nó sẽ thuộc loại T,

00:01:29.630 --> 00:01:36.950
Vì vậy, trình biên dịch sẽ biết rằng đây là T. Ngoài ra, khi bạn
thêm một phần tử, bạn sẽ biết nó thuộc loại T, Ok!.  Điều gì sẽ

00:01:36.950 --> 00:01:43.250
xảy ra nếu tôi có một chức năng có thể cần các loại dữ liệu khác
nhau, bạn vẫn có thể có các chức năng thuộc các loại khác nhau.

00:01:43.530 --> 00:01:47.960
Vì vậy, hãy đối phó với các loại giống như bạn đang đưa ra nhiều loại hơn nếu bạn cần.

00:01:48.320 --> 00:01:50.150
Vì vậy, đây là một lớp học toàn cầu.

00:01:50.150 --> 00:01:55.620
Chúng ta sẽ sử dụng T, chúng ta có thể định nghĩa nhiều hơn một ở đây và cái này dành riêng cho hàm.

00:01:56.090 --> 00:02:01.930
Bây giờ ở đây tôi đang xác định một hàng đợi kiểu chuỗi.

00:02:01.970 --> 00:02:05.790
Nhớ nhỏ hơn và lớn
hơn.  (nên hiếm) Điều này

00:02:05.810 --> 00:02:07.490
quan trọng ở đây là sự
khác biệt trong cú pháp.

00:02:07.670 --> 00:02:12.920
Khi bạn nói hàng đợi của tôi thuộc loại chuỗi, điều đó có nghĩa là vui lòng tạo một bản sao từ lớp này nhưng sử dụng nó dưới dạng chuỗi

00:02:13.250 --> 00:02:18.740
và ở đây tôi đang nói hàng đợi của tôi thuộc
loại Số nguyên nên tôi đang sử dụng nó.  Khi tôi

00:02:18.740 --> 00:02:20.770
đến đây để thêm phía trước thêm phía trước, bạn
chỉ có thể thêm các chuỗi và bạn có thể in chúng.

00:02:21.230 --> 00:02:23.090
Bạn cũng có thể thêm vào đây số nguyên và số nguyên.

00:02:23.360 --> 00:02:26.300
Bây giờ tôi muốn gọi hàm double ở đây với tổng và cộng.

00:02:26.300 --> 00:02:32.150
và tôi có thể sử dụng loại, nó phải là một phần tử duy nhất và chỉ được áp dụng ở đây.

00:02:32.360 --> 00:02:33.170
Vì vậy, cùng một

00:02:33.170 --> 00:02:33.680
logic chính xác.

00:02:33.680 --> 00:02:34.270
Không có gì mới.

00:02:36.000 --> 00:02:42.050
Ngoài ra còn có một thứ bổ sung khi nói đến các lớp, cái mà chúng ta gọi là các tham số không phải kiểu cho các mẫu.

00:02:42.390 --> 00:02:46.690
khi bạn xem kích thước mảng ở đây trong phần trước, nó là const, cố định.

00:02:47.100 --> 00:02:53.770
Điều gì sẽ xảy ra nếu tôi muốn khởi tạo các phiên bản khác nhau, không phải khởi tạo, để tạo các phiên bản khác nhau trong thời gian tuân thủ

00:02:54.110 --> 00:02:56.250
nhưng với các kích cỡ khác nhau vì một lý do và lý do khác?

00:02:56.580 --> 00:03:02.110
Bạn có thể đến đây và thêm vào đây trong mẫu, hôn mê, kích thước số nguyên, rồi sử dụng kích thước bên trong nó.

00:03:02.520 --> 00:03:08.930
Bây giờ trong mã ở đây, bạn nói hàng đợi của tôi, số nguyên, hôn mê 12.

00:03:08.940 --> 00:03:14.570
Điều đó có nghĩa là hàng đợi kiểu số nguyên và biến kích thước sẽ là một kích thước.

00:03:15.090 --> 00:03:18.470
Lưu ý rằng biến này phải không đổi.

00:03:18.510 --> 00:03:19.050
Tại sao?

00:03:19.290 --> 00:03:27.990
Bởi vì trình biên dịch sẽ
tạo mảng ở đây có kích thước

00:03:27.990 --> 00:03:29.640
loại, mảng này phải được
tạo vào thời điểm hoàn thành.

00:03:30.060 --> 00:03:35.620
Vì vậy, nếu biến được
biết trong thời gian chạy,

00:03:35.620 --> 00:03:36.710
trình biên dịch sẽ tạo
mã trước thời gian chạy.

00:03:36.840 --> 00:03:38.600
Vì vậy, nó phải là một giá trị const.

00:03:38.790 --> 00:03:44.310
Cách sử dụng điển hình cho phần bổ sung như vậy là khi bạn xác định một số hằng số và kích thước mảng.

00:03:44.430 --> 00:03:44.990
Đó là nó.

00:03:47.440 --> 00:03:52.010
Hãy nhớ rằng, chúng ta đã nói về chuyên môn hóa chức năng.  Trong lớp

00:03:52.060 --> 00:03:57.100
Cũng có một cái gì đó rất giống nhau.  Tôi không muốn đào
sâu vào chi tiết của nó, nhưng trong lớp, nếu bạn cũng

00:03:57.100 --> 00:04:04.050
có một số trò chơi chung chung, chẳng hạn, một trò chơi
trong lớp có một hành vi cụ thể và sau đó là một lớp khác,

00:04:04.060 --> 00:04:09.220
một trường hợp khác chỉ dành cho chuỗi, bạn đến đây và xác định ở đây nhỏ hơn lớn hơn

00:04:09.490 --> 00:04:17.320
và sau đó bạn thêm vào đây loại mà bạn đã thêm
vào sau tên cấu trúc và cách này cho trường

00:04:17.320 --> 00:04:23.240
hợp chung, cách này sẽ được sử dụng như một
giải pháp chung cho trường hợp cụ thể này,

00:04:23.290 --> 00:04:26.650
Cái này sẽ được sử dụng như một phiên bản cụ thể.

00:04:26.680 --> 00:04:32.530
Vì vậy, hãy nhớ hai điều,
bạn thực hiện trực tiếp ở đây số

00:04:32.530 --> 00:04:33.070
nhỏ hơn số lớn hơn và ở
đây bạn đặt loại dữ liệu cụ thể.

00:04:34.760 --> 00:04:37.790
Điều đáng nói về sự khác biệt giữa quá tải và các mẫu.

00:04:38.190 --> 00:04:43.940
Hãy nhớ ở đây trong các mẫu, chúng tôi có một cú pháp giống hệt nhau mà chúng tôi giữ sao chép dán cho các loại dữ liệu khác nhau.

00:04:43.940 --> 00:04:44.450
Đó là nó.

00:04:44.900 --> 00:04:48.730
Trong nạp chồng hàm, tên hàm giống hệt nhau.

00:04:48.920 --> 00:04:51.920
Nó có các tham số khác nhau và nó có hành vi khác nhau.

00:04:52.130 --> 00:04:54.500
Vì vậy, trong khi trình biên dịch nhìn thấy các tên chức năng khác nhau,

00:04:54.680 --> 00:04:59.820
Nó chỉ thấy các thông số khác nhau và các hành vi tương tự khác nhau.  Trong mọi trường hợp bạn cần phải suy nghĩ về điều đó.

00:05:00.560 --> 00:05:01.130
Đó là nó.