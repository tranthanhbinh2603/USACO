0
1
00:00:00,930 --> 00:00:08,130
Let's introduce a new homework here, let me introduce some background about this homework first, something
1

2
00:00:08,130 --> 00:00:09,680
from real industry.
2

3
00:00:10,200 --> 00:00:18,390
Let's say we have some email service in our system, so it provides some standard features, like just
3

4
00:00:18,390 --> 00:00:19,980
something normal, like email server so.
4

5
00:00:20,010 --> 00:00:24,650
Now they could be extra features, very standard, very bittle.
5

6
00:00:24,660 --> 00:00:28,110
that we add in systems like logging support. Logging support
6

7
00:00:28,110 --> 00:00:33,360
You are logging a lot of info to some file about say you called a specific function.
7

8
00:00:33,360 --> 00:00:34,890
You get specific results and so on.
8

9
00:00:35,700 --> 00:00:36,630
Caching support.
9

10
00:00:36,870 --> 00:00:43,230
The caching support mean that the information are in memory so that we can receive them in a bit faster
10

11
00:00:43,230 --> 00:00:50,460
manner. A thread-Safe support is something that allow us to do parallel competitions and also to access shared
11

12
00:00:50,460 --> 00:00:50,970
resources.
12

13
00:00:51,180 --> 00:00:52,800
You didn't study threading so far.
13

14
00:00:53,670 --> 00:00:59,380
OK, so these are three features in a system that we might add them to any system that we need.
14

15
00:01:00,480 --> 00:01:05,700
There are also some guidelines in the company, for example, that you don't create a single class.
15

16
00:01:06,120 --> 00:01:10,490
There is only one single reason to change a class, otherwise split the feature somehow.
16

17
00:01:10,800 --> 00:01:16,350
For example, you didn't create a single class with logging, caching, thread-safe, which every one of
17

18
00:01:16,350 --> 00:01:21,020
them would require a lot of code and a reason to change by itself.
18

19
00:01:21,030 --> 00:01:25,290
So if you did a single class with all of that, you have now 4 reasons to make a change.
19

20
00:01:25,890 --> 00:01:29,900
There is also another rule in the team or in the company that you shouldn't play with
20

21
00:01:29,940 --> 00:01:31,170
other codes. play here
21

22
00:01:31,170 --> 00:01:32,070
I mean to change it.
22

23
00:01:32,400 --> 00:01:33,390
Consider it closed,
23

24
00:01:33,540 --> 00:01:37,160
Closed means you don't change it, so you just reuse and extend it.
24

25
00:01:37,170 --> 00:01:43,410
Remember, C++ has two mechanism for reusability, composition and inheritance.
25

26
00:01:44,280 --> 00:01:45,810
Now let's go to the task.
26

27
00:01:46,480 --> 00:01:51,360
When you joined a company that has an email service, they had code for the following.
27

28
00:01:51,700 --> 00:01:58,290
A basic email service like here just send, receive very basic code to that, another extension from this code
28

29
00:01:58,290 --> 00:02:00,310
that try and retry
29

30
00:02:00,420 --> 00:02:01,950
retries means if you send an email,
30

31
00:02:02,250 --> 00:02:03,360
But the email failed.
31

32
00:02:03,360 --> 00:02:04,650
You try it again and again.
32

33
00:02:04,650 --> 00:02:06,410
Let's say we are trying it 4 times.
33

34
00:02:06,810 --> 00:02:08,070
So this is a feature by itself.
34

35
00:02:08,670 --> 00:02:11,760
Also another module, the provider thread safe service.
35

36
00:02:12,060 --> 00:02:19,030
So it is the email service, but with also thread-safe. A final module is a thread-safe email service with
36

37
00:02:19,030 --> 00:02:19,620
the retries,
37

38
00:02:19,830 --> 00:02:23,240
So this one is combining these two features together.
38

39
00:02:23,940 --> 00:02:30,990
So now we have here 4 classes and there are different scenarios in the system that they are using the
39

40
00:02:30,990 --> 00:02:31,740
different classes.
40

41
00:02:31,890 --> 00:02:37,740
So some guys just need the very basics email service, some others needed the thread-safe, some other needed the
41

42
00:02:37,740 --> 00:02:41,630
thread safe and retries idea.
42

43
00:02:41,880 --> 00:02:44,190
So the 4 classes are in use in the system.
43

44
00:02:45,150 --> 00:02:46,290
Now here's your task.
44

45
00:02:46,770 --> 00:02:49,560
We would like to add a new module to the system.
45

46
00:02:49,560 --> 00:02:54,690
It is a logger module, so we would like to add it to the overall system.
46

47
00:02:54,690 --> 00:03:01,230
But notice that there were 4 classes before that didn't support the logger.
47

48
00:03:01,230 --> 00:03:01,620
.
48

49
00:03:01,830 --> 00:03:07,980
We still need them as they are like our ability to use any of them without the logging feature and also
49

50
00:03:07,980 --> 00:03:09,890
add logging feature to them.
50

51
00:03:10,230 --> 00:03:16,230
So, for example, the scenarios might be like someone in the team needs a service that is basic
51

52
00:03:16,560 --> 00:03:23,580
and it has a retries, but it doesn't support the thread-safe, another team
52

53
00:03:23,580 --> 00:03:27,180
member would like it to be basic + logging + retries + 
53

54
00:03:27,180 --> 00:03:32,250
+ thread-safe, someone else needs the logging, but he doesn't need the retries or thread-safe.
54

55
00:03:32,700 --> 00:03:38,970
So we would like to change the class diagram to support the old 4 cases and also this new
55

56
00:03:38,970 --> 00:03:42,240
cases, draw the UML by yourself.
56

57
00:03:42,240 --> 00:03:47,850
Remember, you shouldn't modify the current system, just reuse them. After a few months
57

58
00:03:48,300 --> 00:03:50,520
There is a need to support the caching feature.
58

59
00:03:50,850 --> 00:03:55,170
Now, again, all the previous cases has some use in the system.
59

60
00:03:55,380 --> 00:04:00,000
You need to keep them as they are and you also need to provide caching for every case.
60

61
00:04:00,270 --> 00:04:07,260
So, for example, someone might say, I need the basic service, caching, retrials, but he doesn't
61

62
00:04:07,260 --> 00:04:08,440
need logging or thread-safe.
62

63
00:04:08,700 --> 00:04:14,250
So he needs the class to support that. Someone else needs the class that supports all of that, and so on.
63

64
00:04:14,730 --> 00:04:18,450
So try to build on my solution for the previous homework.
64

65
00:04:18,780 --> 00:04:27,120
This is Homework 2, not Homework 1, Sorry for that, Try
65

66
00:04:27,120 --> 00:04:31,380
to identify the issue that happened through what we were explaining.
66

67
00:04:32,040 --> 00:04:32,540
That's it.
