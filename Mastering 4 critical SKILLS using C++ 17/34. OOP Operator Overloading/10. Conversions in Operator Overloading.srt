1
00:00:00,960 --> 00:00:04,330
Another interesting thing in the world of looting is the convergence.

2
00:00:04,860 --> 00:00:11,190
So let's first remember the something about the constructor, if we're defining here, Meyerbeer, into

3
00:00:11,190 --> 00:00:15,360
your X, which is just defining the first and second was X..

4
00:00:15,660 --> 00:00:17,100
This is fair enough, constructor.

5
00:00:17,730 --> 00:00:19,440
Now, let's look here.

6
00:00:19,770 --> 00:00:25,290
If we define X with one and two is going to use the second constructor, if we define Y equals three

7
00:00:25,290 --> 00:00:27,780
here, Y three is going to use the first constructor.

8
00:00:28,380 --> 00:00:34,410
Surprisingly, if you use here equals five is going also to use this constructor.

9
00:00:34,680 --> 00:00:35,790
Think about it for a minute.

10
00:00:38,560 --> 00:00:45,550
In C++, there is a rule if a constructor can be code with a single parameter, it can be used to convert

11
00:00:45,550 --> 00:00:47,830
Edita type and there is a need.

12
00:00:48,250 --> 00:00:49,540
So this conversion happened.

13
00:00:49,720 --> 00:00:55,150
So and here we have only a single argument constructor, OK?

14
00:00:55,330 --> 00:01:01,000
It can be it can be into X and something that has a temporary default value.

15
00:01:01,510 --> 00:01:07,600
So here we are in C++ C that this five a double check if there is a single AragÃ³n constructor that can

16
00:01:07,600 --> 00:01:08,940
take this value or not.

17
00:01:09,130 --> 00:01:12,020
If so, the C++ is going to do conversion.

18
00:01:12,310 --> 00:01:18,160
So this what we call a conversion constructor, it is going to convert something to our database.

19
00:01:18,820 --> 00:01:22,590
Now, this has an application over the operator overloading.

20
00:01:22,960 --> 00:01:26,890
Let's say you are defining a non-member function operator, plus the text two objects.

21
00:01:27,280 --> 00:01:33,550
If I wanted to do something like X plus five point three, the problem here, five point three, the

22
00:01:33,550 --> 00:01:34,690
function is going to search.

23
00:01:34,690 --> 00:01:36,610
Is there something of Dibia and double?

24
00:01:36,820 --> 00:01:38,230
The answer is no, there is nothing.

25
00:01:38,770 --> 00:01:44,210
But five point three is convertible to X, so double is convertible to integrate.

26
00:01:44,470 --> 00:01:51,520
So this constructor will be used internally to convert this five point three to a beer that have two

27
00:01:51,520 --> 00:01:56,200
values, five and five, and then use it directly and in a very similar way.

28
00:01:56,200 --> 00:01:58,820
We can do three plus X and replace X plus five.

29
00:01:59,260 --> 00:02:01,660
So the moral of that is.

30
00:02:03,030 --> 00:02:05,160
C++ with that can do conversions.

31
00:02:05,190 --> 00:02:11,790
Remember, we once did like overeaten plus for my beer and intriguer and for Integral my beer, but

32
00:02:11,790 --> 00:02:15,090
now with this conversion constructor, we actually do need them.

33
00:02:15,810 --> 00:02:22,410
However, this isn't the same for the member function conversion operator, which is still need something

34
00:02:22,410 --> 00:02:24,130
that isn't just a temporary value here.

35
00:02:24,480 --> 00:02:32,070
So these three can be converted to a minor object, but it would be temporary and C++ prevent it for

36
00:02:32,070 --> 00:02:34,320
and for a member function.

37
00:02:34,350 --> 00:02:36,540
So this is only available to another function.

38
00:02:37,110 --> 00:02:46,290
Now what if I would like to prevent this implicit conversions from the some integer to my class or whatever

39
00:02:46,530 --> 00:02:47,490
I can say here?

40
00:02:47,490 --> 00:02:48,170
Explicit.

41
00:02:48,180 --> 00:02:53,760
If I did the explicit, I'm saying I allow constructor like that, but please do not do a conversion

42
00:02:53,760 --> 00:02:54,340
here, OK?

43
00:02:54,600 --> 00:02:57,080
By the way, the conversion doesn't need to be primitive.

44
00:02:57,210 --> 00:03:03,260
If you have a class rectangle and you have my bit of rectangle and you say the equals of rectangle,

45
00:03:03,270 --> 00:03:05,600
it's going to convert it in an implicit way.

46
00:03:05,850 --> 00:03:12,210
So if you would like to disable this kind of conversion, you just put the word explicit, then this

47
00:03:12,780 --> 00:03:13,620
could be constructed.

48
00:03:14,010 --> 00:03:20,160
This construction will not be allowed and this one will be allowed either member the functions in a

49
00:03:20,160 --> 00:03:25,800
similar way, like the conversion constructor who can provide the conversion or the conversion constructor

50
00:03:25,800 --> 00:03:31,200
converted something to our class, like integral to across the square, to across the rectangle, across

51
00:03:31,530 --> 00:03:35,250
the conversion operator is the reverse it convert our class to something.

52
00:03:35,490 --> 00:03:36,730
So here is how we define it.

53
00:03:36,750 --> 00:03:42,210
If I say operator integer, you open the function and close it and return an integer.

54
00:03:42,450 --> 00:03:45,660
This is going to convert your Berglas to a number.

55
00:03:46,020 --> 00:03:51,070
Or you say I would like to provide a return over into your entier, then you return it.

56
00:03:51,270 --> 00:03:52,790
Then again, it can be used here.

57
00:03:53,040 --> 00:03:56,880
So you see you are converting the class, our class to another data type.

58
00:03:57,930 --> 00:04:02,940
Now these two types of conversions happens in an implicit way most of the time, and we don't notice

59
00:04:02,940 --> 00:04:03,210
them.

60
00:04:03,450 --> 00:04:05,600
So they are in practice very problematic.

61
00:04:05,880 --> 00:04:11,490
So I would suggest for you to use all those explicit to prevent this conversion and to not support this

62
00:04:11,490 --> 00:04:17,010
kind of operators, if you would like to submit to them, make a function explicitly like, say, function

63
00:04:17,010 --> 00:04:24,180
to say to bear function to end when someone is using it in in an explicit way, that's it.
