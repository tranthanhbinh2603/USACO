0
1
00:00:01,830 --> 00:00:09,870
In this video, you will learn how to use eclipse's debugger to debug, we have here a simple code, two functions,
1

2
00:00:09,870 --> 00:00:15,150
one of them sum_square, which is just iterate on an array, summing every element, squaring every
2

3
00:00:15,150 --> 00:00:19,650
element, then sum all of them together. We have also another factorial function and some main here.
3

4
00:00:20,760 --> 00:00:26,760
Let's first see where are the items in the IDE that are relevant to the debugger.
4

5
00:00:27,420 --> 00:00:32,670
First, go to the project itself, properties, you can find here in the setting,
5

6
00:00:34,200 --> 00:00:36,510
Yeah, this debugging is one menu for some options,
6

7
00:00:36,510 --> 00:00:38,870
but what we care more here is the configuration.
7

8
00:00:39,240 --> 00:00:43,950
If you notice here, there are two configurations, one for the debug and another for the release.
8

9
00:00:44,280 --> 00:00:48,930
If you would like to switch off from one to another, you come here and you must click it and you must
9

10
00:00:48,930 --> 00:00:49,770
set it active.
10

11
00:00:50,220 --> 00:00:52,590
Just switching it from here to there will not work.
11

12
00:00:53,340 --> 00:01:00,390
Let's try it. If you put here this as set active, you clicked OK then ok,
12

13
00:01:00,840 --> 00:01:03,210
you will notice here a new directory named release.
13

14
00:01:03,210 --> 00:01:05,700
Also there is a compilation error here.
14

15
00:01:05,730 --> 00:01:09,720
Why? this is a modern C++ syntax.
15

16
00:01:10,110 --> 00:01:18,690
If you go to the configuration here of miscellaneous, you notice there's no C++ 17 here, but it's
16

17
00:01:18,690 --> 00:01:19,680
here in the debug one.
17

18
00:01:20,070 --> 00:01:26,040
So remember, if you configured the debugger, then moved to the release, it will not inherit
18

19
00:01:26,370 --> 00:01:27,210
the configuration.
19

20
00:01:27,210 --> 00:01:31,860
You have to write them again by yourself or fix everything to the old configuration from the beginning.
20

21
00:01:32,770 --> 00:01:39,390
Remember, the debugging only happened in the debug mode, so you need to use the debug mode. If it didn't work
21

22
00:01:39,390 --> 00:01:43,360
Well, one major reason is that you aren't in the debug mode.
22

23
00:01:43,470 --> 00:01:45,750
So now let's go back to the debugging mode.
23

24
00:01:45,960 --> 00:01:47,160
This is mainly the configuration.
24

25
00:01:47,160 --> 00:01:48,720
I wanted you to check it out here.
25

26
00:01:53,940 --> 00:01:54,690
Yeah, let's click OK.
26

27
00:01:54,730 --> 00:02:00,990
So now the code is compiling. The second place of the debugging, which typically we will not
27

28
00:02:00,990 --> 00:02:04,100
need, is to go to the window preferences here.
28

29
00:02:04,130 --> 00:02:09,950
There is a debugging menu with a lot of options like - stop on the start-up, which will
29

30
00:02:10,260 --> 00:02:13,800
stop your program in the first line. You notice here with the GDP program.
30

31
00:02:13,800 --> 00:02:17,220
If it happens that you change it, then you might need to change it here.
31

32
00:02:17,700 --> 00:02:22,530
The difference between the window menu and the project menu, the window menu is like for all of the
32

33
00:02:22,530 --> 00:02:23,130
projects,
33

34
00:02:23,400 --> 00:02:27,660
but the window menu is more specific for the project. You will typically not need to play with
34

35
00:02:27,660 --> 00:02:30,750
this one, but in case for advanced changes.
35

36
00:02:31,410 --> 00:02:34,050
The third position is the configuration of the running.
36

37
00:02:34,060 --> 00:02:38,370
We used to click this button to run, but we can now click on this bug
37

38
00:02:38,380 --> 00:02:41,700
symbol to run, or if you have several for configuration, you click it here,
38

39
00:02:41,940 --> 00:02:44,190
but let's first go to the debug configuration from here.
39

40
00:02:44,460 --> 00:02:45,720
This is the third place.
40

41
00:02:45,930 --> 00:02:47,610
You notice the program that we run
41

42
00:02:47,610 --> 00:02:48,330
is the debug
42

43
00:02:48,510 --> 00:02:49,090
ztemp
43

44
00:02:49,140 --> 00:02:50,190
debug is a folder name,
44

45
00:02:50,940 --> 00:02:55,260
and you notice here is that the debugger also options coming from the global options.
45

46
00:02:55,530 --> 00:02:57,360
But again, you still don't need them anyway.
46

47
00:02:58,980 --> 00:02:59,680
Yeah, that's all.
47

48
00:02:59,700 --> 00:03:01,710
So let's start debugging.
48

49
00:03:02,880 --> 00:03:03,810
Let's click this guy.
49

50
00:03:05,440 --> 00:03:09,790
OK, you see here, it didn't work if it happened that this happens with you, I would like you to come
50

51
00:03:09,790 --> 00:03:11,820
and create what we call a break point.
51

52
00:03:11,830 --> 00:03:13,690
You come here and double-Click twice.
52

53
00:03:14,080 --> 00:03:18,250
It will be a blue small point here, now, let's try again.
53

54
00:03:20,700 --> 00:03:28,260
Now, the debugger started, the first thing you noticed is we went to a different style for the IDE. It's called
54

55
00:03:28,620 --> 00:03:35,550
a perspective. If you come here to the window, open perspective, you notice there are several kind of perspectives
55

56
00:03:35,550 --> 00:03:36,210
that we have here,
56

57
00:03:36,210 --> 00:03:38,190
and this is called the debug perspective.
57

58
00:03:42,000 --> 00:03:45,430
Yeah, anyway, let's focus now on the debugging itself.
58

59
00:03:45,960 --> 00:03:49,550
There are a few buttons that are very important for you to know.
59

60
00:03:49,950 --> 00:03:53,340
The first one is this one, which is resuming to a breakpoint.
60

61
00:03:53,490 --> 00:03:58,380
A breakpoint is a point in the code where you would like your code to stop at it.
61

62
00:03:58,530 --> 00:03:59,550
When we put this one,
62

63
00:03:59,550 --> 00:04:01,350
you see the compiler come to this line.
63

64
00:04:01,350 --> 00:04:06,130
It means the compiler is here, and this guy can stop the process.
64

65
00:04:06,150 --> 00:04:09,950
Now, there are other three buttons that are very important for us.
65

66
00:04:10,290 --> 00:04:14,850
The first one is this guy, which is named Step into, it is F5,
66

67
00:04:15,180 --> 00:04:19,430
and the other guy is a step over, F6, and there is also step return F7.
67

68
00:04:19,680 --> 00:04:20,790
What is the difference?
68

69
00:04:21,630 --> 00:04:25,280
The step over doesn't go in the details of the line.
69

70
00:04:25,380 --> 00:04:30,210
For example, if the line is for a function, it doesn't go inside the function, it just gives you the
70

71
00:04:30,210 --> 00:04:31,350
final output of it.
71

72
00:04:31,830 --> 00:04:38,990
Step_into lets you get inside the function or the class's details. Step_return just gets you out of it.
72

73
00:04:39,220 --> 00:04:40,890
Let's see how to use that in details.
73

74
00:04:40,890 --> 00:04:44,880
Let's, for now, go with just step_over, which is F6,
74

75
00:04:44,880 --> 00:04:45,750
and we will use it a lot.
75

76
00:04:46,200 --> 00:04:50,130
We have an array, now we are in line 28.
76

77
00:04:50,130 --> 00:04:54,960
If you go and stopover this arrow, you will start to notice that you can see the content of the
77

78
00:04:54,960 --> 00:04:55,710
array itself.
78

79
00:04:56,100 --> 00:05:00,960
You can also come here to the variables to see the current variable, which is an array, you will find
79

80
00:05:00,960 --> 00:05:02,970
that it has now these three values.
80

81
00:05:06,150 --> 00:05:08,690
Notice,
81

82
00:05:08,730 --> 00:05:09,600
this is a function.
82

83
00:05:09,810 --> 00:05:11,730
If you step into, you go inside the function,
83

84
00:05:11,730 --> 00:05:18,000
but if we step over like here, we get only directly the result, which is now 29. You notice here 29.
84

85
00:05:18,000 --> 00:05:18,240
...
85

86
00:05:18,780 --> 00:05:21,950
One of the things is you can change values on the fly.
86

87
00:05:22,080 --> 00:05:25,030
So for example, I can here come and say, oh, this was a wrong value.
87

88
00:05:25,350 --> 00:05:25,920
Let's for now,
88

89
00:05:25,920 --> 00:05:26,740
fix it to 5.
89

90
00:05:27,300 --> 00:05:30,410
So now if you come to the result, you will find it now becomes 5.
90

91
00:05:30,660 --> 00:05:34,660
So the debugger lets you make changes during the execution itself.
91

92
00:05:35,160 --> 00:05:36,990
Let's change the value of the array.
92

93
00:05:37,000 --> 00:05:37,860
Again, step over here,
93

94
00:05:38,010 --> 00:05:42,330
you notice the array value changed. We have here a vector.
94

95
00:05:42,330 --> 00:05:45,620
If we did step vector v, oh, I did step into.
95

96
00:05:45,630 --> 00:05:46,170
OK, it's a good
96

97
00:05:46,170 --> 00:05:46,380
....
97

98
00:05:46,380 --> 00:05:49,980
lesson, also. If you did step_into, you notice it get you inside
98

99
00:05:50,280 --> 00:05:52,970
the things of the C++ std itself.
99

100
00:05:53,340 --> 00:05:57,750
Now, this is a good time to do std step return to get you out of it.
100

101
00:05:57,750 --> 00:06:04,620
Now, we get back here. Let's again do step_over. Now, there is vector V here, which has also these
101

102
00:06:04,620 --> 00:06:06,570
three elements, we can push back
102

103
00:06:06,570 --> 00:06:08,640
another element, you see here, it's now updated.
103

104
00:06:08,880 --> 00:06:12,850
You can update the factorial's output. Still didn't crash.
104

105
00:06:12,870 --> 00:06:16,770
, if you click this guy, it just resume and finish the program.
105

106
00:06:17,760 --> 00:06:19,200
Let's start this process again.
106

107
00:06:19,950 --> 00:06:23,730
Now, you learned about F6, which is just getting you to step by step.
107

108
00:06:23,730 --> 00:06:26,760
You can see the values during the execution.
108

109
00:06:26,760 --> 00:06:28,160
You can change them on the fly.
109

110
00:06:28,410 --> 00:06:30,810
Now, let's try to get step_into something here.
110

111
00:06:30,810 --> 00:06:34,200
In this function, we will step inside it.
111

112
00:06:34,500 --> 00:06:38,670
So step_into, now we jumped inside the square function.
112

113
00:06:38,670 --> 00:06:40,830
We have the array, we have the length.
113

114
00:06:41,160 --> 00:06:43,920
Now, here is one of very interesting things. Looking at this,
114

115
00:06:44,220 --> 00:06:46,140
this is called the stack.
115

116
00:06:46,290 --> 00:06:51,150
Remember, we learned that there is a stack of function calls. This is the stack of function calls.
116

117
00:06:51,300 --> 00:06:54,780
If you click here, it shows you that you were in the main function.
117

118
00:06:54,870 --> 00:06:56,130
So this is the stack of it,
118

119
00:06:56,370 --> 00:06:58,780
and now we called now another function here.
119

120
00:06:58,980 --> 00:07:04,420
So the stack now has the sum_square function and it has these variables, once this
120

121
00:07:04,800 --> 00:07:08,240
function is done, these would be all destroyed.
121

122
00:07:08,520 --> 00:07:10,170
Now, we are here at line 16.
122

123
00:07:10,170 --> 00:07:13,920
We can step over this guy, get in the variable.
123

124
00:07:14,250 --> 00:07:22,710
So now i is zero, the array of i is the array of zero, which will be 2, 2 times 2 will be 4. We can
124

125
00:07:22,710 --> 00:07:27,300
double-check that X-X now has a value of 4. We keep summing, we can keep going.
125

126
00:07:27,480 --> 00:07:31,620
What if I would like to just jump directly out of this small code. Let's say
126

127
00:07:31,620 --> 00:07:33,180
I would like to jump to line 22.
127

128
00:07:33,180 --> 00:07:42,480
You can come here double click, then this is a big point, and you can click this resume which you will
128

129
00:07:42,480 --> 00:07:42,990
get you.
129

130
00:07:43,770 --> 00:07:44,670
What happened?
130

131
00:07:45,930 --> 00:07:46,830
I'm not sure.
131

132
00:07:47,450 --> 00:07:50,580
...
132

133
00:07:50,580 --> 00:07:51,930
Let's put it just here.
133

134
00:07:53,010 --> 00:07:54,330
Let's start this program again.
134

135
00:07:56,060 --> 00:08:00,740
Debugger still can give you a hard time. You know, the program started here. If I press this button,
135

136
00:08:00,740 --> 00:08:07,700
it will jump directly to this line here. You see. So we use breakpoints to make big jumps in the code.
136

137
00:08:07,880 --> 00:08:14,150
If you know there is a very deep function that has a very specific error in your code, you can directly
137

138
00:08:14,150 --> 00:08:15,850
put a break point and run your code there.
138

139
00:08:17,210 --> 00:08:18,890
Let's also see the expressions.
139

140
00:08:18,920 --> 00:08:23,690
The expression is you can build expression like - let's say here I putt the expression of two times
140

141
00:08:23,720 --> 00:08:26,470
sum. Sum now stills garbage.
141

142
00:08:26,780 --> 00:08:27,880
Now it will be zero.
142

143
00:08:28,100 --> 00:08:29,090
Let's increment it.
143

144
00:08:29,210 --> 00:08:30,940
You see, the expression is changing,
144

145
00:08:31,160 --> 00:08:32,780
this isn't a variable in your program,
145

146
00:08:32,930 --> 00:08:35,080
you are just want to monitor some expressions.
146

147
00:08:35,570 --> 00:08:38,090
Now, let's say I am done with this function,
147

148
00:08:38,090 --> 00:08:39,400
I would like to get outside it.
148

149
00:08:39,410 --> 00:08:43,190
You can come here to step return and just click it,
149

150
00:08:43,400 --> 00:08:47,170
you get out of the function.
150

151
00:08:47,720 --> 00:08:57,710
So now we learned about the configuration, about the five options, and you now can see changes
151

152
00:08:57,710 --> 00:08:59,510
that we were doing in the code.
152

153
00:09:00,980 --> 00:09:05,150
Let's get a little more further tricks.
153

154
00:09:05,630 --> 00:09:08,480
Let's say I'm going to make this change.
154

155
00:09:08,480 --> 00:09:15,760
I'm going to come here and say minus one two zero zero zero zero zero zero zero.
155

156
00:09:16,340 --> 00:09:18,350
Let's run this program. If we run it,
156

157
00:09:19,340 --> 00:09:25,320
It's going to crash because we have such an invalid index. One of the best things in the debugger,
157

158
00:09:25,580 --> 00:09:29,070
It could sometimes get you directly where is the problem.
158

159
00:09:29,090 --> 00:09:30,830
I'm going to remove this break point.
159

160
00:09:30,950 --> 00:09:32,390
I'm going to run debug here,
160

161
00:09:33,980 --> 00:09:39,740
and I'm going to tell it, just go. You see what happened, it jumped directly to where is the problem.
161

162
00:09:39,890 --> 00:09:40,400
So now,
162

163
00:09:40,560 --> 00:09:45,020
instead of you keep thinking about where is the problem, I'm writing a lot of printing statement, you can
163

164
00:09:45,020 --> 00:09:48,080
directly jump to where is the problem in your code.
164

165
00:09:48,620 --> 00:09:53,780
So this is one of the very nice things about the debugger. It could sometimes cut a lot of your time.
165

166
00:09:56,360 --> 00:09:58,460
I think we are done with all of the major features,
166

167
00:09:58,610 --> 00:10:01,760
but I would like to show you one more advanced feature.
167

168
00:10:02,150 --> 00:10:03,930
You double click on the break point here.
168

169
00:10:04,940 --> 00:10:07,850
Let's put it here and you right
169

170
00:10:07,850 --> 00:10:10,880
click, get the break point,
170

171
00:10:10,880 --> 00:10:11,900
What properties?
171

172
00:10:12,080 --> 00:10:13,460
Yes, go to
172

173
00:10:13,470 --> 00:10:17,120
common. This is called conditional break point.
173

174
00:10:17,300 --> 00:10:20,090
A conditional break point is a break point that has a condition.
174

175
00:10:20,300 --> 00:10:23,240
So you only go to it if there is a specific condition.
175

176
00:10:23,240 --> 00:10:31,010
Let's say that you would like to go when sum, let's write that, sum equal-equal 4. You would like to
176

177
00:10:31,040 --> 00:10:36,550
make a breakpoint, and you want the code to only jump there once the sum is four.
177

178
00:10:36,650 --> 00:10:37,490
So let's try it.
178

179
00:10:40,950 --> 00:10:41,670
Let's go.
179

180
00:10:42,600 --> 00:10:44,950
So now what is the value of sum? 4
180

181
00:10:45,390 --> 00:10:48,270
This is one of the very nice tricks.
181

182
00:10:48,270 --> 00:10:51,030
If you know there is a specific condition where the code fails,
182

183
00:10:51,540 --> 00:10:58,050
you just go to it in a very direct way. I think that's all about the debugger.
183

184
00:10:58,290 --> 00:11:01,380
Remember that you cannot in the release mode.
184

185
00:11:01,710 --> 00:11:07,890
You have to have a debugger mode which would typically give you such a directory with such executable.
185

186
00:11:09,540 --> 00:11:13,500
In some of your cases, when guys try to run the debugger, it might not work eventually.
186

187
00:11:14,460 --> 00:11:16,380
Sometimes it happens, but keep trying.
187

188
00:11:17,340 --> 00:11:18,630
Yeah, that's all.
