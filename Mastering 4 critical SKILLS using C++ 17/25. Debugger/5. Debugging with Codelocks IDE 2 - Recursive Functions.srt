0
1
00:00:01,200 --> 00:00:08,520
In this video, we will learn how the debugger can help us to understand factorial and understand some of
1

2
00:00:08,520 --> 00:00:10,070
complicated cases about it.
2

3
00:00:10,080 --> 00:00:12,300
So let's use the factorial as a simple example.
3

4
00:00:12,990 --> 00:00:18,420
Now, let's run.
4

5
00:00:21,720 --> 00:00:27,180
The first thing to notice here, as we said before, we have a stack of functions. Here is the main stack
5

6
00:00:27,420 --> 00:00:30,350
and the factorial five stack. Let's trace step by step.
6

7
00:00:30,870 --> 00:00:37,260
You go next line and then next line, which jumped to another breakpoint. Looking to the stack here,
7

8
00:00:37,530 --> 00:00:44,360
we have a stack of factorial N five, and a stack of factorial N four. Our current call stack has three functions.
8

9
00:00:44,970 --> 00:00:46,170
Let's continue tracing.
9

10
00:00:48,750 --> 00:00:54,150
Now, another function in the stack. The good about the debugger, you can see all of the functions,
10

11
00:00:54,330 --> 00:00:57,090
and you can know what's happening. If you double click here,
11

12
00:00:57,120 --> 00:01:00,050
you know that N equal 4 is calling us, ret
12

13
00:01:00,060 --> 00:01:02,970
is uninitialized. Now N equal here
13

14
00:01:03,210 --> 00:01:06,730
3. Again also ret is uninitialized.
14

15
00:01:07,350 --> 00:01:10,590
Let's keep going, next,
15

16
00:01:10,790 --> 00:01:12,470
It jumps here, next,
16

17
00:01:12,490 --> 00:01:13,480
It jumps here.
17

18
00:01:13,920 --> 00:01:19,900
Now, at the N equal 1, we notice that the function is about to return.
18

19
00:01:20,190 --> 00:01:23,940
So once it returned, this factorial N = 1 should be removed from the stack.
19

20
00:01:24,330 --> 00:01:26,700
So let's see what's going to happen here, next,
20

21
00:01:28,390 --> 00:01:34,570
you see now what happened, it removed from the stack, and we get back to the function of N equal 2, and
21

22
00:01:34,570 --> 00:01:38,470
we have here our ret with value 1. Now, we will multiply the ret with 2,
22

23
00:01:40,520 --> 00:01:47,720
and returning the result to the factorial of N equals 3, which will have the ret now with
23

24
00:01:47,720 --> 00:01:53,440
2, and will be multiplied with 3, so now, it going to be six.
24

25
00:01:53,480 --> 00:01:54,770
Returning six to whom?
25

26
00:01:54,980 --> 00:01:57,980
To factorial N power of 4 that called us.
26

27
00:01:58,370 --> 00:02:01,610
So now we have here 4 times 6
27

28
00:02:01,610 --> 00:02:09,350
24, returned to factorial N five, which was the first call to the factorial here,
28

29
00:02:09,360 --> 00:02:15,380
multiplied it, it will be 120 and then return it. Once you return here we see it's going
29

30
00:02:15,380 --> 00:02:16,100
back to the main.
30

31
00:02:16,100 --> 00:02:18,940
Once the main is done, the whole program is done.
31

32
00:02:19,310 --> 00:02:25,160
So the moral of that, if you got confused about a recursive function, put a break point and just
32

33
00:02:25,160 --> 00:02:27,470
find the the answer to your problem.
33

34
00:02:28,280 --> 00:02:28,880
That's it.
