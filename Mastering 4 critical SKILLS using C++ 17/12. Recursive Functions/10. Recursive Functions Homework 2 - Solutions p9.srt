0
1
00:00:00,870 --> 00:00:05,610
Let's solve the second set of the homework and recursive functions.
1

2
00:00:05,940 --> 00:00:08,970
And this is going to be incrementally harder and harder.
2

3
00:00:09,300 --> 00:00:14,150
So don't feel bad if things didn't go well, like it's a matter of an iterative learning.
3

4
00:00:14,160 --> 00:00:19,170
I would like you to keep going in the course, because most of the course does not depend on recursive
4

5
00:00:19,170 --> 00:00:19,710
functions.
5

6
00:00:20,100 --> 00:00:24,360
And from time to time, come back and try to fight more with one of the examples.
6

7
00:00:25,180 --> 00:00:27,660
And the first function would like to compute the Right-Max.
7

8
00:00:27,690 --> 00:00:31,140
We previously computed the left-max, this time is the right side.
8

9
00:00:31,620 --> 00:00:32,890
So how to think about that?
9

10
00:00:32,910 --> 00:00:34,140
I'm here at one.
10

11
00:00:34,590 --> 00:00:38,190
I need to be the maximum of me and all of my right side.
11

12
00:00:38,730 --> 00:00:45,030
So maybe recursively I can do the following; if I can get the right max of my right side,
12

13
00:00:45,330 --> 00:00:47,490
I can just maximize between myself and him.
13

14
00:00:48,060 --> 00:00:52,860
So this encourages to make a recursive call on your right side first to compute its right max.
14

15
00:00:53,550 --> 00:00:56,040
So the function would be as following. This time
15

16
00:00:56,040 --> 00:00:56,830
we need length
16

17
00:00:56,850 --> 00:00:59,640
and for making it easier for you,
17

18
00:00:59,970 --> 00:01:02,040
you need the starting position for this time.
18

19
00:01:02,790 --> 00:01:04,790
So it would be like first
19

20
00:01:04,800 --> 00:01:10,440
I am at the starting position zero, then one, two, three, four, and so on.
20

21
00:01:11,100 --> 00:01:11,460
Let's see.
21

22
00:01:11,460 --> 00:01:13,380
Some couldn't see if we can trace it or not.
22

23
00:01:14,420 --> 00:01:18,020
I'm writing here two versions in the first version, I say the following.
23

24
00:01:18,770 --> 00:01:23,270
The starting position will start by zero and keep moving to the right side, up to the end of the
24

25
00:01:23,270 --> 00:01:23,600
array.
25

26
00:01:24,020 --> 00:01:26,840
So once we are at the end of the array, we're done, finish it.
26

27
00:01:27,560 --> 00:01:34,130
Now we start by calling.., compute the right max for the array.
27

28
00:01:34,250 --> 00:01:37,790
But starting from position plus one, what does the call mean?
28

29
00:01:38,030 --> 00:01:44,300
It means please compute for me the maximum of every position and its right positions.
29

30
00:01:44,480 --> 00:01:47,420
But do that only from the position one.
30

31
00:01:48,050 --> 00:01:51,950
So what is the expected result from this recursive call?
31

32
00:01:52,490 --> 00:01:59,150
If we are given here one, eight, two, ten, and three, we say, hey, one isn't your job. Compute the
32

33
00:01:59,150 --> 00:02:04,700
right maximum of my right side array, which would be...; when you compute about it,
33

34
00:02:05,060 --> 00:02:09,140
it will be like we are here computing it by hand not recursively.
34

35
00:02:09,530 --> 00:02:12,080
What is the maximum side in all of this interval?
35

36
00:02:12,110 --> 00:02:12,710
It is ten.
36

37
00:02:13,910 --> 00:02:20,810
What is the maximum side of all of this interval is ten and ten and three.
37

38
00:02:21,080 --> 00:02:22,220
This is the result
38

39
00:02:22,400 --> 00:02:25,280
I computed by hand, not by code.
39

40
00:02:25,880 --> 00:02:29,150
Now, once this one is done, I am saying, you know what?
40

41
00:02:29,630 --> 00:02:30,710
The right
41

42
00:02:30,710 --> 00:02:38,300
maximum of me is the maximum between my value and just the value directly after me, which is max
42

43
00:02:38,300 --> 00:02:41,600
between one and ten, which is also 10.
43

44
00:02:42,380 --> 00:02:44,840
I hope that this isn't that hard for you to get.
44

45
00:02:45,290 --> 00:02:49,160
The moral of that is; you, in a very clear way, define
45

46
00:02:49,160 --> 00:02:51,200
what does your function mean. Here,
46

47
00:02:51,440 --> 00:02:57,960
it means if we compute the maximum from position, for example, four then if we call this function with
47

48
00:02:57,980 --> 00:03:02,810
position four, it should compute the maximum for position four up to the end of the array.
48

49
00:03:03,170 --> 00:03:03,650
That's it.
49

50
00:03:03,680 --> 00:03:05,720
This is all what is required from it.
50

51
00:03:07,040 --> 00:03:11,060
So I compute the result, and then I take an action based on that.
51

52
00:03:11,570 --> 00:03:11,990
OK.
52

53
00:03:12,230 --> 00:03:14,930
Why did I give you the start position equal zero?
53

54
00:03:15,260 --> 00:03:18,050
To make your life easier while coding it.
54

55
00:03:18,620 --> 00:03:19,820
Now there is a challenge.
55

56
00:03:20,180 --> 00:03:23,060
Can we do it without the start position at all?
56

57
00:03:23,180 --> 00:03:24,050
Can you do that?
57

58
00:03:25,730 --> 00:03:26,750
Here is a trivial way.
58

59
00:03:29,220 --> 00:03:33,580
First of all, with this recursive function we don't a length anymore
59

60
00:03:33,630 --> 00:03:37,170
so if the length is one or less than or equal one, there is nothing to do.
60

61
00:03:38,160 --> 00:03:39,390
Now look to the following.
61

62
00:03:39,540 --> 00:03:47,160
I'm going to call with array plus one, which means we'll call with this sub array here and length minus
62

63
00:03:47,160 --> 00:03:48,930
one, because the length now decreased.
63

64
00:03:49,560 --> 00:03:51,340
Now, when we compute this answer,
64

65
00:03:51,360 --> 00:03:58,920
it is going to update the array again to be like that.
65

66
00:04:01,100 --> 00:04:06,830
Once we are done with that, array of zero is going to be the maximum between my position, and my right
66

67
00:04:06,830 --> 00:04:07,220
side.
67

68
00:04:08,240 --> 00:04:14,690
OK, so the moral of that is; you call with the array changing itself, you are giving this sub
68

69
00:04:14,770 --> 00:04:17,990
array and telling him, please compute the maximum,
69

70
00:04:17,990 --> 00:04:19,550
right maximum of this sub-array.
70

71
00:04:19,970 --> 00:04:21,680
It will compute this right maximum.
71

72
00:04:22,220 --> 00:04:26,990
Then all what you need now is a comparison between position zero and position one. That's it.
72

73
00:04:28,220 --> 00:04:33,650
Please don't get trapped in tracing the code for infinite number of sub-codes.
73

74
00:04:34,100 --> 00:04:36,920
Just think, what does this function do?
74

75
00:04:37,280 --> 00:04:38,000
The following:
75

76
00:04:38,330 --> 00:04:42,810
Every time I will see this function call, I will just apply by hand
76

77
00:04:42,830 --> 00:04:43,640
what does it mean?
77

78
00:04:43,640 --> 00:04:44,410
Not by code.
78

79
00:04:44,420 --> 00:04:46,160
I'm going to ask, what does it do?
79

80
00:04:46,160 --> 00:04:48,050
x, y, z, apply x, y, z.
80

81
00:04:48,350 --> 00:04:48,890
That's all.
81

82
00:04:51,080 --> 00:04:55,100
OK, let's see the second function.
82

83
00:04:56,860 --> 00:05:02,710
"Suffix Sum" and the "Prefix Sum". The suffix sum would like to sum the last N elements.
83

84
00:05:04,110 --> 00:05:06,740
So here in the code, the idea is as following.
84

85
00:05:07,200 --> 00:05:14,370
I'm going here to pass length and count. Length is a total array length and the current count. Now,
85

86
00:05:15,340 --> 00:05:22,150
with every call I can say, I don't think we should no, we still need it here.
86

87
00:05:22,570 --> 00:05:29,620
I'm going to tell it I would like you to compute the suffix sum of the last count minus one elements
87

88
00:05:29,620 --> 00:05:30,670
from this sub array.
88

89
00:05:32,320 --> 00:05:37,100
But there is a problem here, like the function will get trapped
89

90
00:05:37,150 --> 00:05:38,530
how can it be...?
90

91
00:05:41,700 --> 00:05:43,240
Uh.
91

92
00:05:46,210 --> 00:05:55,090
Yeah, I don't like the fact that I needed to use length minus one this way and let me stop this code
92

93
00:05:55,090 --> 00:05:55,360
here.
