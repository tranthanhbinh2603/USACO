0
1
00:00:01,190 --> 00:00:08,880
Homework number two and the first problem will read an integer N for a set of numbers, but it would
1

2
00:00:08,880 --> 00:00:13,190
be at least greater than or equal three and you will read this N number.
2

3
00:00:13,200 --> 00:00:17,740
So you would like to find the smallest three integers among all of them.
3

4
00:00:18,180 --> 00:00:24,150
For example, here we have an array of five numbers that the smallest numbers are one, three
4

5
00:00:24,150 --> 00:00:24,540
and four.
5

6
00:00:24,540 --> 00:00:28,770
And I'm printing them here from small to large, seven, nine minus two.
6

7
00:00:29,100 --> 00:00:32,990
Also, I'm printing them there from small to large base.
7

8
00:00:33,010 --> 00:00:34,200
Consider the following.
8

9
00:00:34,680 --> 00:00:36,870
You shouldn't change the array content.
9

10
00:00:37,320 --> 00:00:40,950
You shouldn't iterate on the array more than once, these are my constraints.
10

11
00:00:40,950 --> 00:00:42,900
If they are hard for you, ignore them.
11

12
00:00:44,520 --> 00:00:45,450
In this problem.
12

13
00:00:45,450 --> 00:00:51,300
You will read an array of length N and but all of the values would be between zero and five hundred.
13

14
00:00:51,780 --> 00:00:54,900
We would like to search this array for some numbers as queries.
14

15
00:00:55,380 --> 00:01:01,170
So first we will read the number, the Integer Q which represented the number of queries and for every
15

16
00:01:01,170 --> 00:01:07,800
query you will read an integer and find the last occurrence in the array of Q, if it doesn't exist
16

17
00:01:07,820 --> 00:01:08,610
print minus one.
17

18
00:01:09,090 --> 00:01:12,510
For example, here we read an array of length five which are these five numbers.
18

19
00:01:12,690 --> 00:01:17,910
We have three queries, seven, nine, and two, for the query seven
19

20
00:01:18,420 --> 00:01:26,340
you notice that the seven existed twice in position two and in position four the last occurrence should be four
20

21
00:01:27,090 --> 00:01:31,980
for the query nine nine, doesn't exist, so we bring two minus one. for the query one
21

22
00:01:31,980 --> 00:01:34,020
it just exists in the first position
22

23
00:01:34,020 --> 00:01:38,400
so we return the position one.
23

24
00:01:42,800 --> 00:01:49,620
Sorry, sorry, the query is two, which is position one, not one, so I get confused, try to start
24

25
00:01:49,640 --> 00:01:52,820
the problem by doing it with two nested loops, to do with nested loops,
25

26
00:01:53,000 --> 00:01:56,150
but after that, I try to do it without any loops.
26

27
00:01:58,040 --> 00:02:06,050
in the third homework, you should read, an array of up to 200 integers, find the value that repeated
27

28
00:02:06,050 --> 00:02:08,990
the most number of times, consider the following,
28

29
00:02:09,170 --> 00:02:16,460
the value in the given array would be from minus 500, up to two seven hundred, a two hundred and seventy.
29

30
00:02:16,880 --> 00:02:22,880
So, for example, this is seven numbers and these are the numbers and observe here that minus one is
30

31
00:02:22,880 --> 00:02:24,310
repeated three times.
31

32
00:02:24,350 --> 00:02:28,430
So this is expected out from you: minus one repeated three times, something like that.
32

33
00:02:28,440 --> 00:02:31,340
or just minus one, no no, minus one repeated three times.
33

34
00:02:32,300 --> 00:02:33,500
Don't use nested loops.
34

35
00:02:35,460 --> 00:02:43,260
in this one, you will read number N and for every digit for all the...
35

36
00:02:47,040 --> 00:02:52,240
Read an integer N for all digits from zero to nine we want to know how many times appeared
36

37
00:02:52,290 --> 00:02:52,540
Yeah.
37

38
00:02:52,560 --> 00:03:02,220
OK, sorry, here we have, we are reading here two numbers,  72 and 307 for all of the numbers
38

39
00:03:02,220 --> 00:03:02,520
here,
39

40
00:03:02,700 --> 00:03:05,100
consider all of their digits from zero to nine.
40

41
00:03:05,280 --> 00:03:08,550
We would like to get the frequency of the digits from zero to nine.
41

42
00:03:08,880 --> 00:03:14,940
For example, observe that digit seven, for example, digits seven appeared here once and here another
42

43
00:03:14,940 --> 00:03:15,260
time.
43

44
00:03:15,420 --> 00:03:21,340
So we write here, seven two, observe the digit three, for example, digits three appeared 
44

45
00:03:21,340 --> 00:03:24,750
only once here, the digit zero appeared only once here.
45

46
00:03:25,260 --> 00:03:27,790
Digit six never appeared.
46

47
00:03:28,050 --> 00:03:34,500
So for all of these given numbers, count the frequency of their digits and then print for me the frequency
47

48
00:03:34,500 --> 00:03:36,350
for the digits from zero to nine.
48

49
00:03:37,830 --> 00:03:41,460
And here in this one, we will find the unique numbers of a list,
49

50
00:03:41,460 --> 00:03:43,860
but this time the list is unordered.
50

51
00:03:44,100 --> 00:03:45,270
Consider the following,
51

52
00:03:45,450 --> 00:03:47,250
the N can be up to nine hundred.
52

53
00:03:47,640 --> 00:03:48,810
But what is more important?
53

54
00:03:48,810 --> 00:03:53,730
The values from zero to five hundred now print the unique list of numbers.
54

55
00:03:54,090 --> 00:03:55,910
But preserve serve is a given order,
55

56
00:03:56,100 --> 00:03:58,710
the order preserves the given order would make more sense hear,
56

57
00:04:00,000 --> 00:04:07,350
the output for this input is one five two seven three, the one for once time, five appeared twice so It printed here one 
57

58
00:04:07,350 --> 00:04:11,580
only, two once, five repeated seven, yes put it here.
58

59
00:04:11,730 --> 00:04:14,000
But ignore this seven, three put it here.
59

60
00:04:14,400 --> 00:04:18,900
So as you see, we ignored every duplicate of the number by preserving the order,
60

61
00:04:18,900 --> 00:04:22,430
we noticed that five hear appeared before two,
61

62
00:04:22,590 --> 00:04:24,930
so in the output five appeared before two.
62

63
00:04:25,140 --> 00:04:28,740
So this is what we name the given order, this is preserving the order.
63

64
00:04:28,920 --> 00:04:34,260
So we have some times sorting the values from small to large, sometimes by preserving the given order.
64

65
00:04:36,030 --> 00:04:39,930
Do not use, again, the nested loops. Sorting the numbers,
65

66
00:04:40,260 --> 00:04:43,890
you would like to sort a given input of numbers.
66

67
00:04:44,130 --> 00:04:50,670
However, the very important constraint here is that the value of all of the given numbers are from
67

68
00:04:50,670 --> 00:04:52,800
zero to 500.
68

69
00:04:53,160 --> 00:05:00,090
Give your best to give your efficient algorithm, please.
69

70
00:05:00,090 --> 00:05:04,770
don't Google how to sort numbers, sorting is a very fundamental problem in computer science.
70

71
00:05:05,040 --> 00:05:06,450
If you googled, you'll find a lot,
71

72
00:05:06,690 --> 00:05:07,920
and most of them I don't need it.
72

73
00:05:08,130 --> 00:05:11,280
You can solve this problem without googling,  just think about it.
73

74
00:05:11,520 --> 00:05:17,820
The hint that I would like you to make use of,  is that the max value in the array is just five hundred.
74

75
00:05:17,820 --> 00:05:18,960
So how can we make use of that?
75

76
00:05:20,370 --> 00:05:20,670
That's all.
