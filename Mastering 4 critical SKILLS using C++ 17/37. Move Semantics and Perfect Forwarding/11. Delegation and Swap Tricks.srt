1
00:00:00,960 --> 00:00:07,350
I would like to go back to the move constructor and copy constructor and learn a nice tricks that might

2
00:00:07,350 --> 00:00:11,060
make your code maybe less a good size or less trowels.

3
00:00:12,770 --> 00:00:17,390
There are two tracks here, the delegation and the swabbing this hour.

4
00:00:17,500 --> 00:00:19,730
This is our copy constructor as it is.

5
00:00:20,210 --> 00:00:24,550
This is our assignment as it is almost for now.

6
00:00:24,950 --> 00:00:28,150
And this is, first of all, the move constructor.

7
00:00:28,670 --> 00:00:34,310
There is an easy way that instead of Fiorita good in the constructor and the assignment and there is

8
00:00:34,310 --> 00:00:39,440
a duplication, we can delegate from the constructor to the new assignment.

9
00:00:39,440 --> 00:00:40,250
How to do that.

10
00:00:40,250 --> 00:00:46,700
As simple as you start to use the equal here and then use it right here is the remove of the other object

11
00:00:46,700 --> 00:00:49,820
here on your right and instead move for this object.

12
00:00:50,120 --> 00:00:55,710
Then this value will be at our value and with this equal rigor, you are switching it to here.

13
00:00:56,090 --> 00:01:00,220
So this way you don't have to write any good in the constructor.

14
00:01:00,230 --> 00:01:03,410
You only have to focus over the copy constructor.

15
00:01:03,800 --> 00:01:06,920
This is the delegation right now, the Swaptree.

16
00:01:07,790 --> 00:01:13,520
Remember, in the last time in the constructor, we have to do two steps forward.

17
00:01:13,760 --> 00:01:16,970
We say that we first need to delete my own data.

18
00:01:17,480 --> 00:01:25,790
We second need to take Cobbe from the data on the other for me, and we then need to pointer the other

19
00:01:25,790 --> 00:01:26,390
object.

20
00:01:27,020 --> 00:01:28,310
Now, here is a track.

21
00:01:29,120 --> 00:01:32,630
We are going to only swab my.

22
00:01:33,720 --> 00:01:40,440
Object details is with his own object, it is within an internal swap function that is just as webbing

23
00:01:40,440 --> 00:01:41,730
my pointer with his pointer.

24
00:01:41,760 --> 00:01:46,100
Am I going to this pointer if I have more data like, say, integer X or so?

25
00:01:46,100 --> 00:01:48,240
You're just describing them now.

26
00:01:48,630 --> 00:01:49,960
After that, what happened?

27
00:01:50,430 --> 00:01:56,790
Notice that I didn't delete something from my side and I didn't put another pointer on his side or what

28
00:01:56,790 --> 00:01:59,200
I did is just I swear that my data was his data.

29
00:01:59,700 --> 00:02:06,990
Then after the constructor go out of here or what's going to happen is this object will call its own

30
00:02:06,990 --> 00:02:12,630
the structure and its the structure is going to do the normal deleting that we used to do.

31
00:02:12,900 --> 00:02:19,410
So in this way, you are actually doing much less good in your function by avoiding to delete yourself

32
00:02:19,410 --> 00:02:23,430
and not point to the other day, which might be problematic in a very systematic way.

33
00:02:23,430 --> 00:02:29,550
Provider's work function that just to swab the internals of the object and this is what we call the

34
00:02:29,550 --> 00:02:30,150
Swaptree.

35
00:02:32,510 --> 00:02:39,150
Before the R value references, there were a different logic here that involved what we call a QB and

36
00:02:39,180 --> 00:02:45,200
swap, where do you first make a copy of this object and return it here, but still sometimes even happen

37
00:02:45,200 --> 00:02:47,690
in the move, in the assessment of the letter itself.

38
00:02:49,160 --> 00:02:51,980
Let's say we have something like our own vector.

39
00:02:52,280 --> 00:02:55,900
So I have a length of my array and he has a lens of his own array.

40
00:02:56,210 --> 00:03:02,060
Then sometime you will have to create your own memory first before just taking the memory of the other

41
00:03:02,060 --> 00:03:02,360
side.

42
00:03:02,690 --> 00:03:10,040
So sometimes we might need to create using the constructor my own data, then swab it with the other

43
00:03:10,160 --> 00:03:10,940
other guy.

44
00:03:11,870 --> 00:03:20,270
That's why you're providing a separate function here is useful because both move constructor or assignment,

45
00:03:21,230 --> 00:03:26,770
assignment operator or assignment operator might need to use this swap function.

46
00:03:28,460 --> 00:03:30,830
These are very nice readings about the swap function.

47
00:03:30,830 --> 00:03:36,680
That is like a discussion how to write a better swap function for more generic purposes, how to avoid

48
00:03:36,680 --> 00:03:38,690
the throwing of exceptions.

49
00:03:38,870 --> 00:03:40,760
And what about the QB and swap adiam?

50
00:03:41,060 --> 00:03:42,950
But what you learn here is more than enough.

51
00:03:44,080 --> 00:03:44,470
That's a.
